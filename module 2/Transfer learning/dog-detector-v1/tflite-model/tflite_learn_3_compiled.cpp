/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 06.10.2024 19:41:14

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 36
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 72
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 101888;
#else
constexpr int kTensorArenaSize = 100864;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_FULLY_CONNECTED, OP_RESHAPE, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4*2] = { 
  0, 0, 
  1, 1, 
  1, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data3[2] = { -1, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data4[2] = { 44, -44, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const TfArray<1, float> quant4_scale = { 1, { 8.8187545770779252e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[2*32] = { 
  81, -35, -39, 112, -81, 21, -56, 78, 127, -35, -34, -8, -8, 95, -48, 40, 122, -82, -40, -94, 101, 88, 90, -57, -59, -87, -48, 82, 2, -89, -12, 71, 
  54, 84, 75, -76, -80, 75, -12, 13, -49, -16, 40, 107, 119, 36, 40, -6, -47, 6, -66, -102, -85, 35, 29, 116, 88, 81, -53, -11, 115, -119, -119, -24, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 2,32 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0034076394513249397, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[8] = { 146, 127, -239, -322, 79, 54, 364, 65, };
const TfArray<1, int> tensor_dimension6 = { 1, { 8 } };
const TfArray<1, float> quant6_scale = { 1, { 1.6874548236955889e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[8*1280] = { 
  -54, 9, -54, -83, -46, 43, 2, -61, 92, -56, 77, -86, 12, -73, -54, -73, 71, 51, 54, -78, -34, 3, 98, -95, -76, -56, -31, -69, -99, -40, 51, -77, 72, -15, 40, 33, -67, 22, 31, 94, -81, 25, -86, 67, -21, 88, 56, 33, 41, 6, -1, 97, -3, -34, -46, 53, -43, -81, -30, -20, 34, -45, -33, -96, -25, -36, 110, -73, -28, 83, 76, 51, -75, -42, 45, 27, -56, 8, 52, -41, -48, 42, 78, 97, -81, -12, 73, -66, 33, 70, -12, -44, 105, 76, 45, -7, -93, -103, -22, 49, -11, 59, 50, -19, 51, 34, -45, 40, -55, 47, 48, 25, 103, -68, -63, 88, 8, 14, 15, 41, -10, -84, 29, 9, -66, 114, 25, -42, 49, 81, -101, -5, -65, -30, 55, -11, -60, 49, 70, 50, 62, -17, 38, 2, -83, 89, -31, -50, -50, -24, 30, -53, -99, -25, -34, 60, 25, 59, -48, -1, 37, 76, 29, -69, -83, 87, -57, -76, -95, -83, 44, 86, 74, -111, 72, -3, 47, -27, 55, 12, -90, -20, 76, -46, 65, -27, 91, 26, -7, 61, 5, 53, 34, 10, -49, -74, -56, -83, -99, -27, -12, -56, 9, -13, 91, -1, 103, 5, -60, -53, -44, 65, -47, -7, 98, 62, -84, -11, 55, 50, 57, -88, 20, -46, 8, 17, 39, 18, 76, 93, 66, 44, 86, -84, 36, 39, -105, 87, 22, -9, -55, 74, 79, 87, 48, 34, 96, -6, -67, 44, 28, 31, 49, 93, 58, 70, -15, -26, 43, -80, 5, -28, 30, 93, 32, -20, -25, -53, 75, 57, 74, -83, 31, -50, 31, -84, 82, 37, 107, 36, 57, 27, -11, -49, -104, 1, -1, -4, 65, 58, 44, -44, -66, 70, 69, 28, 41, 10, 61, 83, 53, 29, 52, 89, -77, -44, 9, 42, 1, 65, 84, -80, -54, 88, -80, -72, 24, 63, 8, -54, 32, 36, 8, -62, 25, 55, -65, -101, 68, -102, 39, -45, -4, -78, 28, -108, -57, 6, 7, 12, -23, 30, 78, 40, -80, 84, 85, -26, 90, -30, 24, -78, 24, 20, 70, -7, 102, -22, 23, -91, -19, -85, 1, 10, -96, 99, 99, -37, 24, -68, 44, -24, 50, -79, -14, 15, 42, -33, -59, -67, 2, 70, 1, 29, -55, -56, 37, -90, -87, -58, -31, -37, 81, -91, -49, -5, 90, 24, -64, -62, -54, 5, 74, -22, 50, 10, 59, 24, 26, -15, 29, -3, -54, -98, -88, -18, 26, -52, 9, -8, -74, 38, 96, 56, 15, 24, -97, -110, -24, -59, 79, 19, 4, 8, 48, 82, -7, -109, 17, -51, 45, -22, 58, -22, -55, 90, -103, 16, 22, 93, -57, -33, 9, 21, 6, 19, -102, 64, 65, 32, -73, -80, -65, 73, -10, 0, -37, 104, -32, -29, -1, 49, 18, -71, 41, -14, 6, -43, 88, 49, -19, 16, -93, -65, -53, 26, -66, 44, -75, 74, 33, -91, -30, -26, -73, -29, 37, -92, -75, -79, -10, 88, 65, 20, 44, -53, 32, -80, 80, -63, -67, -20, 11, 7, 28, 92, -23, -52, 91, 16, -38, -77, 53, -78, 3, -34, -9, -16, 72, -64, 11, 1, 76, 75, 66, -87, 60, -66, -37, 63, 19, -15, -57, -62, -19, -71, 21, -51, -81, -28, -102, -23, -26, -70, -70, 90, -42, -21, -1, 76, 54, -36, -72, 73, 58, 24, 45, -9, -23, -100, -50, 28, -55, -1, -8, 58, 10, -80, 13, 12, -35, -67, 15, -62, 68, 0, 4, -58, 6, 24, 33, 103, -73, -13, -82, 62, -88, 8, -26, 31, -15, 72, 75, 61, -34, 82, 54, -47, 70, -36, 5, 32, 18, -74, -19, 87, 96, -23, -97, -36, -65, 9, 31, -97, 14, 74, 44, 72, -15, 73, 34, -102, -28, 60, 42, 60, -10, -59, 4, 79, 52, 44, -39, -96, 40, 16, -85, 88, -39, -10, 59, 50, -31, 12, -60, -90, 46, -57, 39, 27, 26, 74, -25, 35, -65, -56, 58, -29, -41, -66, 72, -1, -73, 2, 60, -47, 6, 82, 84, -55, -73, 24, -85, 37, -23, 55, -63, 52, -12, -102, -14, 51, -72, -90, -48, -79, 56, 6, 28, 2, 80, 61, 64, -9, -91, 85, -37, -13, 21, -7, -36, 69, 45, 41, 43, 22, 68, -36, -23, 56, -63, -81, 83, 83, 62, -42, -8, 78, 40, -117, 46, 28, -25, 18, -60, 80, 90, -94, -8, 76, -46, 66, -12, 3, 39, -75, -41, -79, -59, -97, 69, 3, -21, -67, 93, 37, -92, -52, 21, 4, -98, 17, -21, 10, 79, -52, -7, 90, 4, -18, 88, -72, -73, -8, -76, -68, 16, 58, 83, -57, 46, 19, 51, -27, -50, -90, -72, -11, 28, 20, -1, 88, 36, -1, 22, 46, -60, 13, -59, 80, -79, 58, 67, -79, -91, -33, 70, 39, 0, 25, -21, -26, -24, 59, 74, 4, -87, 11, 44, -27, 61, 34, -27, 89, -13, -23, -40, 27, 21, -99, 9, 83, -18, 94, -85, -94, -53, 65, -54, -65, 47, 8, 43, 82, -42, 68, -106, 84, -13, -92, -35, 31, -84, -60, 46, -58, -31, -60, -80, -84, 45, 15, 82, -49, -16, 19, -29, -82, 71, 7, 72, -29, 81, -25, 61, 57, 40, 7, 4, -25, 32, 59, 23, -55, -12, -20, -76, -107, -41, -30, 10, 9, -87, -38, 90, 62, -106, -16, -18, 36, -72, 35, -21, 24, 46, 44, 95, 54, 10, 46, 88, 71, -96, -100, -24, -73, -74, 26, -31, -28, 42, -2, -50, -3, 105, 35, -43, 25, 62, -22, 8, 64, -5, 41, 15, 64, 81, 36, 14, 2, -58, 104, 24, -75, 80, -74, -52, 74, -34, 18, -89, -26, 89, -62, -19, 8, 61, -4, -60, 6, -32, -79, 72, 24, -54, 59, -75, 15, 11, -38, -88, -77, 13, 39, 65, -81, -4, -23, 71, 45, 43, 24, -29, -21, 4, 62, -12, -45, -93, 0, -50, 7, -78, 67, 98, 17, -67, 69, -83, -20, -36, 71, 73, 38, -75, -10, 55, -49, -106, -83, 85, -89, 71, -103, -65, 77, 16, 58, -65, 9, -5, -32, -28, 36, -39, 82, -45, -15, 12, -3, -45, -9, 24, -62, 88, 64, 48, 33, -41, -26, -30, 73, -20, -32, -67, 60, 91, 7, 5, 56, 64, -50, 0, -78, 84, -41, 83, -40, 74, 9, -41, 90, -2, -61, 63, -52, -54, 32, -80, 34, -76, -28, 31, -16, -43, 45, -13, 87, 88, 64, 63, -42, 62, -39, 66, -47, 4, -2, -5, 83, -92, -33, 20, -58, 27, -4, -65, 37, -72, 11, -51, 33, -40, 70, 6, 17, 61, -84, -38, -82, -112, -32, 66, -75, -83, -42, 17, 15, 72, -55, -90, 90, -97, 1, -64, -40, 69, 5, -54, -76, -92, -68, -8, 31, -23, -7, -47, 11, 17, 16, -59, -71, -13, -71, 55, 42, -16, -87, 68, -94, -59, 41, -18, 98, -18, 24, -78, 60, 31, -21, -51, 60, -80, -89, -103, -79, 61, 87, 62, 50, 70, 81, -88, 55, -62, -44, 85, -18, -81, 19, 68, 75, 18, -45, -21, 39, -67, -31, 94, 69, 72, -45, -15, 25, -95, -17, 30, 4, -27, 6, 54, 60, -17, -43, -6, -37, 80, 52, 47, 4, -15, -62, 5, 91, 35, 70, -17, 96, -18, -45, -67, -79, -12, -62, -59, -10, 61, 87, -30, 66, -73, -87, -4, 43, -89, -50, -45, -56, 41, -33, -42, -35, 1, 3, -66, -29, -86, -60, 26, -94, -52, -84, 77, 16, 76, 102, -73, -70, 1, 95, 28, 28, 12, -26, 36, -17, -41, -56, -47, 12, -7, 54, -68, 46, -94, 99, 7, 72, 11, -6, 
  -60, 24, 10, -56, 38, 25, -68, -48, -66, 80, 26, -52, 0, 32, 72, 7, -31, 53, -40, 76, 65, -103, -94, -51, 17, -35, -59, -68, 32, -83, -78, 39, 62, 53, 44, 20, -97, 39, -70, -86, -82, -17, 71, -14, 109, 37, 55, 3, 47, 2, 61, 53, -20, -71, 63, -6, 32, -62, -66, -89, 69, -32, 23, -21, 82, 25, 26, -52, -33, 16, 38, 21, 27, -81, 89, 24, 116, -48, 94, -102, -56, -12, -43, 48, -9, 82, -13, 87, 14, -71, -1, 5, 1, -85, -38, -63, 18, 109, 35, 26, 29, -12, 61, -41, -10, -17, -67, -102, 95, 18, 29, 33, -16, 15, 81, 59, -8, -52, -31, -79, 72, -52, -16, 26, -69, 86, 42, 78, 70, 37, -38, 95, 90, 9, -16, -76, -20, 21, 21, 37, 3, 7, -4, 52, 32, -36, -24, 94, 29, -1, 99, -74, 3, -14, -72, -30, -52, -38, -19, -15, -45, 31, -99, -77, 7, -65, -14, 85, -7, 31, 0, -92, -76, -52, -14, -5, -30, 76, -3, 77, 31, 16, 18, 52, -10, -77, 49, 75, -25, 58, -104, 32, -27, 64, 88, -63, -59, 10, 86, 62, 89, -63, -5, -66, 33, -44, 35, -6, -15, 72, -8, 29, 67, -56, 64, -10, -77, -42, 89, -59, -44, 80, -73, 2, 17, 67, -91, -26, 101, -52, 89, 72, 73, -2, -72, -100, 61, 1, -89, 62, -29, -60, 35, 87, 117, 73, -68, 45, -28, 70, 52, 28, -51, -83, 67, 53, -30, -70, -63, -5, 30, -10, -80, 49, 56, 106, 28, -11, 14, 56, -73, 7, 86, -18, -70, -79, 17, 89, 0, 3, 24, 94, 88, -30, -4, -64, 36, -86, -67, 26, -1, 26, 69, 61, -72, -75, -46, -72, -46, 72, 65, -86, 64, 29, 67, -35, 80, 66, -28, -70, -45, 50, -18, -15, 29, 3, 88, 74, -56, 6, -57, 34, -8, 39, 63, 33, -9, 24, -42, 84, -71, -41, -97, 9, -86, 85, 11, -23, -109, -80, 84, -70, 51, -40, -38, 38, 49, -68, -57, -11, -45, -71, 58, 99, 16, -23, 47, 20, 59, -26, 97, -30, -83, 78, 6, 68, -114, 22, 56, 99, -8, -110, 83, -4, 73, -7, 7, 54, 22, -28, 6, -41, 15, -57, -44, 54, 37, -1, -34, -64, -77, 100, 73, -28, -66, 41, 21, 68, -49, -90, -23, -52, 0, 95, 71, 73, -3, 41, -50, -69, 30, 4, 57, -73, 39, 37, 82, -78, -41, 40, -49, 43, -28, -49, 62, 55, -23, 66, 5, -81, 1, -66, 31, 32, -26, 58, 70, 90, 34, 37, -36, 81, -42, -41, 63, 79, -55, 70, -7, -34, 52, -99, 41, -18, -37, 13, 9, -45, 13, 58, 77, 42, 30, 18, -35, -64, -97, -103, 46, -71, 26, -42, 39, 90, 89, -51, 85, -38, -78, -27, -96, 75, 55, -50, -78, 5, 3, 33, 20, -12, 63, -64, 50, 71, 12, -81, 39, 43, 90, -86, 95, 8, 78, 114, 7, 20, -13, 5, -11, 81, -84, 37, -54, 36, 60, 91, -53, 43, -11, 79, 38, -39, 21, 38, -10, 12, 7, -11, 73, 48, -80, -3, 84, 56, -28, -61, -9, 72, 2, 94, 96, -105, -6, -104, -4, 93, -62, 62, -82, 34, -41, -87, 89, 28, 107, -40, -48, 20, -94, 55, -64, -50, 83, -53, -60, -3, 2, 54, -46, -43, -41, 47, 7, 97, 83, 71, -74, 23, 32, -61, 85, -37, -39, -11, 108, -67, -15, 3, -31, -43, 7, -96, 5, 54, -53, 66, 32, -42, 4, 36, -46, 63, 58, 44, 56, 16, 75, -43, 71, -44, -63, -2, 20, -31, -56, -65, 87, 19, 103, 39, 25, 79, -52, 29, 49, 59, 48, -50, -57, -89, 28, -12, -9, -20, -85, 16, 52, 78, -45, -78, -34, -58, -72, 17, -62, 51, -91, -12, 56, -80, -41, -84, -50, 16, 13, -24, -65, 17, 57, -43, -2, -46, -20, 10, 61, 51, -75, 22, -40, 43, -28, -44, -25, 40, -31, 13, 79, -91, -79, -17, -46, -86, 8, -28, -38, 30, -2, 3, -66, 46, -65, -77, 19, -27, 47, -53, 75, 90, 8, -44, 43, 78, -17, -32, 63, -48, 7, 43, 65, -43, 16, 96, 36, 25, 46, -38, -65, 64, 84, 17, -2, -62, -1, 54, 40, -21, -53, -51, -42, 11, -73, -54, -3, 63, -28, 29, 107, -77, -50, -16, 44, 58, -63, -80, 73, -66, 98, -29, -68, 41, 22, 105, -87, -76, -61, -37, 3, 100, 28, -66, -1, 6, -77, 33, -7, 44, -104, 71, -91, -6, 16, -83, -20, -39, 0, 77, -31, 73, -78, 46, 43, -8, -1, -43, 21, 82, 115, 30, -101, 68, -13, -49, -110, -18, -56, -71, -79, 45, -13, 114, 34, -8, 49, 98, 48, -51, -53, 17, 2, -12, 37, -1, 0, -36, 15, -3, -39, -9, -3, -64, 69, 36, -17, 39, -55, -60, 55, 43, 75, 14, -96, -86, 93, 58, -55, -4, -38, 4, -11, -61, 7, 100, 12, -34, 75, -88, 27, -73, -45, 67, 71, 29, -70, 37, -47, -41, -16, -29, 113, 22, 99, 29, -2, 66, 39, 67, -12, 80, 53, -67, -26, -82, 89, -15, -80, -10, 86, -27, 11, 25, -82, -2, 62, 95, 58, -103, 65, -45, -19, -42, -71, 106, -39, 27, 2, -3, 3, -23, -76, -73, -80, -55, -69, 3, 54, 112, -75, 49, 29, 1, 9, 30, 95, -69, -24, -21, -27, -75, -40, -40, 99, 38, -19, -5, 53, 71, -61, 19, 74, 13, -94, -67, 86, -42, 109, 49, 92, -83, -18, -99, 42, -81, -92, 52, -6, 50, 63, 61, -9, -85, -36, -96, 77, 74, -11, 9, 47, -60, -8, 76, 80, -15, 68, 68, 64, 0, -29, 23, 47, 36, 3, -72, 100, 26, -67, -68, -80, 58, 92, 49, 70, -87, -28, -20, -3, -54, -10, 37, 85, -36, -80, 102, -69, -82, -64, 6, 108, 80, -43, -55, 51, -63, 93, 23, -4, -54, 51, -53, -36, 70, 78, 74, -50, -1, 13, 50, 20, 45, -74, -97, -30, -2, 59, -47, -49, 21, -29, -33, 47, 97, -41, -75, -71, -61, -31, -8, -26, 23, -89, 43, -55, -100, -17, 16, 63, -40, -69, 74, -35, -69, 84, -67, 75, -11, 4, 58, -32, 60, -1, 28, 14, -66, -41, 71, 47, 33, 114, 55, -112, 82, -60, -84, 79, 5, 72, 39, -2, 75, 65, 72, 57, 73, 24, 5, 10, -98, 62, -63, 63, -28, 29, -69, -24, -68, -98, -97, 4, -2, -45, 23, 66, 3, -69, 64, 34, 82, 23, -51, 87, -11, 51, -12, -34, -51, 63, -105, -61, 19, 70, 39, 4, 40, -19, -41, -42, 37, 39, 104, -58, -38, 41, -46, -98, -76, -57, -45, 44, 89, -87, -70, -40, -75, -50, 37, 52, 10, 41, 60, -55, 102, 60, -29, 32, -87, 29, 38, -61, 38, -48, 9, 92, 5, -86, -62, 43, 8, -20, -47, -23, 31, -66, 0, 0, 44, -13, -81, -36, 19, 36, -42, -72, 57, -19, -6, 84, 27, 88, 7, -5, -73, 10, -31, -3, 53, 33, -57, 32, 45, 70, 18, 85, 55, 82, 5, -3, -74, 82, -66, 62, 48, -79, -47, 60, -62, 18, -77, -66, 69, -38, -3, -42, 112, -32, -9, -28, -57, -6, 40, 9, -95, -62, 28, 2, 43, 15, -3, -72, 75, 27, 43, -25, 3, -75, -8, -24, 20, 64, -57, -53, 78, 13, 60, -86, -41, -10, 42, 20, 37, 74, 19, -102, -56, 39, -68, -37, 5, 19, 87, -8, -74, -56, -46, -98, 19, -9, -64, -60, 68, -15, 83, 
  59, -53, -85, 54, 33, 92, 74, -105, -39, 74, 73, -14, 71, -61, -43, 7, -4, -16, -19, -81, -41, 78, -104, -7, 56, 78, -87, -12, 97, 16, -10, -14, -91, 54, -7, -66, 66, 22, 71, -96, -29, 11, -89, 95, 104, -50, -29, 82, 74, 70, -42, -61, -23, 61, 26, -44, 55, -17, 39, 20, -93, -5, -57, 0, -58, -43, 3, 84, -44, 70, -16, 25, 16, -71, 41, -69, 31, -56, -30, -56, -77, -31, 77, 1, -14, 5, -36, 51, 74, 34, 12, 75, -4, -82, -56, -1, -30, 44, 28, 40, 75, 23, -68, 49, 100, -93, 0, -1, 1, -108, 77, 46, -65, -34, 23, 19, 65, 54, 24, -8, 53, -81, -5, -85, 71, -65, 22, -4, -60, 62, 52, -31, -20, 86, -27, -41, -78, 78, -92, -72, -89, 67, -103, -56, -78, -27, -25, -48, 54, -9, 34, 68, 68, -25, -34, -34, -26, 46, 46, 105, -103, -26, -24, -55, -62, 82, -3, 83, 24, -97, -16, 46, -12, -8, -21, 20, -70, -77, -95, -30, 85, -29, 4, 85, -28, 1, 15, -28, -76, -25, 0, 72, 79, -9, 19, -19, 13, -8, -37, 21, 75, 26, 53, 0, -84, -4, 20, 79, -51, 46, -87, 2, 47, 22, -9, -44, 12, -57, 12, -7, -2, -10, 65, -81, -63, -87, -45, 67, 59, -3, 30, 57, -37, 50, -6, 42, -6, -45, -78, 19, 0, -4, 63, -3, 70, 68, 88, -64, -40, 77, -6, 41, 34, 25, 20, -26, 77, 90, -38, 91, 29, -59, -101, -7, 21, -78, -23, -37, 66, 5, 66, 63, -59, 14, 70, -75, 45, -20, -52, 94, 6, -80, -53, 71, -78, -50, 81, 76, 29, 58, -90, 55, -67, 49, -15, -91, 27, -72, -78, -77, 22, 92, -82, -9, -48, -6, 36, 35, -35, 48, 38, -68, 8, 55, 5, -78, 7, 14, -65, 7, 34, 62, -57, -27, -70, 10, -11, 63, -24, 40, -21, 59, -31, 67, -62, -40, -19, -102, 87, 54, -80, 59, -30, -15, -16, 72, 66, -26, -38, -10, 44, 15, 60, 38, -94, -75, 88, 6, -67, 77, -19, 17, -60, -2, 14, -56, 79, -3, -51, -44, 64, -38, -70, -40, -49, 97, -49, -56, 34, 37, -59, -61, -29, 97, -35, 7, 77, -63, 75, 1, 63, -88, -55, -60, 43, 41, -12, -19, -100, -9, -49, -68, -66, -26, 40, -82, 29, 59, -62, -98, 11, -80, -63, -18, -6, -88, 90, -73, -76, 64, -13, -14, -10, 95, 49, -87, -84, 55, -7, 66, -70, 40, -45, 57, -4, -45, -28, 75, 73, 1, 35, 64, 37, 60, 34, -74, -97, -8, -16, 70, -70, 31, 60, -99, -18, 33, 52, -16, 63, 18, 93, 25, 78, 15, -41, -29, -26, 10, 93, -9, -92, 53, -20, 47, -77, 59, -71, -41, 50, 12, -41, 7, -51, 79, 32, -76, -56, -51, -85, 0, 26, -6, -58, 59, -62, -21, -6, -7, 11, -89, -67, -19, 48, -20, 40, -78, -6, -74, 89, 0, 42, -14, -74, 28, 24, 75, -56, -82, 71, -82, -28, -66, 69, -99, -73, 21, 50, 85, -28, 98, -44, -18, 36, -4, -54, -85, -74, 46, 78, 11, 83, 86, 24, 74, -78, 101, 17, -32, 48, -5, 58, 61, 74, 12, -8, 12, 48, 74, 60, 43, -79, -12, -33, 74, -13, -73, 17, -27, -7, 48, -41, 74, 38, -117, 89, -88, -22, 73, 28, -98, 47, -34, -55, -24, 54, -18, 2, -1, 91, -9, -58, -38, 76, -50, -15, -33, -90, -45, 32, -26, 3, -88, -99, 5, 34, -78, 62, -89, -54, 65, -61, -59, 41, 29, -13, 59, 79, 93, -1, 8, 85, 69, 14, -57, 93, 29, 75, -79, 75, 31, 30, 61, 58, 43, 72, 97, 13, 7, -91, -47, -54, 47, 62, -3, 85, 86, 75, 94, 95, -99, 93, -97, 86, -29, -1, 10, 28, -30, -21, -52, -24, 73, 26, 63, -6, 41, 49, -17, 86, 78, 52, -94, -1, 71, -58, 71, -48, -38, 82, -67, 73, 73, 82, 82, -80, 90, -70, 34, -100, 111, 46, -75, 0, -76, -24, 41, 52, -88, -39, 4, 39, -66, -37, 72, 3, 60, 21, 87, -44, 6, -65, 92, -73, 31, 13, 67, -66, -61, 9, 54, 41, -34, 4, -28, 8, 34, -85, -82, -62, -53, -55, -19, 78, 54, 72, 100, 19, 51, 36, -7, -86, 65, -62, 14, 11, -90, 57, -39, -59, -57, 2, -58, 40, 73, -85, 38, -9, -2, -65, 26, -19, -15, -51, -93, -59, 63, -84, -53, -7, -10, 54, 60, 88, -83, 28, 3, 15, 4, 13, -88, 39, 2, 9, 59, 73, 32, 16, 0, 20, -39, 21, -29, -52, 66, -30, -76, 75, -17, 1, -27, 59, -75, -11, -24, 23, -17, -22, 84, 64, -82, 61, 13, 28, 17, 85, 95, -22, 14, -18, 58, 78, 18, -14, 62, 54, -68, 77, -83, 8, 2, 73, 79, -25, 18, -54, 75, -4, -93, -4, -9, 89, -11, -44, -34, -86, -30, -2, 85, 54, 85, 83, 84, 82, -63, -40, -14, 36, -83, 23, 82, -36, -35, -56, -66, -112, -24, 11, 48, 22, 8, 43, 89, 35, 11, -12, -15, -83, 68, -45, -61, 31, 81, 77, 46, -27, 66, 14, 38, -99, 93, 1, -60, 33, 50, 88, 58, -54, -9, 3, -84, 38, 9, 51, -81, -33, 62, -59, 54, 11, -25, 51, -11, 17, -25, 55, -36, -47, -69, 18, 2, -1, 43, -18, 48, 36, -46, -19, -31, 67, 64, 99, 9, -22, -20, -8, 87, -17, -101, -94, 31, -52, -17, -1, -64, -60, 62, 80, 41, 34, 34, 86, -85, -95, -13, 29, -11, -50, 61, 52, -54, 7, -26, -69, 22, -28, -13, 117, 52, -94, -70, -8, 108, -70, 40, 67, 18, -23, -49, -33, 64, -96, 80, 44, 51, -43, 29, 73, 23, -50, 56, 38, 87, -11, 46, -81, 14, -63, -77, -16, 78, 90, 51, 50, 83, -11, -86, -26, -80, 85, -38, 68, -47, -34, 2, -56, 32, 40, 25, -16, 47, -13, -42, -1, 99, 67, -55, -68, 54, -10, -80, 50, -79, 100, 73, 78, -69, -67, 34, 22, 72, -96, -35, 72, -78, 80, 57, -49, -7, 42, -87, 5, 67, -59, -90, -73, -5, 20, 13, 47, -44, 81, 40, -45, -85, -8, 18, -11, -5, 29, -82, -49, 50, -95, 22, -52, 40, -42, 67, 61, -28, 73, 27, 38, 42, 74, -27, -97, -35, 91, -75, -91, -66, -77, 74, -95, 42, -7, 43, 78, 92, 107, -49, 77, -84, -33, -82, 92, 42, 89, -17, -27, 39, -61, -95, -43, -28, -33, 22, -21, 41, 67, 80, -15, -49, 59, -30, -21, -78, -11, 19, -17, 83, 9, -30, -101, 47, -55, 96, -68, -20, 48, -9, 68, 85, -80, 71, -17, -47, 50, 42, -40, -13, 102, 62, -31, 0, -50, 45, -79, 57, 93, 80, 11, 76, 72, 109, -48, 12, -62, 38, 69, 41, 8, 85, -35, 40, -91, -81, -26, -82, -21, -15, 83, -37, 86, -44, -34, 75, 42, 4, 73, 40, -4, 6, 80, -101, 46, 33, -62, -49, 70, -82, -31, 37, -2, 21, 82, -47, 32, -37, -37, -45, -49, 34, -107, -29, -34, -96, -102, -1, -99, -62, 53, 64, -79, -52, 59, 72, -92, 44, 71, -70, 38, 27, -59, -43, 50, 73, 76, 68, 26, 44, -97, -16, -6, 28, 21, 40, 49, 6, -86, 17, -74, 57, 35, 80, 41, -7, -1, 90, -66, -2, 11, -26, 76, 43, 72, -76, -43, -51, -4, 35, -23, 76, -64, 13, 25, 74, -45, -56, 
  83, 77, 24, 6, -15, -4, 32, 19, 18, 5, 57, -70, -11, 86, 23, -96, -55, 105, 52, -104, 24, 60, -51, -36, -105, 51, 82, -36, 32, 30, 65, -7, 27, 72, 80, 62, 47, 70, -40, 91, 48, -53, 28, 14, 13, 102, -23, -66, 68, -16, -50, -30, 81, -62, 49, 46, 40, 23, -57, 63, 9, -46, 63, -21, 81, -64, 51, 59, 72, -88, -67, 19, -34, 41, 85, 63, -7, 33, 47, -56, 112, 44, 1, -69, -61, 45, 69, 12, -66, 35, -44, -11, -72, -94, 27, -5, -5, -107, 66, -79, -105, -68, -64, 26, -63, -3, 53, -62, 74, 67, -58, -15, 46, 61, -78, 61, -82, 12, -68, 30, 72, 3, -39, -40, 40, -28, 41, -5, -20, -53, 78, 61, -16, -80, -61, 54, 3, 58, 20, -82, -7, 17, 2, -69, -65, -44, 33, -83, -2, 78, -68, -52, 19, -40, -22, -66, 35, -45, -76, 89, -25, -23, 59, -85, -68, 86, -102, 19, -64, -48, -62, 38, -6, -19, 11, 21, 68, -33, -65, 77, 19, -60, 29, 4, -52, -81, 66, 63, -51, -87, -50, 80, 66, 68, -30, 70, -71, 67, 30, 68, 32, 98, -38, 55, 16, 42, 39, -47, 111, -79, -23, -69, 14, -63, 12, -64, 85, 4, -4, -1, -86, 19, 8, -31, -80, -56, 19, 78, -111, -44, 65, -39, -112, -35, 24, -69, -47, -52, -28, -66, -86, -83, 43, -50, 8, 82, -40, -49, -51, 72, 100, -15, 49, 39, 59, 46, 28, 35, -41, 31, -27, 70, 3, -29, -53, -54, -18, -96, -1, 13, 5, 76, -25, 57, 3, 37, -36, 41, 26, 5, -3, -66, 57, -100, 101, -45, -42, 4, 15, 29, -45, 51, -90, 72, -93, -63, 69, -97, -59, 10, -59, 32, -84, -86, 29, -67, -9, 56, 66, 31, -78, -35, 75, -47, 30, 72, -53, 71, 87, 82, -90, -93, 74, 82, -100, -36, -85, 1, 37, -61, -10, 107, 76, -13, 67, -52, 34, 29, -66, -42, 38, -76, -8, -61, -39, -7, 30, -29, -103, -28, 7, 56, -66, -78, 64, -29, 41, -17, 20, -10, -13, 8, 7, -6, -75, -84, 81, -58, 94, -69, -28, 43, -78, -22, 87, 13, -70, -80, 47, 95, 47, -43, -33, 42, -49, -65, 69, -72, 78, -14, 0, -14, -24, 31, -27, 62, -33, -54, 54, -64, -30, -24, 54, -77, 49, 109, 7, 72, -6, -46, 74, -41, 1, -1, 47, -24, 58, -61, -79, -59, 47, 74, 23, 13, 90, 94, 89, 97, -37, 87, -34, -52, 8, 12, 3, -21, 74, 1, 17, -86, -21, 42, -48, 69, -39, 58, -55, -90, 68, 25, 50, 50, -64, -7, 43, 77, -17, -95, 28, 43, -16, 52, 64, 41, 41, -71, -99, 79, 68, -37, -23, 35, 76, 14, 20, 93, 57, 0, -40, -52, -71, 52, -3, 84, -55, 85, 48, 12, 1, -43, -74, -47, -70, 98, -13, -101, 50, -91, 11, -70, 66, 82, -21, 62, -18, -27, 62, 24, 83, -58, 8, -68, 75, -57, 17, 51, 73, -10, 63, 10, 77, 34, -13, -45, -47, 3, -60, -85, -86, -8, -53, -94, 28, -67, -88, -70, -66, -81, 71, -83, -58, -13, 74, 58, 32, -54, 88, -84, -19, 45, 23, 40, -75, 73, -80, 33, -86, 22, 10, 63, 28, -1, -4, -14, 81, -82, 49, -50, 53, 49, -52, 40, -94, -70, 24, -37, -60, -42, -43, 54, 44, 9, 38, -28, 74, -47, 54, -37, -32, 86, 35, 52, -54, 58, -10, -65, 5, -100, -6, -44, 50, 19, -31, 22, 53, -47, -67, 46, -78, 37, 47, -18, 88, 23, 4, -39, -65, -76, -99, 9, 22, -40, -12, -56, 28, 19, 11, -84, 9, -76, -74, -16, -8, -94, 2, -67, -63, 77, -43, 81, 20, -5, -47, -67, 48, 64, -26, 8, -52, -17, -27, 40, 63, 31, 23, 25, 37, 52, -94, -66, 7, -32, 55, 81, -59, 30, 14, 74, 70, -87, -95, -53, 83, 28, 72, 64, -59, 59, 41, 61, -28, 95, -34, -64, 47, 13, -46, 86, -26, -73, 33, 90, -32, 59, 87, 32, 16, 16, -68, 3, 73, 56, 19, 85, 109, -46, 8, 30, 73, -55, -61, 15, -14, 54, 9, -94, 18, 11, -14, -80, -59, 77, 1, 14, -25, -3, -109, 23, 5, -46, -25, -39, 100, 98, 8, -38, -99, 44, -31, -68, -80, 54, 57, 55, -64, -79, 14, -32, -27, 20, 68, -14, 37, 37, 44, -81, 4, -34, 10, -81, -34, 89, 41, 23, 97, 47, 53, 42, 30, 48, 69, 25, 71, 93, -90, -43, 53, 20, -25, 26, 74, 73, 35, 8, -4, 37, 47, -74, 19, -11, -30, 74, 41, -71, 6, -88, 44, 80, 108, -23, -82, 63, 13, 32, 77, -91, 23, 65, 51, -74, 65, -47, 43, 10, 77, -56, 83, 73, -42, -31, 31, 25, 44, 61, 48, 29, -76, 88, 10, -84, 4, 3, -97, 9, -18, -60, 19, 63, -35, 43, 87, 73, 55, -34, -95, -65, -18, -14, 51, -100, 59, -112, 19, 63, -14, -15, -51, 72, -97, 33, -93, 89, 102, -89, 18, 72, 73, -40, -28, 63, -47, 71, 20, 25, 72, 70, -52, 75, -85, 16, -11, 32, -35, 81, 55, -31, 17, 79, 67, 72, -69, -77, -107, 36, -38, -71, -4, -9, -58, -10, -2, 4, -19, 8, 17, -16, 80, 59, 23, 8, -61, 3, 53, 84, -36, -60, -22, -74, 15, 72, -104, -44, -4, -52, -99, 31, 70, -80, -90, -65, 18, 90, -93, -38, 96, -27, -90, -32, -22, -25, 85, -46, 89, 50, -32, 64, -102, -37, 6, -81, -2, -11, 70, 68, -104, -70, -4, -47, -1, 95, 2, -12, -80, -18, 100, 30, 54, 2, 42, -2, 16, 21, 1, -53, -11, -49, -28, 35, -15, -6, 55, -4, -28, 42, -56, -55, -79, -45, 78, 66, -102, -68, -70, -62, -99, 76, 74, -66, 38, -66, -66, -17, 43, -34, 93, 71, 21, -74, -68, -44, -18, 55, 48, 40, 68, -54, 12, 94, 47, -17, 35, 44, 98, 78, 87, 86, -90, -25, 54, 67, -11, -42, -46, -54, -94, -80, -30, -64, 34, 27, -3, 77, 85, 39, -32, 70, -25, -12, -75, 23, 20, -16, 65, 74, 26, 64, -45, 41, 70, -58, 110, 48, 21, -51, -28, -29, -46, 25, 87, 98, -60, 69, 75, -48, -83, -75, 83, -60, 14, -84, -59, -43, -69, 20, 68, -68, 96, 95, 62, -47, 18, -20, 28, 79, -92, -36, -36, 1, 71, 7, 49, 35, 54, 82, 80, -50, -60, 40, 22, -19, 21, -81, -78, 30, 7, 111, -1, -76, 92, 44, 4, 38, 43, -61, 9, -49, 22, 43, 10, 95, 64, 74, -24, 4, -67, -73, -64, 72, -76, 12, -41, 10, -17, -86, 50, -12, -28, -57, 20, 52, 40, 55, 36, -49, -51, -5, 54, -13, -33, -82, 84, -5, -38, 44, -85, 21, -49, 79, -84, 59, 13, -64, -98, -63, -65, 68, -48, 77, 18, 73, 73, -92, 111, -78, -6, 73, -37, -64, -25, -19, -3, 23, 69, 59, 72, -59, -63, 64, 11, 71, -59, 4, -1, 57, -28, -8, -52, -56, -4, -2, 31, -10, -39, -60, 78, 0, -18, -43, 114, -12, -50, -63, 32, 54, 4, 39, 59, -109, -88, 34, 51, -41, 94, 10, -7, 46, -59, 40, 6, 14, 92, 42, -52, -1, -44, -13, -37, -3, -88, 91, 38, 55, 7, 28, 58, -51, -41, 79, -58, -51, 68, 15, 69, -8, -93, 105, 55, 12, -24, 94, 27, -56, 43, -95, 66, -18, 55, -21, 3, 68, 
  40, 5, -32, 64, 87, 80, 47, -13, 5, -50, 45, 76, 40, -14, 73, 51, -21, 68, -91, -97, -18, -10, 91, -59, -4, -41, 34, -98, 38, 4, 49, -48, 46, -43, 1, -43, 83, 60, 7, -67, -6, -18, -67, 60, 67, 32, 12, 44, 21, -40, -25, -57, -16, 16, 68, -79, -30, 25, 29, 8, -65, -51, -44, 76, 6, -60, -31, 57, 3, -25, -6, 106, -44, -37, -73, -45, 10, -69, -24, 39, 109, 7, 3, -23, -76, -13, -11, -3, 64, 9, -69, -101, -1, 76, -46, -77, -5, -39, 73, -80, 4, -50, -38, 54, 69, 74, -74, -86, -38, -63, 49, -65, -25, 62, 15, -52, 25, 6, 18, -69, -58, -32, -30, -11, -67, 102, 86, -26, 39, -88, 96, -108, 79, -59, 23, 18, 31, -25, -22, 57, -97, 37, 35, 58, -38, 25, 40, 10, -25, -72, -5, -101, -72, -5, -7, -22, 39, 38, -67, 54, -24, 85, -54, 90, -42, 25, -5, 50, -38, -107, -52, -57, -59, -12, -85, 40, 40, -2, -31, -82, 90, -59, -43, 12, 45, -45, -59, 6, 65, 110, 98, 49, 19, -54, 47, 26, -44, -89, -90, -58, -21, -54, -81, -57, -71, 76, 25, -25, -100, 41, 21, -58, 28, -9, 84, 34, -81, -73, 54, 41, 5, 74, -20, 30, 23, -17, 57, 25, -48, -32, 86, -8, 40, 54, 89, 69, 10, 49, 88, 55, 11, 43, 92, -12, -34, 92, -37, -17, -52, -5, -75, -72, -33, 24, -18, -5, -27, 85, 4, 42, 53, 17, -34, 62, 1, -42, -40, -30, -51, 116, 14, 78, 36, 70, -56, -64, -80, 82, -42, 41, -64, 28, -42, -101, -76, 66, 49, -34, -57, 59, -66, 63, 16, 92, -54, 20, 103, -18, 46, -8, 40, -8, 3, -103, 59, -22, 84, -79, -4, 30, 48, -34, -11, -70, 95, -74, -44, -83, 96, 31, 10, -54, 57, -67, -33, 92, -3, -76, -78, 32, 73, 77, -20, 4, -28, -22, -3, -33, 56, 41, 59, 45, 78, -85, 61, 50, -8, 62, -5, 97, 45, -57, -106, -56, -3, -105, -66, -95, 69, -44, 41, 89, 45, -14, 15, 31, 30, -61, 20, 96, -2, -45, 88, -10, 15, 38, -65, 16, 11, -89, -35, 45, 3, -41, 77, -59, 4, -44, -26, 17, -36, 56, 62, -57, -53, -12, -65, 61, -47, -87, 44, 75, -3, 79, 35, -28, 19, 92, 31, 44, 13, -89, 88, 113, 14, 69, 93, -86, -65, -58, -56, 76, 5, -76, -48, -4, -8, -83, 71, 13, -27, -88, 88, 21, -84, -3, -93, -38, 12, 6, -54, -47, -4, -1, 10, -70, 13, -82, 37, -94, -86, -103, -60, 24, -28, -54, -36, -24, 16, -80, -30, -24, 16, -65, 50, -30, -84, 18, -72, 29, -3, 14, -36, 28, -97, 23, 96, 46, 87, 30, -14, 77, -62, -48, -76, 65, 82, -83, -70, -70, -36, 36, -89, -73, 26, 85, 30, 103, -65, -12, 14, -43, -38, 81, 20, 47, -84, -53, -1, 22, -46, 90, -79, -66, -12, -48, -6, -33, -27, -5, 31, -2, 89, 54, 25, -54, 61, -43, -19, -89, 7, -31, 83, -88, 29, 70, 36, 54, -76, -95, -76, -23, -57, 44, 49, 41, -91, 99, -57, -63, 87, -5, 17, 6, -53, 44, -34, -79, 69, -76, 1, -13, 86, 85, 24, 86, 80, -112, 29, -117, 38, 51, 36, 84, -56, 29, 50, -35, 88, 47, 69, 24, -7, 2, 113, -97, -52, 51, -41, 41, 74, -92, -5, 79, -62, 70, -16, 98, -46, -61, 24, -84, 64, -38, -14, 19, -57, -69, -71, -56, -28, 58, 85, 10, 26, 75, 1, -35, -66, -29, -26, -8, -10, -44, 102, 56, -27, 90, -91, -45, 68, 84, 67, -61, -11, 92, -6, 16, -85, -35, -3, 80, 26, -96, -28, 92, -34, -25, -49, -44, -22, -56, -77, 40, 56, -43, 50, -30, 0, -75, 13, -94, -19, -87, 62, 98, -80, 16, 28, 74, 6, 12, -59, -99, 26, 97, 116, -33, -4, 53, -17, 37, 54, -37, 22, -65, -2, -61, 35, 80, -56, 79, 7, 56, 72, 83, -56, -19, 44, -62, 73, 58, 68, -87, -34, 72, -4, -70, 22, 9, -109, -29, 4, -29, -1, 73, -22, 78, -99, -62, 70, 0, 30, 6, 71, 32, -97, 22, -88, 45, -36, 66, 26, -18, 52, 51, 34, -81, 51, 93, -25, -58, 71, 62, 10, -19, 17, -63, 27, 47, -42, 91, 60, -9, 10, 49, -71, -16, 18, 64, -97, -29, 12, -90, -53, 48, 59, -23, -9, -10, 94, -5, 75, 22, 66, 42, 18, -45, -99, 57, 86, 20, -4, 35, -38, -73, 0, -21, 74, 5, -75, 68, 12, 84, -60, -7, -44, -38, -29, 69, -68, -106, 31, 44, -61, -44, 91, -25, -19, 35, -8, 70, 72, -8, 22, -20, 68, 36, 24, -8, 80, 20, -41, 77, 71, 66, -82, -96, -5, -18, -78, 37, -13, 93, -62, -55, 82, 9, 110, -74, -68, 70, -18, -49, -46, -92, 34, 5, -3, -50, -33, 14, 43, 64, -30, -36, -25, 72, 75, -57, -27, 30, 21, 93, -20, -57, -57, -7, 4, 102, 77, 30, -72, -16, 62, 103, 0, -27, -74, -75, 68, 76, -67, 28, 65, 17, 12, 54, 22, -33, 64, 83, 86, 19, 8, -4, -50, -61, 77, 20, 62, 25, 19, -6, 6, -10, 46, -41, 41, -31, 11, 28, 2, 26, -109, 89, 103, 41, 44, -1, 21, 27, 78, 76, 73, 22, -49, 0, 47, 58, 13, 12, -105, 83, 97, -87, -49, 32, -29, -114, -38, 18, 43, 35, -81, -46, -59, 2, -19, 63, -58, 76, 1, 30, 83, 26, 91, 63, 81, 101, 31, 61, 19, -21, -81, 24, -40, 38, 83, -95, 109, -39, 114, -6, -41, -6, -95, 33, -63, -23, -39, 53, 9, -52, 88, 63, 76, -4, 73, -43, -18, 49, 91, -43, 78, 72, 54, 58, -52, -75, 10, -12, -21, 48, 11, 64, -87, -42, -12, 4, -48, -94, 19, -30, -64, 84, -57, -42, 72, -50, -19, -5, 61, -25, 34, 44, -22, -49, -6, 31, 47, 100, 83, 93, -92, 7, 72, -45, -38, 81, -83, -74, 10, 79, 49, -14, 30, -86, 18, -78, 57, 96, 10, 80, -49, 41, 38, 37, 56, -29, -12, 58, 58, 37, -70, -93, 86, -47, 30, 76, -95, -47, 69, 70, -24, -56, 10, -43, 62, -85, 71, 25, 9, -87, -74, 54, 71, 73, -53, 86, -90, 6, 20, 33, 44, 7, 67, 11, -77, -38, 104, -35, -5, 66, 90, 3, -60, -2, -59, -58, 54, -94, 42, 36, 74, 59, -39, -75, 36, -30, -7, 66, 17, 14, 14, -2, -50, 7, 20, -95, -39, -36, 72, 48, 42, -31, 62, 94, 27, 99, 97, -22, -57, -17, -1, 7, 72, 6, -9, -49, 75, 7, 42, 88, 81, 15, -31, 15, 36, -77, 6, -53, -97, -20, 21, 87, -6, -29, 57, 59, -71, -14, 22, 9, 48, -79, 2, 82, 60, -68, -2, 5, 96, 92, 82, 82, -86, -54, 0, -11, -2, 24, -95, 30, 37, -44, -39, -80, 16, 21, 43, -30, 2, -53, -7, -47, 2, 71, -82, 111, -52, -22, -33, -27, -85, -22, -97, 67, -57, -77, -13, 92, 94, -40, 65, -87, 86, 48, 75, 6, -49, 13, -12, 91, -30, -29, 60, -86, 22, -100, 14, 19, -58, 45, -38, -14, -33, 60, 50, -6, 65, 9, 23, -43, -56, -72, -66, 55, 28, 31, -27, -62, 93, 65, 119, 24, 18, -28, 69, 83, -56, 64, 32, -1, -43, -70, -8, -27, -66, 96, 
  82, 89, 62, 53, -79, -66, 60, 30, 62, 64, 51, 49, 59, 67, -84, -57, 32, 83, 100, -59, -109, 83, -49, 3, 34, 72, 70, -118, 39, 25, 18, 7, 104, 44, -14, 105, -74, -77, -53, -21, -12, 17, -40, -93, -54, -9, 23, -46, 24, 71, 23, 85, 71, 67, 7, -76, 19, 37, -32, -46, 17, -37, -71, -33, 37, -115, -87, -76, 37, -67, -7, 101, -81, -60, 8, 42, 67, 19, -14, -30, 33, 80, 85, -57, 42, -7, -35, -25, 42, 96, 82, 53, -17, -42, -71, 35, -69, -63, 54, -23, -48, 24, -90, 3, -41, 7, -9, -1, -93, 0, 47, -20, 38, -79, 15, -69, 22, -74, 7, 24, 30, 50, -16, 101, -68, 23, -22, -7, -43, 55, -1, 41, -21, 67, 8, -9, -65, -6, -60, -61, 2, 9, -77, -52, -86, -76, 79, -18, -2, 3, 53, 84, 16, 4, -86, 9, 8, 46, -27, 66, -85, -33, 7, 44, -47, 75, -20, 86, 26, -24, 9, -43, 68, -9, -7, 87, -25, -57, -73, 18, 10, 6, -76, 65, 9, -1, -63, -30, -50, -46, 88, -30, -101, 25, -26, 6, 88, 66, -58, 1, 8, -18, -7, 46, 45, -97, 68, -63, 58, -86, 36, 71, 14, 39, 65, -70, 43, 79, -93, 85, -22, -56, -5, 48, 84, -33, -41, -62, 16, 30, 24, 23, -53, -32, -45, -35, -21, -78, 115, 83, 28, -32, 23, -67, -44, 121, -60, 74, 3, -54, -18, -77, -79, 29, -7, -38, -40, -50, 78, -33, 92, -49, 27, -42, -13, -80, -46, 50, 13, 44, -51, 58, 54, -52, -91, 84, 12, -16, -13, -67, 88, 80, 29, 31, -33, 7, 58, -61, -50, -88, 50, 74, 69, 24, -22, 68, -3, -61, 47, 42, -78, -29, 36, 10, 13, -87, -74, 93, -59, 35, -12, -36, 27, 71, 60, -4, 72, -51, 94, 41, 82, 38, 15, 7, 28, -90, 69, -55, 26, 76, 29, 7, 84, 27, -47, -77, -55, -81, 19, 65, 54, -76, -90, 98, -8, 68, 77, 27, 23, 119, -49, 67, 60, -19, -92, -31, -69, -47, 82, 70, 85, -55, 89, 72, 85, 39, -66, 80, -37, 73, -36, -84, 17, -45, -50, 15, 67, 33, 46, 23, -74, -4, -32, 63, 47, -41, 18, -89, 80, -27, 103, 63, -7, 8, 38, 12, 69, -39, -81, -61, -38, -101, 57, -72, -2, 36, -80, -31, -58, 56, -58, -42, 53, -46, -2, -14, 6, -107, 33, 11, 53, -77, 50, 85, -73, 41, -70, 80, -51, 5, -9, -40, -63, 73, 77, -3, -58, 55, 46, -49, 1, -92, -70, 48, -62, -73, -60, -69, -25, 64, -20, 87, -3, -14, 73, 116, 24, -69, 18, -52, 3, 6, 37, 63, -11, 62, -63, 3, -66, -86, -5, -91, 15, 34, -28, -96, -45, 120, -75, -1, -28, -9, -92, -80, -72, 10, -21, 22, -48, -19, -11, 13, 82, -14, -6, 64, 31, 21, 12, -86, 37, -40, -51, -14, 93, 47, -2, 8, 46, 21, 87, 65, 37, 67, -18, -37, -63, -51, -29, 51, 15, 47, 39, -26, 24, -41, 40, 16, 38, 50, -30, 11, -51, 103, -74, 51, 54, -109, -51, 72, 22, -56, 50, 15, 76, 72, -2, -43, 76, 22, -90, 114, -50, -32, 29, 14, 9, -79, -2, -51, -42, -71, 15, 71, -71, -45, 28, -64, -70, -53, -55, -80, 38, 37, 24, 28, 102, 11, 24, -13, 0, -58, -1, -13, -5, 97, -84, -38, -6, -2, 61, -4, 17, 64, 20, 75, 103, -11, 41, 91, 109, 67, -57, -64, 75, -27, 0, -88, -46, -62, 61, -92, 67, -86, 14, 61, 102, 60, -20, -41, 50, 11, 74, 56, 40, 9, -96, -52, 61, 41, 47, -94, -59, 47, 93, 25, -64, 64, 25, 86, 17, 27, 56, 30, 19, 96, -16, 28, -46, 38, -27, 42, 1, 23, 17, -13, 65, 61, 17, -8, 12, -33, -92, 48, -67, -44, 81, -80, 19, 77, -3, -14, -53, -55, -67, -56, 37, 5, -43, -15, 54, 56, -82, 104, 4, 98, -24, 23, 85, 39, -8, -6, -22, -91, 44, 92, 27, -13, -96, -14, -33, 29, -81, 28, 37, -94, -1, -16, -17, -34, 83, -45, 4, -97, 27, 13, 13, 46, 19, 23, 15, -84, 77, 57, -58, -36, -22, -62, 17, 15, -52, 11, -67, -57, -113, 60, -77, -2, -15, 26, 46, 58, 89, -12, 98, -72, 95, -64, 84, -65, 85, 85, -89, 75, 4, 71, 67, 31, -57, -23, -46, -30, -18, 95, -52, 49, 66, 2, -64, 9, 32, -31, 17, -64, 75, -7, 4, -47, 46, -4, -98, 5, -30, -71, -24, 24, -43, -36, -3, 103, 7, -21, 90, 58, -28, 7, 90, -4, -18, 66, 25, -16, -54, -44, -46, 23, 55, -99, 9, -14, 67, 73, -69, -17, 40, 28, 11, 56, -33, 47, 50, -102, 81, 8, 43, -58, -97, 1, -113, -110, 84, -53, 46, 54, -52, 65, 33, -46, 73, -72, 5, -65, -30, 48, 66, 11, 40, 66, -54, 74, 18, 19, -9, 73, 9, 80, -90, -9, -69, 101, 51, -5, 66, -94, -79, -109, -13, 0, -24, 54, -71, 96, 79, -7, -57, 106, -67, -72, -65, -50, 101, 37, 93, 64, 106, -70, 119, -88, -63, -24, -17, 77, 52, 81, 96, 91, 0, 56, -18, -60, 87, -57, 23, -37, -84, 3, 85, -58, -48, 92, 86, 87, 2, -35, -45, 83, -18, 9, -61, -43, -76, -42, -38, -45, 73, 54, 74, -28, -23, 37, 10, -100, 83, 107, 15, -25, 53, -54, 45, 78, 33, 30, -5, 27, 24, -32, 22, 72, -69, -35, -79, -40, -37, -46, -78, -52, 13, 59, -82, -62, -65, -83, -84, 40, -40, -54, 9, -53, 48, 90, -50, 36, -76, 59, 31, 17, 89, 14, -44, 29, -81, -43, -27, 19, -98, 24, 98, -20, 60, 3, 24, 43, -36, 64, 46, 26, 41, 79, -22, 38, -101, 8, -113, 9, -77, 65, -93, -58, -80, -78, 58, -35, -58, -49, -47, 67, 58, 20, 21, 71, 77, 26, -94, -63, 70, -38, -14, -82, 93, -27, -35, 10, -36, -28, 10, -97, -33, -33, -105, -4, -77, 96, 73, -51, 76, -58, 7, -12, 66, 29, -51, -15, 87, 52, 89, 76, -52, 27, 67, -26, -52, 59, 59, -44, -65, -61, -40, -13, 53, -72, 100, 12, 86, 92, -21, 62, 77, 103, -27, -50, 6, 3, -28, -76, -74, -25, -20, -91, 40, -64, -87, -42, 79, 92, -68, -47, -47, 10, -35, -92, 52, 31, -54, 15, -19, -41, -58, 6, -3, 29, -85, 24, 28, 65, -10, -62, -31, -75, -40, 79, 93, 26, -97, -88, -94, 44, 19, -5, -85, 83, -34, -4, -56, 57, -46, -6, 6, -80, -23, -3, -21, -3, 32, 77, -14, 31, 80, -85, 44, -97, 98, -64, -6, -78, -57, 50, -68, -39, 88, 32, 70, 82, 18, 80, -60, -87, 80, 62, 6, 79, -39, 30, -30, -77, 7, 15, 26, 15, -100, -96, 65, -25, 80, -69, -97, 45, -21, 64, 87, -104, 13, -58, 82, -81, 34, 42, 95, 5, 94, -13, -81, 46, -32, 54, -85, 19, 4, -86, -75, -88, -68, 45, -42, 88, 105, 23, 39, 59, 44, 77, 114, -33, -81, -18, -12, -6, -30, 30, -32, 37, -29, -30, -73, 74, 18, -17, 20, 99, 11, -24, -26, 32, -53, -60, 48, -36, 44, -24, -105, 19, 71, -88, -19, 8, -83, 29, 69, 77, 69, 74, 6, 5, 25, -12, 15, 5, -23, 64, 24, 2, 12, 121, -12, 43, 99, -78, 52, 40, -6, 0, 
  31, -48, 43, 7, -44, -104, -42, -43, 113, 85, -66, -69, 75, 48, -69, 22, -48, 82, 81, -87, -52, -4, -29, 20, 27, -15, 105, -64, 61, -127, 39, -2, -19, -73, -64, 118, -35, -26, 76, -36, -7, 69, -51, -29, -65, 80, -92, -11, 81, -24, 110, -70, 48, -54, -83, 2, 104, -56, -101, 49, -89, -55, -78, 25, 37, -64, 29, -20, -6, -48, 83, 56, 9, 4, -82, 90, 73, 19, -36, -62, -38, -16, 63, 33, -78, 21, -50, -98, 89, -3, 40, -87, 66, 49, 6, 27, -34, -110, 76, -76, -64, -54, -7, 4, 9, -11, -70, -35, -57, 34, 78, 109, -15, -82, -49, 4, -103, -81, -45, -74, 52, -87, -54, -61, -40, 13, -69, -9, -90, 104, 58, -71, -104, -3, 47, -77, -37, -12, -2, -94, -83, -24, 28, -29, 6, 70, 17, -3, 52, 113, -32, -20, -104, 14, -37, 26, 50, -84, -86, 39, 71, -10, 34, 68, 47, -86, -25, -53, 36, 51, 6, -25, -6, 41, 76, 88, -80, 56, 38, 96, 92, -78, -92, -60, -84, 56, 69, 86, -31, -70, 4, 47, -72, 94, -72, -65, -1, 19, -64, 79, -36, 73, -4, 16, -40, 36, -27, -71, 81, 61, -38, 86, -40, 13, -90, -40, 83, -18, -52, -8, -8, 5, 43, 85, 13, -40, -33, -78, -31, 20, -43, -81, -70, 33, 0, -55, 101, 77, -35, -45, -93, -20, 76, -81, -4, -50, -75, -1, 43, -38, -81, -46, -70, 84, -92, -20, -63, -60, -23, -78, 57, 0, 12, -51, 98, 54, -94, -71, -17, -94, -28, 75, 63, -82, 109, -40, 19, -71, 73, 86, -93, -64, -23, 46, 17, 88, -9, -33, 29, -18, -34, -76, -49, 65, 12, 63, -66, 28, 41, 35, -64, -76, -89, -68, -37, 52, 56, -34, -95, -81, -23, -43, -46, 28, 68, -50, -15, 37, 89, -60, 21, 19, 103, 42, -22, -32, -88, 40, 43, -88, -46, -77, -17, -15, -77, -27, -43, -100, 67, -63, -71, -64, 59, 32, -50, -100, 101, -99, -61, 74, -15, 112, 81, 71, -62, -18, 77, -2, 34, -99, 64, 64, -44, 86, 42, -45, 75, 19, -44, 59, 20, -9, -53, 103, 31, 4, 65, -38, -41, 29, -38, 54, 79, -54, -7, -69, 55, -8, -71, -67, -21, -28, -71, 51, 13, 85, 109, 105, -54, 110, 65, 66, -81, 51, 56, 8, -59, -73, -56, -29, -64, -38, -6, 27, 21, -27, 17, 33, 89, -95, -81, 96, -15, 6, -82, -40, 57, -89, 81, 111, -73, 25, 53, -14, 60, 4, 52, -4, 96, -46, 87, 62, -62, 85, 22, 96, -38, 16, 82, 41, -55, 80, -6, -68, -76, 2, 36, -39, -63, -94, 96, -36, -39, 13, 52, 32, -68, 61, 9, 55, -43, -14, 20, -2, -57, 106, 61, -37, -58, -36, -30, 22, -1, -23, -3, 43, 4, 6, 41, -59, 68, -94, -5, 101, -32, 14, -34, 67, 2, 3, 34, 83, -33, -97, 51, -92, 8, 13, 13, 78, 16, -71, -68, -8, 73, 2, -6, -30, -12, -83, -77, 77, -49, -18, 15, -9, 31, -49, 66, 87, 99, -32, 53, 31, 87, -13, 71, -72, 24, 107, -76, -28, -45, 61, 94, -60, -80, -25, 74, 55, 49, -98, 43, -4, 38, -73, 12, 18, -36, -41, -70, -12, 97, -7, -104, -21, -61, 73, -11, -61, -32, 7, 6, 48, -5, 55, 77, 75, -20, 53, 36, -63, 104, 82, -33, -74, 7, 31, -5, 64, 28, 32, 61, -49, -32, 1, 51, -50, -59, 27, -32, 63, 24, -64, 97, -36, 52, 11, -76, -20, 90, 79, 91, 89, 93, 58, 87, 57, 41, 2, 106, 90, -36, 1, -49, -29, 67, -65, 77, 77, -6, 48, -81, -68, -62, 36, 42, -99, -34, 16, -26, -76, -63, 75, -27, 5, -54, 76, 62, 109, 93, 44, 56, -9, -37, 18, 42, -77, 53, 17, -12, -102, -23, 101, 5, 72, -25, -92, -51, 94, -72, 87, 24, -26, -30, -97, -93, -108, -49, -48, -72, -3, 47, 37, 89, -68, -55, -71, 102, -60, 90, -8, 27, 48, -19, -54, -54, -74, 65, -3, 25, 53, -4, 10, 97, -25, -73, 81, -89, -29, 56, -70, -27, 40, -72, -26, -76, -27, 29, 29, 0, 73, -6, 42, 62, 91, 2, -25, -28, 41, 16, -22, -5, 49, 62, -47, -57, -84, -69, 20, 18, 68, -21, -9, 58, 30, 19, -73, -55, -15, -54, -91, -1, -29, -24, 63, -1, -94, 67, 80, -71, -66, -26, -30, -69, 101, -60, -96, 100, -88, -43, -22, -27, 79, 16, 109, -65, 59, 20, 2, -19, 25, 70, -83, -10, 55, 28, -17, -31, -81, 68, 59, -42, 33, 84, -9, 63, -46, 18, -33, 80, 92, -3, -75, 29, 13, -55, -101, 55, -55, 8, -81, 63, 39, -40, -100, -62, -20, 63, 47, -97, -74, -3, 38, 52, 25, -10, 101, 68, -107, 59, 34, 73, 81, 67, -9, 10, -68, 0, -88, 20, -43, 40, 51, 12, 55, -82, 24, 54, -99, 70, 31, -53, -36, -34, 34, -97, 8, -72, 96, -50, 63, -75, -40, 57, -79, -32, 96, -38, -12, -66, -44, 50, 94, 85, 18, -42, 41, 67, -46, 16, -38, 47, -52, 108, -53, -1, 49, 7, -98, -40, -104, 34, -9, 53, -19, -24, -96, -70, -49, -83, -26, 102, -34, 32, -65, 69, -3, 13, 85, 112, 57, 39, -27, 45, -25, 12, 44, -2, 3, -1, -36, 33, 66, 64, -55, -24, 114, -80, 40, 23, 82, -40, -24, 64, -10, -42, 56, -49, 84, -53, -52, 96, -14, -47, 44, -16, -34, -34, -45, -3, -73, 64, -18, 68, 56, 13, -40, -82, 83, 35, 97, 47, -28, 58, 68, -29, -44, 1, 16, -70, -94, 69, 100, -48, -25, 16, 93, 103, 67, -10, 91, 85, -9, -2, -66, 65, 57, 88, 76, -39, 23, 49, -5, 5, 91, 106, 11, -16, -98, 65, -50, -60, 91, -42, 14, -9, 41, 12, 43, 32, -83, -69, -88, 86, -1, 70, -1, 6, -27, -31, 78, 75, -77, 91, -3, -73, -77, 48, -102, -106, -85, 63, 61, 69, -55, 43, 58, -70, 6, 13, -63, 38, -65, -51, -67, 27, 52, 89, -20, 104, 57, -74, 66, -8, -32, 30, 83, 68, 25, -2, 87, -81, 48, -84, 7, -42, -43, -72, 19, -8, -12, 52, 45, -53, 73, -88, 9, 59, -104, -8, 56, -60, 40, -83, -26, -53, 18, 33, 16, -7, 13, 52, 38, 84, -99, 103, 56, 63, -43, -74, -34, -6, 85, 18, 30, -89, 14, 64, 55, -45, -56, 40, 15, 81, 16, -37, 38, 14, -9, 6, -29, 74, -84, -65, -44, 51, -59, 50, -63, 22, -11, -57, 40, -22, -32, -11, -35, 28, -26, 39, -53, 49, -45, 33, -58, 7, -96, 89, 45, 9, -27, -62, -4, 8, -71, 49, -6, 51, -51, 83, 29, -5, -53, 38, -77, -12, -13, 37, 6, 12, 60, -66, -70, 89, -77, -28, -34, 26, 59, -47, -105, 104, 44, 109, -57, -81, 41, 91, 33, 75, -85, -61, 86, 8, 36, 95, 6, 38, -22, -25, -82, -54, 40, -36, -45, 59, 85, -80, -35, -41, 15, 108, -32, 47, -7, -17, 31, -73, 20, -30, -61, -13, 56, -72, -74, -72, 15, -39, -15, 53, 93, 83, -14, -47, 12, -94, -72, -22, -81, 52, 63, -7, -65, -42, 46, -50, 22, 42, -47, -21, -36, 36, -70, 87, 39, -44, -9, 53, 80, -99, -21, 62, 63, 79, 49, 73, 56, 17, 42, -9, 83, 64, -77, 22, 75, 77, -52, -30, 89, 
  93, 20, 63, 101, 71, -47, -86, -47, -30, -9, 15, 26, -49, 65, 55, 67, -41, 73, 76, 57, 104, -57, -97, 57, 1, 50, -4, -32, -8, -47, -84, -76, 107, 35, 40, -2, -7, -14, -43, -28, -83, -36, 76, -79, 1, 0, 51, -40, 47, 79, 31, 85, -69, 8, -84, -79, 49, -46, 6, -47, 60, -104, -39, 103, 27, 63, 62, -35, -5, -2, -46, -84, -13, -67, -67, 31, 100, 38, 90, 73, 28, 58, 84, 38, 38, 17, -76, 39, 16, 58, 97, -28, 79, 84, -38, 100, -52, 50, -11, 25, 75, 48, -34, -67, 17, 51, 61, 54, 25, 64, 17, 52, -76, 28, 50, -55, 96, 60, 34, -42, -18, 62, 63, 57, 51, -88, -41, 87, 37, 21, -5, 17, 34, 12, 35, 32, 29, -58, 23, -68, 92, -26, 35, 23, -78, -70, 70, 84, 91, 108, -27, -12, -26, 81, -96, -63, -6, -52, -7, -110, 68, 39, -100, 64, -75, 92, -19, -45, 59, -15, -4, -36, 59, -17, -92, 32, 51, 7, -45, 8, 9, -72, -66, -26, 67, -21, 114, -21, -108, -70, 16, 16, 53, 3, 55, 60, -51, -54, -95, 30, -83, 5, -81, 75, -44, 26, -56, -8, 2, -79, 78, -91, 83, -74, -45, -58, 20, -51, -63, -68, 44, 20, 93, 18, 104, 56, -68, -69, -97, 51, -14, 71, -12, -46, 73, -17, -50, 89, 24, 78, -12, -25, -81, -14, -20, -46, -90, -11, 89, 4, -12, 87, -110, 112, -12, -48, -67, -26, 19, 55, -38, 77, 12, 77, 59, -63, -97, -9, 26, -7, -89, -70, -78, -69, 44, 68, 16, 5, -34, -114, 46, 49, 76, -73, 84, -63, -65, -10, 85, 34, 11, -74, 16, -17, -43, -13, 46, 40, -25, -2, 57, -73, -58, 13, -61, -8, 32, -39, 46, 62, -14, -48, -85, 77, 77, 63, 43, 65, 79, 88, 68, -63, -46, -59, -32, 34, -45, -36, -13, -75, -1, 51, -71, -47, -89, 73, 77, -80, 81, 50, 22, -26, 28, 81, -77, -80, 93, -86, 89, 38, -3, 14, 82, 56, -59, 50, 6, 84, 39, -53, 69, -74, 84, -69, 65, -50, 5, -36, -24, 44, 106, 17, -37, 83, -43, 90, -26, -65, -38, 7, -39, 103, 76, -25, -6, 67, -51, 34, -62, -94, 34, 48, -53, -70, 36, -47, 47, -29, 58, 62, -82, 20, 90, -18, 3, 1, -44, -67, 3, -70, 83, -41, -2, -10, -67, -84, -79, 64, -33, -76, 70, -84, 52, 27, -27, 74, 32, 72, 85, -89, 63, 101, 83, 29, 37, 98, -101, 44, -7, -21, -33, 52, 32, 64, 86, -58, 23, 77, -57, -60, 59, -60, 21, -3, -3, 59, -26, 74, 12, 15, 95, -87, 14, -55, -44, 97, -43, 23, 65, 23, 85, -67, 115, 82, 2, 23, -97, 46, 56, -16, -19, 6, 89, 36, -65, 25, 3, 28, -34, 31, -52, -55, 9, 74, 67, 12, 46, -15, 44, 36, -36, 8, 1, -73, -24, 101, -87, -63, 67, -89, -19, 16, 14, -40, 88, -92, 72, -26, -18, 34, -31, -32, 3, -2, -3, 81, 127, 45, -20, -70, -27, -28, 22, -70, 2, -13, 60, 39, -91, 7, 25, -42, -96, -71, 53, 48, 43, -31, -19, -69, 9, 88, 0, -31, 27, -17, -59, 94, -73, 19, -45, -97, 38, -15, -37, 42, -53, -69, 95, 100, -34, 3, -104, 7, -67, 100, -13, -98, 18, -95, -81, 56, -20, -82, 61, 48, -33, -34, -64, -9, 17, -82, 48, 81, 7, 67, -16, 20, -26, -61, -30, 96, 14, 45, -7, 27, 33, -74, 45, -77, 30, 77, 39, -56, 42, -18, 2, -82, 36, -47, -9, -28, 10, 77, 23, -35, 40, -60, -26, 98, -85, 48, -82, 51, -67, -6, 82, -65, -84, 1, -6, -55, -34, 45, 99, -74, 41, 84, 3, -14, 66, -5, 80, -63, 36, 17, -2, 61, -67, -55, 21, 79, -58, -51, 117, 47, -2, -5, -20, -16, -46, -79, 15, 69, 6, 52, -57, 78, -26, 83, -50, 48, 3, 41, 0, -51, -69, -27, -6, 99, 4, -31, 12, 84, 37, 87, 89, -68, -8, 27, 16, 42, 58, 19, 94, 49, 51, 42, -86, -15, -80, 38, -62, -67, -5, 10, 57, 42, 54, 19, -69, -17, -51, -65, -64, 25, -18, 100, 81, -12, 97, -70, 54, -37, 31, -23, -82, -62, 0, -22, -76, -88, -81, 15, -17, 53, 17, -77, 35, 44, 48, 33, 63, 2, -48, -12, 30, 11, -4, 77, 16, 0, 44, -82, 20, 30, 1, 49, 45, -35, -2, -8, -82, -27, 80, -25, -55, -86, -81, -56, -6, 0, -15, 65, 66, 77, 76, -11, 56, -88, -75, 88, 51, 15, -72, -88, 29, -3, 36, 3, 52, 14, 30, -53, 4, -60, -58, 23, -37, -23, -67, -80, 18, -29, 44, 59, -1, 20, 39, 79, -67, -25, -65, -23, 21, 66, 8, 89, 21, -13, 0, 34, 11, -101, 32, 48, 13, -24, -1, 72, -16, 58, -61, -89, -42, -24, 40, -29, -67, -39, -50, -28, 69, 0, -94, -39, 75, 76, 13, -22, -20, -58, 94, -4, 21, -49, -51, 21, -22, -57, 68, 32, -67, 8, 69, -84, 45, 54, 9, 113, -40, -1, 23, -97, -18, 100, 17, -65, -17, -1, 55, -101, 45, -53, -73, 72, 31, 85, 9, -24, -10, -39, 15, 3, -53, -70, -81, -8, 102, 26, -58, -59, -81, -78, -62, -73, -43, 3, -85, 56, 5, -87, 20, 101, -35, 42, -16, 40, 15, 37, -55, 24, 2, 33, 1, -14, 68, -57, 28, -66, 87, 18, 55, 21, -42, -91, -58, 26, 41, 64, 67, -61, -22, 59, -92, -39, 75, 73, 61, -57, 7, 33, -74, 27, -56, 58, 61, 30, 82, -50, -44, -16, -14, -54, -86, 30, -23, -5, -51, -84, 6, -29, -14, 115, 19, -97, 55, -75, 27, 22, 96, -23, -94, 8, -78, 81, 49, 78, 81, 55, 124, 49, -45, 91, 57, 12, -76, -102, 28, -83, 27, 12, -67, 15, 18, -61, 41, 17, 19, -88, 12, -93, -57, -29, -73, -85, -68, -58, 50, 91, 63, 54, 47, 8, -7, -71, 80, 60, 58, -75, -18, -52, 71, -81, 96, -90, 49, -5, -31, 8, -73, -4, 40, 53, 68, 65, -41, 61, 29, 100, -1, 31, 27, -92, 52, 75, 79, 35, 13, -47, 57, 57, -59, -29, -32, -25, -69, 48, -92, 76, -21, -97, -38, 94, 26, 47, 40, -75, 19, -88, -25, -49, -50, -55, 11, 84, 14, -67, 58, 54, -64, 30, -54, -81, -61, 41, 34, -78, -69, -103, 0, 74, -17, 52, -21, -29, 94, 45, -95, 60, 48, -87, -93, 108, 25, -72, -104, 18, 83, -64, 14, -86, 69, -82, 3, 24, 43, -62, 54, -17, -63, 50, 47, -1, 66, -21, 20, 80, 68, 13, 56, 14, 47, 77, 57, -7, 71, -6, 20, -13, 48, -19, -24, -80, 42, 46, 61, 43, 51, 80, 51, -54, -26, -7, -57, 78, 29, -100, -55, -46, -28, 40, -12, -67, 73, -26, 45, -51, -61, 26, 53, -73, -38, 26, -34, -16, -1, 25, 82, 14, 12, -63, -63, -106, 26, -2, 84, -71, -29, 52, -89, 86, -93, 40, 75, 62, 41, 13, -39, -34, 13, -30, -5, 0, -48, 88, 12, -40, -52, -9, 35, 47, -30, -51, 58, 18, -4, -41, 9, -55, -20, -23, -36, -41, 31, -23, -71, -42, 33, 27, -69, -60, -11, 88, 67, 35, -8, -59, -78, -76, 20, -64, 6, -44, -30, 83, 61, 97, -78, -38, 10, -13, -16, 42, 81, 24, 58, 111, 17, 51, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 8,1280 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0007171682664193213, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[1280] = { -1577, -138, -394, -964, 214, -525, -906, -153, -734, -112, -1121, 67, -776, 251, 181, 14, 577, -346, -156, -512, -2311, -1158, 607, 853, -2618, -1082, -445, -1135, -177, -695, -497, -367, -2725, -2074, -525, -728, -961, -806, 150, -322, -1062, 102, -271, 264, -130, -1323, -651, -974, -831, 122, -1005, 149, -1232, -503, -2598, -462, -1048, -1400, -1354, -536, 60, -2157, -814, 1462, -493, -1922, -456, -6, -1109, -203, -448, -432, -1624, -127, -880, -200, -618, -1583, 1922, 101, -1152, 113, -1580, -1160, -836, 501, -1618, 478, -1845, -535, 198, -1324, -995, -1042, -1484, -1278, -399, 253, -752, -216, -91, -1841, -592, -1331, -14, -153, -1466, -1372, -1111, -1538, -1271, -1639, -411, 901, -906, -1450, -1164, -705, -143, -1006, 159, -466, -804, 116, -1873, -688, 456, -1138, -1300, 43, -416, 509, 119, -568, 58, -858, -1599, -1068, -1527, 35, -142, -1343, 162, 1363, -1571, -129, -313, -593, -1665, 147, -537, -435, -1078, -1130, -897, -1671, -989, -969, 67, -589, -1734, -513, -77, -348, -497, -999, 129, -274, -1637, -1221, 2, -718, -2045, -123, -602, -1600, -230, -3738, 398, -1499, -231, -255, -227, 557, -1159, -323, -1223, -180, -672, -1010, -950, -2304, -149, 684, 122, -1273, -1106, -1038, -1670, -354, -1692, -194, -305, -602, -1375, 1094, -1270, -173, -658, -667, -44, -546, -2198, -544, -1096, -744, -172, -454, -244, -254, -1651, 195, -196, -820, -714, -190, -2348, -919, -1304, -342, 248, -39, 342, -634, -174, -1640, -1737, -1391, -398, 141, -827, -1375, -946, -341, -1534, -1652, -1208, -733, -868, -1062, -891, -585, -1310, -1013, -172, 318, 230, -10, -1461, 1003, -1258, -1869, -944, -353, -1097, 513, -691, -304, -2150, -989, -108, -528, -933, 164, -22, -942, 385, -919, -1851, -918, -651, 171, -1482, -1708, -1164, -1399, -753, 158, 253, -441, -677, -1404, -691, 562, -397, -2451, -1896, -384, -277, 31, 306, -1043, -1531, -994, -1108, 537, 215, 35, -179, -572, 809, -2529, -1858, 425, -414, -339, -357, -1391, -18, -627, -1765, -1035, -383, -134, -1102, -1564, 507, -625, -380, -554, -1537, 626, -608, -817, 337, -41, -880, -194, -524, -1167, 341, -730, -1480, -2417, 1669, -1182, -1143, -122, 228, -1341, -932, -1954, 449, -696, -467, -583, -1814, -551, 467, -872, 192, -813, -1444, -488, -562, -568, -1404, -432, -1721, -212, -553, -2503, -486, -1144, 773, -325, -578, 99, -1367, -612, -244, -308, -915, -933, 291, -1440, -818, -1640, -262, -1460, 309, 76, -1655, -93, -788, 1232, -2872, 853, 812, -1664, -231, -294, -870, 535, -73, -434, 504, -779, -1088, -73, -1242, -592, 137, -1245, -1190, 278, -368, -579, -966, 674, -483, -1124, -3228, -11, 18, -157, -173, -141, -1707, -345, -642, 1035, -217, 490, -215, -1067, -599, 12, 55, -481, -800, 58, 1141, 299, -1006, -644, -1543, 1896, -634, 312, -189, 27, -278, -593, -194, -538, -1003, -378, -1841, -883, -802, 66, 55, -923, -271, -1119, -913, -1059, -831, 355, 919, 73, 374, 411, 390, -746, -948, -2510, 983, -336, -63, 87, -566, 571, -82, -1028, -551, -1340, -897, -396, -373, -1063, -204, -1059, -1087, -1035, -20, -294, -1060, -822, -492, -82, -1086, -123, -633, -578, 332, -473, -611, 74, -852, 87, 127, -558, -13, -103, -821, -934, -1697, -809, -1269, -37, -1535, 575, -870, -1392, -1655, -940, -755, -694, 330, 169, 450, 515, -316, 18, -1488, -1499, -1729, 84, 230, -383, 263, -1579, 298, -22, -1561, 273, -1147, -255, 712, 115, 424, -627, -944, -767, 316, -552, 330, -147, -840, -960, -40, -1672, -801, -1127, -1514, -581, -321, -448, 505, -1028, -858, 135, -139, -1250, -386, -720, -453, -651, -923, -142, 109, 81, -1393, -693, -2839, -580, -368, -1183, -2341, -612, -265, -414, 516, -697, -300, -2469, 321, -1248, -662, -1648, 753, -412, -1963, 927, -1164, -295, -2365, -1670, 81, -2044, -584, -441, -1271, -1576, -703, -3634, -511, -409, -1113, -486, -1703, -375, -1339, -1140, -1474, -867, -1309, -2525, -1111, -1177, -737, 73, -977, -732, 613, -758, 688, -614, -102, 1103, -698, -258, -692, 1187, -1461, 474, -304, -1085, -627, -749, -1090, 126, -833, -1270, -995, -1163, -679, -1231, 87, -362, -951, -1019, -1856, -1064, -78, -1468, 439, 8, -607, -138, -610, -953, -122, -1210, -744, 12, 197, 493, -1626, -1314, -1753, -1318, -1318, -610, -1001, 44, -2033, -1981, -1391, -796, -394, -1146, 931, -224, 11, -1398, -1554, -1384, 399, -61, 222, -743, -400, -1231, -730, -251, -1469, -2227, -522, -2555, -128, -363, -1050, -2290, -446, -2224, -1867, -411, 728, -251, -1068, 911, -1698, -491, -894, -542, -837, 678, 1306, -1, -1892, -1525, 466, -844, -1947, -1566, -170, -1403, -72, 1315, 2421, -93, -1575, -683, 120, 866, -912, -1207, -2263, -817, -155, 2308, -296, 251, -2060, -278, -1192, 17, 431, -1258, -1132, 93, -1306, -562, -640, 202, -1059, 480, 619, 137, -569, -904, 129, -1249, 358, -1616, -289, -323, -1512, 497, 145, -468, -601, 66, -89, 304, -1064, -476, -1121, -755, -640, -564, -245, -372, -2011, 74, 537, 660, 13, -464, -912, 56, 1225, -846, -1432, -2712, -483, -1157, -1730, -2033, -1162, -890, -90, -325, -1481, -2206, -1857, -29, -1138, -246, 227, -500, -918, -724, 124, -244, -462, -530, -1184, -1198, 612, -1570, -691, -122, -414, -590, 651, -1163, -917, -282, -963, -1783, -466, -1566, -1685, -2028, -1020, 257, -298, -985, -974, -410, -2085, -576, -576, -1771, -1117, -598, 733, -695, -1116, -1828, -1056, -822, -274, -1808, -136, -218, -668, -1061, -1426, -12, -1026, -127, 124, -1045, -253, 191, -1230, 228, -398, -743, 148, -1397, -275, 429, -4, -728, 290, 177, -483, -1275, -603, 206, -889, -1795, -220, -1167, -934, 346, -925, -515, -685, 7, -309, -1629, -575, 58, -409, 238, -123, -441, -787, -422, -1627, -112, -3238, -696, -1944, -1533, -1628, -2525, -3277, -594, 646, 129, -565, -1400, -1447, -330, 215, -1691, -1018, -1532, -1099, 731, -672, -2242, 999, -2352, 634, -1995, -340, -7, -1554, -1144, -649, -2274, -357, 1286, -225, -472, -2884, 171, 717, 133, -1156, -1348, 41, -703, -519, -1673, -264, -1121, 144, 468, 31, 431, -1110, -859, -1959, -298, -1078, -616, -738, -620, 730, -2469, 761, -1583, -1349, -1366, 185, -1086, -791, 463, -1492, -691, -425, -1776, 281, 781, 441, -667, 303, 70, -2010, -177, -1005, -852, -1870, -865, -1246, -584, 289, 50, -993, -687, -601, -1039, -736, -710, 507, -1010, 211, 262, -967, -640, -578, -1063, 457, -1878, 1110, -1001, -1424, -1825, -1178, -743, -481, -1129, -1282, -340, -754, -957, -260, 281, -2167, -333, -296, -316, 248, -1726, -701, -722, 11, -1223, -912, 254, -1027, -962, -332, -1048, -222, -1797, -1325, -625, -2085, -1091, -2020, -1361, -1358, -1527, -806, 471, -1741, -158, -1229, 1591, -287, -2508, -1129, -697, 118, -1049, -2137, -360, -1558, -320, 246, -429, -772, -812, -112, 41, -2736, -447, -997, -448, -360, -615, -659, -2331, -12, -830, 193, -402, 246, -2687, -287, -2187, -325, -447, -1323, 202, -721, -248, -843, -433, -584, 379, -2778, -1397, -1649, 19, -680, 1547, -672, -990, 1511, -2447, -1647, -818, -1322, -1661, -1601, -2038, -262, -1507, -1768, -286, -770, -1016, 201, 326, -1201, -411, 90, -749, -489, -698, -986, -1293, -1858, 438, 150, -877, 40, -746, -3741, 40, -1679, 570, 911, -428, -967, 278, 792, 1390, 124, -2903, -404, 804, -927, -1110, 850, -2315, -2345, -790, -1378, -718, 1015, -346, -1195, -1409, -61, 579, -1000, -2686, 432, -327, -2024, -1066, -1055, -264, 454, -656, -536, -655, 165, -44, -41, -1294, -815, -832, -712, -451, -853, -911, -1993, -1484, -1349, -1933, -164, -293, -989, -781, -2348, -667, -3137, -890, 1225, 142, 237, -1257, -2462, -1967, -1366, -1803, -937, 914, -612, -1294, -628, -965, -517, -916, 229, -364, 74, -749, 217, -455, -212, -2091, 753, -753, 145, 143, -861, 939, 1116, -478, -148, -1138, -430, -795, 341, -1455, -1604, -1399, -821, -543, -1112, -1310, -26, -1148, -1798, -738, -377, -626, -111, -1461, 1271, -135, 311, -820, -116, -832, -949, -657, -924, 351, -1405, -2070, -769, -1258, 345, 3, };
const TfArray<1, int> tensor_dimension8 = { 1, { 1280 } };
const TfArray<1280, float> quant8_scale = { 1280, { 0.0001960598019650206, 0.00014244925114326179, 0.00018231527064926922, 0.00018989788077306002, 0.00016598658112343401, 0.00024153690901584923, 0.00022654734493698925, 0.00018225614621769637, 0.00022857947624288499, 0.00022453194833360612, 0.00018197394092567265, 0.00019232591148465872, 0.0002211397368228063, 0.00023425517429132015, 0.00016240672266576439, 0.00013051812129560858, 0.00020476900681387633, 0.00024455002858303487, 0.0001894039596663788, 0.00014249667583499104, 0.00018570928659755737, 0.00027302047237753868, 0.00024927433696575463, 0.000134904301376082, 0.00015070356312207878, 0.00026409616111777723, 0.00022058564354665577, 0.00016514760500285774, 0.000170923289260827, 0.00025542185176163912, 0.00019402672478463501, 0.00017433738685213029, 0.00015989346138667315, 0.00019853269623126835, 0.00018444684974383563, 0.00025833080871962011, 0.00020635619875974953, 0.00019502366194501519, 0.00017353320436086506, 0.00020935210341122001, 0.00019564857939258218, 0.00017569703049957752, 0.00021786961588077247, 0.00021170114632695913, 0.00018535896379034966, 0.00019316538237035275, 0.00017743384523782879, 0.00021646139794029295, 0.00020876050984952599, 0.0001616908994037658, 0.00020477849466260523, 0.0001570825552335009, 0.00017310185648966581, 0.00020838364434894174, 0.00013114731700625271, 0.00018614711007103324, 0.00025608070427551866, 0.00017406551341991872, 0.00019097424228675663, 0.00015272515884134918, 0.00018773649935610592, 0.00017616550030652434, 0.00017120593111030757, 0.00020341496565379202, 0.00013698291149921715, 0.00014956346421968192, 0.00022600228840019554, 0.00021084265608806163, 0.0001903474039863795, 0.00025818057474680245, 0.00014702994667459279, 0.00023676922137383372, 0.00019069373956881464, 0.00019947596592828631, 0.00017484686395619065, 0.00019946956308558583, 0.00017838319763541222, 0.00023442175006493926, 0.00019955995958298445, 0.0001600395335117355, 0.00020302634220570326, 0.00012014139065286145, 0.00012054286344209686, 0.00018861611897591501, 0.0001366505166515708, 0.00022774429817218333, 0.00016068013792391866, 0.000135369788040407, 0.00024236057652160525, 0.00019875026191584766, 0.00017443070828448981, 0.0002552627120167017, 0.00021957604622002691, 0.00023109017638489604, 0.00013407426013145596, 0.00017089566972572356, 0.00020638045680243522, 0.00018018072296399623, 0.00025014951825141907, 0.00018591024854686111, 0.00025282456772401929, 0.00017772905994206667, 0.00014510856999550015, 0.000165867357281968, 0.00017654293333180249, 0.00018523057224228978, 0.0001719863066682592, 0.00018793820345308632, 0.0001920688955578953, 0.00017780707275960594, 0.00017718148592393845, 0.00018705465481616557, 0.00018208273104391992, 0.00022301006538327783, 0.00015775757492519915, 0.00020357083121780306, 0.00016991887241601944, 0.00023883677204139531, 0.00017100448894780129, 0.00013795512495562434, 0.00018555918359197676, 0.00018951742094941437, 0.0001855083683039993, 0.00018335574714001268, 0.00016563582175876945, 0.00020368584955576807, 0.00011752996942959726, 0.00018724046822171658, 0.00024511283845640719, 0.00018869998166337609, 0.00015511852689087391, 0.00020763468637596816, 0.00016867324302438647, 0.0002342859806958586, 0.00020877037604805082, 0.00022632343461737037, 0.00017313961870968342, 0.00020459397637750953, 0.00014005026605445892, 0.00015446223551407456, 0.00020959584799129516, 0.00018003906006924808, 0.0001729621144477278, 0.00014648331853095442, 0.00014355350867845118, 0.00023828573466744274, 0.00013724174641538411, 0.00012948774383403361, 0.00015801930567249656, 0.00015438036643899977, 0.00014419622311834246, 0.0001966356358025223, 0.00016411948308814317, 0.00016006859368644655, 0.00019140999938827008, 0.000192584193428047, 0.00016858871094882488, 0.00023644021712243557, 0.0002054690703516826, 0.00017812741862144321, 0.00020836015755776316, 0.00016599935770500451, 0.00020215666154399514, 0.00021471537183970213, 0.00016946847608778626, 0.00021928868955001235, 0.00012596992019098252, 0.00020114899962209165, 0.00014572226791642606, 0.00017663132166489959, 0.00030834099743515253, 0.0002178593713324517, 0.00017931443289853632, 0.00017577926337253302, 0.00017195974942296743, 0.00021824160648975521, 0.00020071526523679495, 0.00017327177920378745, 0.00020532184862531722, 0.00014301984629128128, 0.0001599588431417942, 0.0002295312297064811, 0.0001754729455569759, 0.00015205582894850522, 0.00014924102288205177, 0.00027696343022398651, 0.00016795718693174422, 0.00025293757789768279, 0.00024116742133628577, 0.00016137149941641837, 0.00015382030687760562, 0.00018800664111040533, 0.00019279513799119741, 0.00021454770467244089, 0.00019665385480038822, 0.00015642248035874218, 0.00018660872592590749, 0.00017719523748382926, 0.00017528930038679391, 0.00016408790543209761, 0.00024223812215495855, 0.00022448298113886267, 0.0001760777086019516, 0.00018348117009736598, 0.00012150937254773453, 0.00013277736434247345, 0.00021210394334048033, 0.00020112789934501052, 0.00024389753525611013, 0.00016739344573579729, 0.00017111787747126073, 0.00020836346084252, 0.00016396591672673821, 0.00024723511887714267, 0.00014101914712227881, 0.00018312000611331314, 0.00019328694907017052, 0.00017031619790941477, 0.00016629458696115762, 0.00022307697508949786, 0.00018504307081457227, 0.00018739174993243068, 0.00022522064682561904, 0.00020637427223846316, 0.00019225422875024378, 0.00019445653015282005, 0.00016756578406784683, 0.00016084940580185503, 0.00018460772116668522, 0.00020444270921871066, 0.00018072014790959656, 0.00023704199702478945, 0.00024854441289789975, 0.00021417146490421146, 0.00022736888786312193, 0.00016535649774596095, 0.00018402912246529013, 0.00016055963351391256, 0.00019667600281536579, 0.00018471141811460257, 0.00024001424026209861, 0.0001407596719218418, 0.00020263080659788102, 0.00017353233124595135, 0.00014179087884258479, 0.00019464046636130661, 0.00019798129505943507, 0.00018380250548943877, 0.00024488475173711777, 0.00017439521616324782, 0.00016181128739845008, 0.00019297172548249364, 0.00023010311997495592, 0.00029143912252038717, 0.00018026496400125325, 0.00021069200010970235, 0.00016527462867088616, 0.00016275928646791726, 0.00016024358046706766, 0.00016661436529830098, 0.00017974319052882493, 0.00018698335043154657, 0.00016502886137459427, 0.00017710143583826721, 0.00020034884801134467, 0.00019494714797474444, 0.00016959260392468423, 0.00015638596960343421, 0.00016620774113107473, 0.00014312659914139658, 0.00016276753740385175, 0.00016268785111606121, 0.00019879337924066931, 0.00016516644973307848, 0.00020930718164891005, 0.00018904758326243609, 0.00014668310177512467, 0.00018177357560489327, 0.00016600695380475372, 0.00020762829808518291, 0.00017804988601710647, 0.000160651994519867, 0.00013288237096276134, 0.00017414129979442805, 0.00022975352476350963, 0.00017829881107900292, 0.00016032581334002316, 0.00020586662867572159, 0.00016906022210605443, 0.00017454747285228223, 0.00016219740791711956, 0.00015465791511815041, 0.00026435000472702086, 0.00018519183504395187, 0.00025694214855320752, 0.00019617490761447698, 0.00017439268412999809, 0.00018843566067516804, 0.00018654577434062958, 0.00022450802498497069, 0.00015690669533796608, 0.00018101450405083597, 0.00019595648336689919, 0.00023450559820048511, 0.00015506801719311625, 0.00021002141875214875, 0.00016533830785192549, 0.00021738033683504909, 0.00018643020302988589, 0.00018391560297459364, 0.00017280869360547513, 0.00013904672232456505, 0.0001395211584167555, 0.00019582855748012662, 0.00023661526211071759, 0.00016793901158962399, 0.0002067488239845261, 0.00020423311798367649, 0.00021012462093494833, 0.00020301935728639364, 0.00018305818957742304, 0.0001539432123536244, 0.00020811540889553726, 0.00017454181215725839, 0.00019375958072487265, 0.00012842692376580089, 0.00018588616512715816, 0.00024868329637683928, 0.00017276084690820426, 0.00013970957661513239, 0.00023440526274498552, 0.00016253520152531564, 0.0002216641150880605, 0.00025078296312130988, 0.00016310840146616101, 0.00020130479242652655, 0.0001548063155496493, 0.00016954826423898339, 0.00025196376373060048, 0.00019009083916898817, 0.00017464725533500314, 0.00020316377049311996, 0.00014477652439381927, 0.0001417567691532895, 0.00016641586262267083, 0.00021660819766111672, 0.00016193828196264803, 0.00016259276890195906, 0.00025376296252943575, 0.00018737743084784597, 0.00015528600488323718, 0.00013834767742082477, 0.00015437167894560844, 0.00017551015480421484, 0.00017940769612323493, 0.00013929448323324323, 0.00015978922601789236, 0.00018587619706522673, 0.00014542363351210952, 0.00028932266286574304, 0.00016398662410210818, 0.00019267684547230601, 0.00018138909945264459, 0.00015836839156690985, 0.00023559444525744766, 0.0001707596966298297, 0.00024456399842165411, 0.00020868904539383948, 0.0001665467134444043, 0.00013462183414958417, 0.000241128756897524, 0.00013307735207490623, 0.00017964740982279181, 0.0001972849277080968, 0.0001534273469587788, 0.00017044566629920155, 0.00020196550758555532, 0.00020261855388525873, 0.00016306043835356832, 0.00021545702475123107, 0.00015016671386547387, 0.00015317276120185852, 0.0001318760187132284, 0.00020809956185985357, 0.00021094673138577491, 0.00017397890042047948, 0.00019314771634526551, 0.00016318910638801754, 0.00021225475938990712, 0.00013910842244513333, 0.00017817792831920087, 0.00016456130833830684, 0.00014564885350409895, 0.00017346389358863235, 0.00016291168867610395, 0.00013174106425140053, 0.00014643647591583431, 0.00014813468442298472, 0.00015898098354227841, 0.00020496902288869023, 0.00022958277259021997, 0.00023683972540311515, 0.00018649142293725163, 0.00017310523253399879, 0.00023607714683748782, 0.00023146686726249754, 0.00017228671640623361, 0.00015359578537754714, 0.00018866098253056407, 0.00020384597883094102, 0.00015779044770170003, 0.0002340920182177797, 0.00022529064153786749, 0.00015893785166554153, 0.00019011041149497032, 0.00013499200576916337, 0.00016322101873811334, 0.00025802859454415739, 0.00014674305566586554, 0.00020238375873304904, 0.0001615452638361603, 0.00017338525503873825, 0.00019334765966050327, 0.00022038457973394543, 0.00027929185307584703, 0.00019985069229733199, 0.00019042426720261574, 0.00014758510224055499, 0.00013707739708479494, 0.00018190842820331454, 0.00020636066619772464, 0.00023952020274009556, 0.00014356356405187398, 0.00019141414668411016, 0.00012434212840162218, 0.000219031295273453, 0.00020650486112572253, 0.0001606559962965548, 0.0002131281653419137, 0.00020688191580120474, 0.00018753510084934533, 0.0001885091041913256, 0.00014970262418501079, 0.00018531698151491582, 0.00027967462665401399, 0.0001450360578019172, 0.00016833907284308225, 0.00015929956862237304, 0.00025470799300819635, 0.00015335434000007808, 0.00021297631610650569, 0.00018336980429012328, 0.00017687864601612091, 0.0002109190245391801, 0.00017414867761544883, 0.00024623592616990209, 0.00018679178901948035, 0.00017471432511229068, 0.00020051150931976736, 0.00018265240942128003, 0.00023696510470472276, 0.00018159719184041023, 0.0002284588263137266, 0.00018949138757307082, 0.00021934094547759742, 0.00013792452227789909, 0.00016046264499891549, 0.00021292174642439932, 0.00014001419185660779, 0.00023238483117893338, 0.00018861866556107998, 0.00022674794308841228, 0.00016770430374890566, 0.00013833328557666391, 0.00022779994469601661, 0.00017626688349992037, 0.00021854804072063416, 0.00014655714039690793, 0.00016486766980960965, 0.00015682772209402174, 0.00018380698747932911, 0.00023043673718348145, 0.00021885844762437046, 0.00015561882173642516, 0.00014453103358391672, 0.00018184477812610567, 0.00024499383289366961, 0.00016268756007775664, 0.00024011160712689161, 0.00015562374028377235, 0.00018915047985501587, 0.00020088626479264349, 0.0002029469033004716, 0.00021682275109924376, 0.00018177040328737348, 0.00018019079288933426, 0.00014662035391665995, 0.00024869121261872351, 0.00020004226826131344, 0.0001693864178378135, 0.00014841914526186883, 0.00025341706350445747, 0.00017675571143627167, 0.00023865138064138591, 0.00028553034644573927, 0.00017837656196206808, 0.00014942103007342666, 0.00021132006077095866, 0.0001829703978728503, 0.00018741039093583822, 0.00015681263175792992, 0.00022224120039027184, 0.00018307360005564988, 0.00018939450092148036, 0.00017444057448301464, 0.00017888637376017869, 0.00016525089449714869, 0.0001984436676139012, 0.00015696304035373032, 0.00018631240527611226, 0.00013140168448444456, 0.00017442289390601218, 0.00019741679716389626, 0.00018984140479005873, 0.0001897542824735865, 0.00014899852976668626, 0.00023312134726438671, 0.00017701974138617516, 0.00018563424237072468, 0.00025380685110576451, 0.00021249173732940108, 0.00024312168534379452, 0.00016286625759676099, 0.0001644131843931973, 0.00016455890727229416, 0.00019760018039960414, 0.00020923011470586061, 0.00017550200573168695, 0.00021468248451128602, 0.00014485117571894079, 0.00015170729602687061, 0.00014367168478202075, 0.00012697726197075099, 0.00015594884462188929, 0.00015338412777055055, 0.00025156160700134933, 0.00018824407015927136, 0.00021645525703206658, 0.00016160930681508034, 0.00025471829576417804, 0.00018008689221460372, 0.0001478401682106778, 0.00019268457253929228, 0.00022879596508573741, 0.00022012580302543938, 0.00015792633348610252, 0.00024218339240178466, 0.00022494701261166483, 0.00020015235350001603, 0.00026409860583953559, 0.00018925261974800378, 0.00018551009998191148, 0.00021378809469752014, 0.00016506652173120528, 0.00016538883210159838, 0.00018191154231317341, 0.00015792068734299392, 0.0001596748479641974, 0.00022604691912420094, 0.00019665157014969736, 0.000160794603289105, 0.00018043311138171703, 0.0001966345589607954, 0.00015948520740494132, 0.00014557472604792565, 0.00018289686704520136, 0.00025944586377590895, 0.00017413517343811691, 0.00015448642079718411, 0.00019295711535960436, 0.00017907463188748807, 0.00015092054673004895, 0.00019310083007439971, 0.00023013498866930604, 0.00017037168436218053, 0.00017490019672550261, 0.00013123008830007166, 0.00021775053755845875, 0.00020462818793021142, 0.00016186150605790317, 0.00018217050819657743, 0.00017503359413240105, 0.00023019727086648345, 0.00020484058768488467, 0.00023437041090801358, 0.00024468047195114195, 0.00017909392772708088, 0.00017368419503327459, 0.00015900003199931234, 0.00014698856102768332, 0.0002146486658602953, 0.0001436540624126792, 0.00015025962784420699, 0.00020186133042443544, 0.00018172469572164118, 0.00023343776410911232, 0.00020025359117425978, 0.00016128337301779538, 0.00015476452244911343, 0.00018596735026221722, 0.00021709699649363756, 0.00017587146430741996, 0.0002360792423132807, 0.00016992790915537626, 0.00022643749252893031, 0.00019217828230466694, 0.00019305858586449176, 0.00014416511112358421, 0.00016236580268014222, 0.00017470320744905621, 0.00016434358258266002, 0.00020353123545646667, 0.00015822604473214597, 0.00016867746307980269, 0.00022441735200118273, 0.00015618535690009594, 0.00020914239576086402, 0.00019580037042032927, 0.00019691373745445162, 0.00016360674635507166, 0.00017663740436546504, 0.00018822925630956888, 0.00016494876763317734, 0.00017447926802560687, 0.00026273555704392493, 0.00019787967903539538, 0.00020646516350097954, 0.00028281993581913412, 0.00016652049089316279, 0.00021530842059291899, 0.00018075769185088575, 0.00015740924573037773, 0.00019505417731124908, 0.00016995966143440455, 0.00019130414875689894, 0.00016139356011990458, 0.0002035545912804082, 0.00022626048303209245, 0.00018467554764356464, 0.00017192718223668635, 0.00018511638336349279, 0.00019382241589482874, 0.00025290058692917228, 0.00022306840401142836, 0.0001381956972181797, 0.00025727695901878178, 0.00016465317457914352, 0.00018653715960681438, 0.00017278677842114121, 0.00013343295722734183, 0.00024735613260418177, 0.00012478066491894424, 0.00019007526861969382, 0.0001794228155631572, 0.00019362021703273058, 0.00014520397235173732, 0.00020857217896264046, 0.00020727879018522799, 0.00021012921934016049, 0.00014894860214553773, 0.00024243834195658565, 0.00016997047350741923, 0.00021999733871780336, 0.0001490474387537688, 0.00021069399372208863, 0.00013485261297319084, 0.00019500697089824826, 0.00023764028446748853, 0.00014742060739081353, 0.00022863910999149084, 0.00015141954645514488, 0.00018711939628701657, 0.00014603225281462073, 0.00016690422489773482, 0.00021225986711215228, 0.00022711273049935699, 0.00016285985475406051, 0.0001733614772092551, 0.00013569607108365744, 0.00020128312462475151, 0.00018910341896116734, 0.00015244779933709651, 0.00014610039943363518, 0.00019017391605302691, 0.00020147663599345833, 0.00019982639059890062, 0.0002476370136719197, 0.00027540780138224363, 0.00020558739197440445, 0.00016333573148585856, 0.00018279174400959164, 0.00013991295418236405, 0.00019983855600003153, 0.00021408364409580827, 0.0001531975285615772, 0.00016697327373549342, 0.00018182869825977832, 0.00020669282821472734, 0.00017195302643813193, 0.00013628823217004538, 0.0002025283029070124, 0.0001478637132095173, 0.00021581759210675955, 0.00020062155090272427, 0.00020260267774574459, 0.00015149259706959128, 0.0001728401257423684, 0.00018220757192466408, 0.00014296479639597237, 0.00020505336578935385, 0.00018688185082282871, 0.0002261231275042519, 0.00016109361604321748, 0.0001498645287938416, 0.00022690116020385176, 0.00024567911168560386, 0.0001846306404331699, 0.00020284259517211467, 0.00022629318118561059, 0.00014982129505369812, 0.00012723404506687075, 0.00015021587023511529, 0.00013850831601303071, 0.0001751824893290177, 0.00018448896298650652, 0.00020150441559962928, 0.00014409466530196369, 0.00017425556143280119, 0.00017300472245551646, 0.00018093231483362615, 0.00016149356088135391, 0.00014249395462684333, 0.00017091739573515952, 0.00018210420967079699, 0.00022494292352348566, 0.00017993392248172313, 0.00015108927618712187, 0.0002226951764896512, 0.00012156022421550006, 0.00018357235239818692, 0.00017377757467329502, 0.00015551209799014032, 0.0001706805924186483, 0.00012661863001994789, 0.00023787420650478452, 0.00014255156565923244, 0.00016137586499098688, 0.00016844105266500264, 0.00019459679606370628, 0.00024363602278754115, 0.00018662697402760386, 0.00019173638429492712, 0.00019875682482961565, 0.00016058929031714797, 0.00023860136570874602, 0.00020043877884745598, 0.00019830239762086421, 0.00018453276425134391, 0.00018503930186852813, 0.0001473685260862112, 0.00017357118485961109, 0.00014157388068269938, 0.00021811491751577705, 0.0001358467125101015, 0.00030460307607427239, 0.0002406600397080183, 0.00020402888185344636, 0.00016445385699626058, 0.00020401955407578498, 0.00015578702732454985, 0.0001510633883299306, 0.00013764834147877991, 0.00022831674141343683, 0.00017868794384412467, 0.00019424404308665544, 0.00019855544087477028, 0.00014510974870063365, 0.00022681913105770946, 0.00017730680701788515, 0.00024081631272565573, 0.00019306661852169782, 0.00016190321184694767, 0.00020680773013737053, 0.00015785322466399521, 0.00014249916421249509, 0.00017405889229848981, 0.00019306095782667398, 0.00017086618754547089, 0.00015702705422881991, 0.0002551445213612169, 0.00025102513609454036, 0.00024234887678176165, 0.0001857006864156574, 0.00015408828039653599, 0.00020885451522190124, 0.00014604287571273744, 0.00017530798504594713, 0.00015316766803152859, 0.00019158862414769828, 0.00015991137479431927, 0.00026620016433298588, 0.0001932671875692904, 0.00018291770538780838, 0.00018249543791171163, 0.00026038539363071322, 0.00015595275908708572, 0.00021685131650883704, 0.00017219579603988677, 0.00020892402972094715, 0.00020148066687397659, 0.00018739764345809817, 0.00016990360745694488, 0.00025035926955752075, 0.00020602434233296663, 0.00018638839537743479, 0.00017173425294458866, 0.00015816827362868935, 0.00023056007921695709, 0.00024059430870693177, 0.00016412594413850456, 0.00017862451204564422, 0.00019424823403824121, 0.00015785575669724494, 0.0001586156286066398, 0.00026927186991088092, 0.00015272171003744006, 0.00018046697368845344, 0.000179878348717466, 0.0001444485824322328, 0.00014205389015842229, 0.00017597214900888503, 0.00013979303184896708, 0.00026286148931831121, 0.00016318456619046628, 0.00023435648472514004, 0.00015843934670556337, 0.00017375571769662201, 0.0001265188620891422, 0.00016185091226361692, 0.00019470778352115303, 0.00013356406998354942, 0.00020267549552954733, 0.00014976850070524961, 0.00021758633374702185, 0.00019050385162699968, 0.00016744999447837472, 0.00016613464686088264, 0.00014817903866060078, 0.00013799118460156024, 0.00016444888024125248, 0.00016275701636914164, 0.00021853462385479361, 0.00021621161431539804, 0.00016849425446707755, 0.00017537632083985955, 0.00019790073565673083, 0.00022453998099081218, 0.00019730725034605712, 0.00019208410230930895, 0.00014855795598123223, 0.00019170287123415619, 0.00020321307238191366, 0.0002197579451603815, 0.00018952203390654176, 0.0002029483875958249, 0.00021743688557762653, 0.00011488367454148829, 0.00015882331354077905, 0.00018648615514393896, 0.00012447558401618153, 0.00014505766739603132, 0.0001503520761616528, 0.00016558819334022701, 0.00015734191401861608, 0.0001631994527997449, 0.00012904399773105979, 0.00015537648869212717, 0.00016508233966305852, 0.00026542862178757787, 0.00019117000920232385, 0.00022588873980566859, 0.00022129203716758639, 0.00020651539671234787, 0.00013297231635078788, 0.00013857240264769644, 0.00019032225827686489, 0.00020661093003582209, 0.00014239219308365136, 0.00020733437850140035, 0.00017820857465267181, 0.0002135296817868948, 0.00013653369387611747, 0.0002202115865657106, 0.00022693577921018004, 0.00020188720372971147, 0.00013944719103164971, 0.00019429156964179128, 0.00015640826313756406, 0.00017661401943769306, 0.0001624599244678393, 0.00017241718887817115, 0.00015698831703048199, 0.00016978271014522761, 0.00019557718769647181, 0.0001571030734339729, 0.00018642772920429707, 0.00023667933419346809, 0.00017813111480791122, 0.00017846842820290476, 0.00023133320792112499, 0.00014731042028870434, 0.00014801035285927355, 0.00022291032655630261, 0.00016876596782822162, 0.00013579735241364688, 0.00023123245046008378, 0.00018151567201130092, 0.00016008291277103126, 0.00018448363698553294, 0.00020771726849488914, 0.0002085694286506623, 0.0002264448266942054, 0.00020407055853866041, 0.00020763879001606256, 0.00019147882994730026, 0.00020401309302542359, 0.0001677438267506659, 0.00020673140534199774, 0.00019089745183009654, 0.00019649621390271932, 0.00018214913143310696, 0.00014347668911796063, 0.00015915311814751476, 0.00017533205391373485, 0.00018330053717363626, 0.00019411333778407425, 0.00015497911954298615, 0.00019586889538913965, 0.00017071723414119333, 0.00010112774180015549, 0.00024514368851669133, 0.0001539477234473452, 0.00016324775060638785, 0.00016182659601327032, 0.00017793259758036584, 0.00013278414553496987, 0.00020678593136835843, 0.00016625043645035475, 0.00012843907461501658, 0.0001743921748129651, 0.00013696651149075478, 0.00018969777738675475, 0.00018994811398442835, 0.00016419653547927737, 0.00014938830281607807, 0.00010939317871816456, 0.00017107748135458678, 0.00023479586525354534, 0.00019722795695997775, 0.00015979650197550654, 0.00021547709184233099, 0.00020313079585321248, 0.00014037410437595099, 0.00018196126620750874, 0.00013459997717291117, 0.00019313931989017874, 0.00017947191372513771, 0.00021119997836649418, 0.00021618390746880323, 0.000182981530088, 0.00015639656339772046, 0.00016866848454810679, 0.00017312195268459618, 0.00016535804024897516, 0.00015203915245365351, 0.00021189382823649794, 0.00020590612257365137, 0.00020425162801984698, 0.0001359427988063544, 0.00016855861758813262, 0.0002523634466342628, 0.00017225361079908907, 0.00018384284339845181, 0.00017871748423203826, 0.00021629217371810228, 0.00025683481362648308, 0.00021520117297768593, 0.00017205732001457363, 0.00017217124695889652, 0.0002105032472172752, 0.00019527222320903093, 0.00015298153448384255, 0.00014433651813305914, 0.0001684094313532114, 0.00018599472241476178, 0.00019660673569887877, 0.00022517300385516137, 0.00017306022346019745, 0.00018388046009931713, 0.00024809301248751581, 0.00025779436691664159, 0.00014663570618722588, 0.00022142856323625892, 0.00018668176198843867, 0.00016991452139336616, 0.00014892476610839367, 0.00015471337246708572, 0.00020891377062071115, 0.00028088301769457757, 0.00015226399409584701, 0.00014926071162335575, 0.00011403320968383923, 0.00022896510199643672, 0.00018758595979306847, 0.0001821678742999211, 0.00020472051983233541, 0.00017074863717425615, 0.00012459643767215312, 0.00016022262570913881, 0.00016149604925885797, 0.00023191340733319521, 0.0001968630967894569, 0.00022630870807915926, 0.0002020358806475997, 0.00020105073053855449, 0.00016605335986241698, 0.00014274934073910117, 0.0001957646309165284, 0.0001671209029154852, 0.00023849586432334036, 0.00022152553719934076, 0.00019992432498838753, 0.00013067421969026327, 0.00020263761689420789, 0.00021760193340014666, 0.00022080597409512848, 0.0001735187106532976, 0.00019940861966460943, 0.00020688878430519253, 0.00024891822249628603, 0.00019027783127967268, 0.00021374977950472385, 0.00019376991258468479, 0.00013109071005601436, 0.00013516822946257889, 0.00013609508459921926, 0.00018231275316793472, 0.00013340296573005617, 0.00020350012346170843, 0.0002342073421459645, 0.00020318540919106454, 0.00019084051018580794, 0.00015765799616929144, 0.00015531326062045991, 0.00026912428438663483, 0.00021674008166883141, 0.00016277861141134053, 0.00019267947936896235, 0.00019029504619538784, 0.00013377419963944703, 0.00018961186287924647, 0.00018857310351449996, 0.00016092754958663136, 0.00016279406554531306, 0.00015686129336245358, 0.00019624248670879751, 0.00014418104547075927, 0.00014067230222281069, 0.00020923902047798038, 0.00019865721696987748, 0.00018675693718250841, 0.00018975257989950478, 0.00025155447656288743, 0.00015725007688160986, 0.00017176245455630124, 0.00013702479191124439, 0.00014807285333517939, 0.00017170897626783699, 0.00020727647643070668, 0.00019300275016576052, 0.00019660995167214423, 0.00015836521924939007, 0.00013996545749250799, 0.00017038073565345258, 0.00017607641348149627, 0.00020643034076783806, 0.00015785917639732361, 0.00017664552433416247, 0.00017179240239784122, 0.00014368427218869328, 0.00012670563592109829, 0.00021464590099640191, 0.00026671902742236853, 0.00019720509590115398, 0.00016002581105567515, 0.00023735279683023691, 0.00023149812477640808, 0.00015522270405199379, 0.00018753114272840321, 0.00014658570580650121, 0.00018359672685619444, 0.00014782276412006468, 0.00015712624008301646, 0.00014496814401354641, 0.00016498987679369748, 0.00017011628369800746, 0.00021415039373096079, 0.00017587681941222399, 0.00014434204786084592, 0.000138983188662678, 0.0001531772140879184, 0.00019473362772259861, 0.00015015866665635258, 0.00022776502009946853, 0.00016896062879823148, 0.00018546442152000964, 0.00019251862249802798, 0.00015287178393919021, 0.00020047863654326648, 0.00020925796707160771, 0.0002046668523689732, 0.00019119383068755269, 0.00021993368864059448, 0.00018783658742904663, 0.00018048558558803052, 0.0002429214509902522, 0.00014549562183674425, 0.00020680765737779438, 0.00023045540729071945, 0.00019252693164162338, 0.00018084519251715392, 0.00016840266471263021, 0.00018127509974874556, 0.00019395686103962362, 0.00015472774975933135, 0.00014890119200572371, 0.00015026800974737853, 0.00021154392743483186, 0.00021076350822113454, 0.00017197192937601358, 0.0001283076562685892, 0.0002104720042552799, 0.00013183760165702552, 0.00017498290981166065, 0.0002074546500807628, 0.0001709462667349726, 0.00020558017422445118, 0.00015851763600949198, 0.00022767100017517805, 0.00020634449901990592, 0.00018402277783025056, 0.00015659179189242423, 0.00019017088925465941, 0.00016162551764864475, 0.00018761378305498511, 0.00017359280900564045, 0.00014411778829526156, 0.0001666882453719154, 0.0002029816823778674, 0.00019807531498372555, 0.00019565154798328876, 0.00019247658201493323, 0.00013606323045678437, 0.000150583844515495, 0.00021273604943417013, 0.00017622532323002815, 0.00026716673164628446, 0.00015735739725641906, 0.0001835808070609346, 0.00016097321349661797, 0.0002395608025835827, 0.00018422010180074722, 0.00019179511582478881, 0.00019113413873128593, 0.00019645520660560578, 0.00023742893245071173, 0.00016562452947255224, 0.00012660096399486065, 0.00019459577742964029, 0.00020403349481057376, 0.00023296663130167872, 0.00014830427244305611, 0.00021658203331753612, 0.00015230401186272502, 0.00015586704830639064, 0.00020932854386046529, 0.00019649034948088229, 0.00022484695364255458, 0.0002117351396009326, 0.00015809699834790081, 0.00013804167974740267, 0.00017736255540512502, 0.00018266712140757591, 0.00016519198834430426, 0.00024762158864177763, 0.00029265310149639845, 0.0001686097530182451, 0.00013978239439893514, 0.00019531308498699218, 0.00021426625608000904, 0.00017662098980508745, 0.00023515790235251188, 0.00014941697008907795, 0.00018450684729032218, 0.00020017279894091189, 0.00018963773618452251, 0.00018094322877004743, 0.00018899005954153836, 0.00020272479741834104, 0.00017297659360338002, 0.00018865866877604276, 0.00014513055793941021, 0.00017775897867977619, 0.00016054858861025423, 0.00014815641043242067, 0.00022521098435390741, 0.00017149043560493737, 0.0001659796544117853, 0.00022266308951657265, 0.00018235418247058988, 0.00017569209740031511, 0.00017073462367989123, 0.00017932176706381142, 0.00020436930935829878, 0.0001738869323162362, 0.00019661933765746653, 0.00020372934523038566, 0.00026512012118473649, 0.00015863456064835191, 0.00021026619651820511, 0.00022995332255959511, 0.00016782360034994781, 0.00012788451567757875, 0.00019894090655725449, 0.00018921455193776637, 0.00022387655917555094, 0.00021189534163568169, 0.00018135660502593964, 0.00021678493067156523, 0.00016225800209213048, 0.00022494293807540089, 0.00015543683548457921, 0.00021249834389891475, 0.0001627036981517449, 0.00020649335056077689, 0.00017646247579250485, 0.00024237895559053868, 0.0001666691096033901, 0.00018865252786781639, 0.00015889844507910311, 0.00022877413721289486, 0.0001893247535917908, 0.0001713199308142066, 0.00017930136527866125, 0.00016422563930973411, 0.00018302143143955618, 0.00018431789067108184, 0.00019066296226810664, 0.00019590144802350551, 0.00015665068349335343, 0.00013855074939783663, 0.00019190323655493557, 0.00021887353796046227, 0.00018274740432389081, 0.00017165079771075398, 0.00017443859542254359, 0.00027109740767627954, 0.00017721545009408146, 0.00017834280151873827, 0.00017246467177756131, } };
const TfArray<1280, int> quant8_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[1280*1*1*16] = { 
  /* [0][0][][] */ -41,-69,-6,43,33,-127,39,73,88,-57,-23,43,39,-5,-119,24, 
  /* [1][0][][] */ 88,98,9,6,68,115,-27,-84,-127,61,107,-73,58,5,43,83, 
  /* [2][0][][] */ -66,28,-6,-2,-41,27,46,-53,-39,69,30,27,11,117,-9,-127, 
  /* [3][0][][] */ 53,-20,127,-87,-41,-39,81,30,-51,38,0,-78,78,27,-3,7, 
  /* [4][0][][] */ 86,98,109,-16,-45,11,65,38,-37,16,127,83,90,11,51,-73, 
  /* [5][0][][] */ -50,-22,1,1,-35,-12,127,-70,-32,87,-29,15,46,-40,85,5, 
  /* [6][0][][] */ 42,-4,-19,-21,38,67,25,-127,-74,-68,-10,-26,-15,11,26,-43, 
  /* [7][0][][] */ 8,24,-15,-15,32,38,28,-104,-9,41,-104,78,-65,-76,-13,-127, 
  /* [8][0][][] */ -32,-69,58,82,85,49,-30,-127,-100,56,22,-67,7,-66,15,-34, 
  /* [9][0][][] */ 50,-20,25,-75,54,18,-30,11,-8,-30,-47,1,3,-127,-114,26, 
  /* [10][0][][] */ -12,53,-83,32,27,38,116,6,58,5,32,12,95,-102,79,-127, 
  /* [11][0][][] */ 100,-8,17,-16,-37,31,-7,-53,127,53,46,-39,-6,54,-17,-89, 
  /* [12][0][][] */ -53,74,32,-127,-24,14,-36,-68,-34,0,-37,-4,-9,33,19,-38, 
  /* [13][0][][] */ 8,-29,7,9,20,52,-40,-50,7,-22,41,-6,127,16,4,-97, 
  /* [14][0][][] */ -11,127,11,-91,-102,36,-81,5,80,64,-19,69,19,68,49,-28, 
  /* [15][0][][] */ -15,-25,56,29,3,-57,-81,-106,127,-47,81,-23,-98,109,-50,96, 
  /* [16][0][][] */ -2,-37,127,-45,25,42,-1,35,-96,56,102,10,15,-31,40,-44, 
  /* [17][0][][] */ -70,-19,-30,-24,6,-46,127,24,75,-17,39,16,7,47,64,-109, 
  /* [18][0][][] */ 74,27,-50,127,51,-14,-63,17,-34,-18,-15,-19,83,105,78,2, 
  /* [19][0][][] */ 87,-61,32,98,61,21,31,-24,14,27,103,-40,118,-5,-81,-127, 
  /* [20][0][][] */ -119,-127,-8,-5,-22,23,70,-23,41,39,105,-12,68,28,43,47, 
  /* [21][0][][] */ -1,-48,-10,2,36,16,127,43,-9,-19,-7,-4,-42,-45,22,29, 
  /* [22][0][][] */ 65,8,127,-6,-18,28,-64,-15,-38,-120,-77,11,-34,29,-46,22, 
  /* [23][0][][] */ 23,44,65,-117,127,69,7,47,-74,-22,26,89,70,65,-81,-121, 
  /* [24][0][][] */ -111,54,48,-28,-11,40,-127,-42,-89,109,20,-14,44,93,12,61, 
  /* [25][0][][] */ 20,18,-127,-14,26,67,-37,26,9,35,29,-42,-24,-13,-18,-25, 
  /* [26][0][][] */ -9,-24,27,-3,29,35,-75,27,-127,-18,86,-5,44,-30,-37,21, 
  /* [27][0][][] */ -4,-10,-12,-127,17,84,37,-2,-13,72,-4,-39,2,115,-52,-43, 
  /* [28][0][][] */ -26,-65,87,-127,33,-63,82,31,124,-6,22,-47,-101,52,-66,19, 
  /* [29][0][][] */ -30,-18,-25,41,3,13,79,-11,25,5,39,-30,127,25,21,-34, 
  /* [30][0][][] */ 115,43,50,67,-127,-30,25,8,49,-65,33,-32,-29,39,30,-6, 
  /* [31][0][][] */ 73,-24,47,58,19,127,7,84,13,-66,50,64,-27,-54,-28,40, 
  /* [32][0][][] */ 50,22,-45,49,-99,-15,-18,1,-18,82,127,-5,49,-19,-118,-87, 
  /* [33][0][][] */ -69,-55,-96,-9,-9,-40,59,-3,95,127,45,70,-58,42,17,23, 
  /* [34][0][][] */ 11,22,0,-20,-13,46,-88,-53,2,-42,86,0,80,127,87,-16, 
  /* [35][0][][] */ -127,28,54,-32,-1,-66,-22,-2,8,69,-53,-60,-46,-64,35,15, 
  /* [36][0][][] */ -109,44,-14,11,62,-15,-127,24,15,-14,-27,1,-23,26,-38,-13, 
  /* [37][0][][] */ -103,23,-28,74,55,-7,-6,-18,127,-44,-18,43,-2,-13,-14,56, 
  /* [38][0][][] */ 27,-127,78,6,-41,2,-32,50,3,44,60,-46,118,10,7,-11, 
  /* [39][0][][] */ -41,31,43,-35,-19,-32,7,-105,19,-127,-39,3,88,8,-18,24, 
  /* [40][0][][] */ 1,-28,-89,-127,-73,-34,30,52,-66,33,101,36,81,-64,57,-15, 
  /* [41][0][][] */ 20,-55,-15,127,-31,39,98,34,-6,31,5,74,-68,-17,7,-103, 
  /* [42][0][][] */ 3,28,88,-39,-14,18,26,19,54,-50,-16,-35,-123,2,-15,-127, 
  /* [43][0][][] */ 127,32,79,-60,-12,5,-46,-91,37,-7,-53,37,5,20,60,2, 
  /* [44][0][][] */ -20,-73,26,-32,33,-50,127,-47,68,-36,63,37,10,99,-28,-86, 
  /* [45][0][][] */ 5,106,19,-43,38,7,-68,-87,68,-32,-83,50,59,-63,-46,-127, 
  /* [46][0][][] */ -18,48,-88,-61,-21,-36,-42,-56,97,43,106,51,-127,25,46,-15, 
  /* [47][0][][] */ 4,1,37,126,-3,38,-3,-85,-127,31,-125,-12,-21,3,30,0, 
  /* [48][0][][] */ 45,-5,-17,-52,-10,12,-127,39,53,60,47,-28,87,-28,-15,7, 
  /* [49][0][][] */ 46,100,35,-55,17,-32,-35,-61,-6,-70,-102,60,-14,107,127,109, 
  /* [50][0][][] */ 94,-38,-42,45,-82,-50,12,103,-55,-38,-26,-28,46,-11,-73,127, 
  /* [51][0][][] */ -69,35,-102,16,-38,97,-81,-53,-26,11,88,127,-23,-57,-51,81, 
  /* [52][0][][] */ 104,78,127,78,24,-4,86,81,-27,-119,15,72,-69,4,-40,33, 
  /* [53][0][][] */ -59,58,-8,127,31,-14,24,11,-4,-26,35,97,-15,-61,13,-42, 
  /* [54][0][][] */ -36,-72,-96,-127,62,125,-24,15,22,26,37,-73,58,-1,90,73, 
  /* [55][0][][] */ 127,23,-15,-60,60,-19,-48,25,-111,72,-49,-19,44,11,3,-5, 
  /* [56][0][][] */ -16,-52,57,50,6,28,-32,14,-27,44,29,-15,-42,127,-24,-1, 
  /* [57][0][][] */ 38,-36,4,-37,115,11,8,39,60,127,31,-83,63,35,46,-45, 
  /* [58][0][][] */ 24,26,11,-25,-60,-23,85,32,-56,127,-9,-72,-2,70,65,40, 
  /* [59][0][][] */ -53,43,33,45,83,-76,6,-119,4,-65,39,91,-17,-73,127,-47, 
  /* [60][0][][] */ -15,67,47,-127,-11,104,3,-94,11,32,-10,-127,33,-56,26,-47, 
  /* [61][0][][] */ -127,-47,-14,-9,41,47,-25,-15,10,-103,53,-21,93,2,-21,69, 
  /* [62][0][][] */ -38,17,-61,29,56,-68,54,103,-126,-86,-64,15,127,-72,44,39, 
  /* [63][0][][] */ 30,-65,56,-16,-22,75,-5,-71,-5,-30,15,48,-10,-60,48,-127, 
  /* [64][0][][] */ -92,25,83,-57,-52,17,60,-8,-73,-114,20,29,5,-126,-4,127, 
  /* [65][0][][] */ -25,-1,125,-16,-9,-9,-9,-32,39,105,55,127,81,55,27,49, 
  /* [66][0][][] */ 39,18,-7,-18,-127,4,14,47,39,57,50,44,39,-62,30,54, 
  /* [67][0][][] */ 43,-25,34,-39,-5,36,61,-16,-56,-10,-23,44,1,90,-13,-127, 
  /* [68][0][][] */ 127,85,50,95,8,41,-76,-126,-32,-77,-106,36,8,3,3,81, 
  /* [69][0][][] */ 47,-34,-24,-38,46,-49,-73,-127,-4,-20,-15,-32,8,-9,55,44, 
  /* [70][0][][] */ -3,92,109,82,44,2,-83,90,4,-90,-46,-39,113,8,49,127, 
  /* [71][0][][] */ -70,61,-23,-31,43,-70,-14,-18,-21,-44,-127,54,75,-62,19,-32, 
  /* [72][0][][] */ 63,-7,-9,36,114,-11,-49,23,-40,55,-12,61,-94,-66,-127,27, 
  /* [73][0][][] */ 81,-27,10,-64,-40,12,12,-45,-38,21,73,36,85,-98,127,-76, 
  /* [74][0][][] */ -80,-14,88,50,88,97,38,-51,25,118,-20,0,70,2,23,-127, 
  /* [75][0][][] */ 51,-89,-2,44,36,-68,43,127,15,-48,-7,-30,-85,106,-13,-21, 
  /* [76][0][][] */ 11,-8,127,-38,61,108,-94,-59,37,11,9,-70,42,-18,65,26, 
  /* [77][0][][] */ -16,61,37,-48,-22,13,127,51,-31,-18,-57,42,-98,1,46,-32, 
  /* [78][0][][] */ -14,-32,108,35,-22,127,-8,-99,-66,-35,-34,-3,-68,-5,-80,-48, 
  /* [79][0][][] */ -42,-51,1,82,-92,-25,61,-22,-45,-35,-18,6,92,-53,24,-127, 
  /* [80][0][][] */ -27,-44,46,33,6,-55,7,78,42,-127,63,1,47,-4,14,29, 
  /* [81][0][][] */ 94,-48,-55,104,-23,-57,-127,114,33,-42,-64,-114,17,-46,31,-78, 
  /* [82][0][][] */ 41,26,-127,-60,96,116,89,-113,3,-29,-72,36,-46,105,77,111, 
  /* [83][0][][] */ -94,8,-127,-72,-15,33,-8,-3,-57,-51,-60,18,-1,24,57,70, 
  /* [84][0][][] */ -86,17,22,-13,21,113,87,64,-60,92,-52,110,46,-82,-59,-127, 
  /* [85][0][][] */ 127,34,57,35,-58,30,-65,-60,-7,-13,-77,-64,-14,29,5,16, 
  /* [86][0][][] */ -3,124,45,-63,-69,34,-127,6,32,-127,42,39,-28,-65,-124,-28, 
  /* [87][0][][] */ 97,68,11,50,-1,83,106,-118,-60,-17,-63,-37,127,94,116,-83, 
  /* [88][0][][] */ -31,-12,-46,17,5,-30,34,-15,42,127,15,-49,49,-24,-9,-75, 
  /* [89][0][][] */ -39,-19,-127,-43,36,68,109,47,-38,-66,-20,27,-20,80,55,-22, 
  /* [90][0][][] */ -4,-27,-35,-4,1,-65,7,95,-127,63,60,-13,-59,-75,-34,-59, 
  /* [91][0][][] */ -7,-11,-40,-11,118,50,-18,-61,17,20,-9,0,-28,12,18,-127, 
  /* [92][0][][] */ -32,-43,-99,-13,24,-39,-5,36,24,2,-23,20,-31,-127,84,-26, 
  /* [93][0][][] */ 75,-11,-29,32,-26,-66,-127,28,27,50,45,35,-81,20,-122,53, 
  /* [94][0][][] */ 36,45,-110,-89,95,-33,73,-127,-97,25,-93,114,115,-71,32,-77, 
  /* [95][0][][] */ 49,116,-65,127,15,19,-93,11,-27,-36,11,21,116,-47,43,-84, 
  /* [96][0][][] */ -9,-48,-44,32,-48,46,16,76,127,-70,60,-57,-43,-47,-80,-49, 
  /* [97][0][][] */ -29,37,-40,1,17,11,35,-80,127,54,95,-39,19,-18,36,17, 
  /* [98][0][][] */ -43,-26,56,-26,14,-44,42,55,9,-15,-28,52,0,12,-127,-15, 
  /* [99][0][][] */ 27,-37,-85,-84,89,19,-127,-12,70,-74,29,-98,-42,41,5,-40, 
  /* [100][0][][] */ 127,-10,116,-22,39,19,-29,-49,36,-43,41,-18,-30,-14,-32,-71, 
  /* [101][0][][] */ -93,-1,-125,41,64,-92,42,30,46,33,-30,127,-37,-80,8,99, 
  /* [102][0][][] */ 40,-82,127,-49,-49,-67,119,-18,-31,24,-4,97,-77,-87,-126,31, 
  /* [103][0][][] */ -73,25,-97,-108,-18,-51,-2,127,-53,90,-6,-103,2,-60,-9,49, 
  /* [104][0][][] */ 23,-90,61,127,57,-24,80,-90,-35,21,7,-7,-50,127,127,66, 
  /* [105][0][][] */ 83,-106,32,-74,-57,34,-117,-12,39,-34,-38,-33,26,-36,-127,-19, 
  /* [106][0][][] */ -127,-49,86,27,91,-12,-16,109,30,29,-19,37,91,55,-8,10, 
  /* [107][0][][] */ -61,64,40,71,60,-110,-15,47,-58,18,-42,17,27,-127,22,-33, 
  /* [108][0][][] */ 127,-84,34,51,-65,16,41,-57,40,17,-9,3,-77,44,8,81, 
  /* [109][0][][] */ 48,-66,63,76,34,18,71,-49,-35,3,-25,1,11,-100,-127,-46, 
  /* [110][0][][] */ -37,22,63,-24,-36,-31,44,-35,92,71,-15,127,-18,-42,77,-63, 
  /* [111][0][][] */ -71,19,19,-21,-44,49,-80,-43,25,127,-4,-46,72,14,-26,49, 
  /* [112][0][][] */ -59,-22,-62,67,127,-100,-25,13,-25,-25,-39,-59,71,37,44,-33, 
  /* [113][0][][] */ 76,24,38,-127,-3,64,10,-20,17,10,43,-57,-25,-27,-4,13, 
  /* [114][0][][] */ -34,-21,-96,-27,-52,-32,15,-71,-117,72,127,46,-102,15,-20,-52, 
  /* [115][0][][] */ -46,-41,-82,-6,5,127,-8,-15,5,-23,-76,15,-115,-10,-94,-29, 
  /* [116][0][][] */ 59,-127,-124,-9,-38,-52,-70,0,31,1,20,10,78,45,-83,55, 
  /* [117][0][][] */ 20,-25,24,-3,-45,66,60,127,-47,4,-29,-61,-26,58,-41,-19, 
  /* [118][0][][] */ -6,39,-85,-30,110,127,-88,58,64,-48,-39,-15,-21,26,44,-40, 
  /* [119][0][][] */ 127,7,84,-16,45,-70,-3,121,-10,109,-22,-14,4,-46,-83,-98, 
  /* [120][0][][] */ 44,98,-33,3,-25,8,-127,0,62,-60,-20,-8,-79,-35,14,-37, 
  /* [121][0][][] */ -5,45,127,-77,45,67,-25,25,63,80,15,-24,7,1,-63,-8, 
  /* [122][0][][] */ 42,47,3,-29,-25,105,127,126,-39,-33,20,63,-16,16,103,66, 
  /* [123][0][][] */ 24,19,11,55,-7,37,-62,39,42,59,57,-127,91,-51,57,-46, 
  /* [124][0][][] */ -66,30,15,4,65,20,-55,46,32,117,-12,-127,123,-13,-17,-54, 
  /* [125][0][][] */ -53,7,-102,-57,-50,2,79,12,-55,-1,74,127,70,-38,103,60, 
  /* [126][0][][] */ -125,-24,-25,-127,-5,71,-122,-93,-126,14,-70,68,-28,-21,71,-35, 
  /* [127][0][][] */ 5,29,-50,-33,55,-21,-21,21,-32,-90,-9,-67,127,-96,21,3, 
  /* [128][0][][] */ -14,-20,-67,-34,-16,53,127,21,-5,14,30,-23,4,18,15,33, 
  /* [129][0][][] */ 73,-3,10,-11,-14,48,-68,-43,28,-31,-68,48,19,-36,39,-127, 
  /* [130][0][][] */ -10,-85,127,-72,19,-89,-63,47,86,-7,32,-68,87,-15,61,-80, 
  /* [131][0][][] */ 27,-21,-13,-1,78,82,-7,-127,-51,-30,-12,-23,8,65,-3,4, 
  /* [132][0][][] */ -32,-69,-40,-57,-8,127,48,-90,-4,34,100,-28,104,8,3,-48, 
  /* [133][0][][] */ -48,-5,-9,1,-30,14,-65,-66,19,55,127,-41,-37,-17,85,-33, 
  /* [134][0][][] */ 107,32,-46,-91,22,-20,-39,13,20,-52,-88,-9,-42,22,0,127, 
  /* [135][0][][] */ -24,-22,-5,-8,5,2,127,-14,-18,-52,-18,64,83,-47,62,-84, 
  /* [136][0][][] */ -5,83,-103,-58,90,5,-114,-10,-71,-5,-55,66,19,-127,-123,-23, 
  /* [137][0][][] */ -19,15,-85,20,32,6,3,127,-83,-32,-29,-13,-85,21,26,21, 
  /* [138][0][][] */ 114,14,-127,38,-91,-97,5,-44,26,-17,-43,-64,45,105,38,-21, 
  /* [139][0][][] */ -102,21,-2,2,-36,-43,-97,-127,-56,47,42,118,21,15,-62,93, 
  /* [140][0][][] */ 13,11,-49,-89,-14,-59,16,39,-27,82,-50,-8,-8,-127,90,60, 
  /* [141][0][][] */ -30,34,127,-66,-10,72,-40,-115,78,38,27,-41,-42,-34,43,18, 
  /* [142][0][][] */ -58,93,-85,93,18,-19,-127,46,-45,106,76,-44,-80,-65,55,53, 
  /* [143][0][][] */ -75,-124,77,-127,-27,-85,-56,-2,39,91,68,29,-53,-62,45,-76, 
  /* [144][0][][] */ 40,73,41,103,-105,-61,55,52,-127,50,0,110,34,-127,-58,57, 
  /* [145][0][][] */ -8,-15,-34,70,127,-14,-34,2,-47,2,54,66,53,23,-44,70, 
  /* [146][0][][] */ -68,-9,-50,-112,107,35,-76,20,42,-76,97,116,48,127,-73,40, 
  /* [147][0][][] */ 47,96,-127,-36,67,96,-14,-22,78,47,-88,107,83,-12,-21,-40, 
  /* [148][0][][] */ -31,-24,26,6,-84,-109,52,36,-127,6,-103,-73,-121,-95,-39,0, 
  /* [149][0][][] */ 35,-76,22,115,1,0,-19,-22,62,61,-127,-45,28,-81,-24,-111, 
  /* [150][0][][] */ 64,55,104,93,115,-29,10,-26,40,-45,86,76,96,59,58,127, 
  /* [151][0][][] */ 6,-60,-51,25,-22,-94,-71,-127,31,-66,-62,71,8,8,73,-7, 
  /* [152][0][][] */ 79,-18,96,56,-88,3,-12,-61,127,-26,-24,1,33,109,12,90, 
  /* [153][0][][] */ -11,93,66,6,-5,-36,-24,12,-97,-1,106,49,-16,11,-72,127, 
  /* [154][0][][] */ -16,71,-127,27,19,84,-6,30,33,-93,-28,50,10,22,32,67, 
  /* [155][0][][] */ -110,52,-9,-47,53,-54,35,24,60,70,-36,-32,-19,127,11,-28, 
  /* [156][0][][] */ 5,-18,27,-46,-53,-105,11,0,-92,-11,-7,-58,127,48,11,11, 
  /* [157][0][][] */ -5,14,48,13,12,-127,-15,17,-11,51,56,74,1,-61,29,-8, 
  /* [158][0][][] */ -26,13,98,-62,-2,-26,-6,-39,-25,-127,-68,-56,38,15,5,-32, 
  /* [159][0][][] */ -7,-102,51,42,121,42,45,20,-22,32,19,50,-11,-6,127,90, 
  /* [160][0][][] */ -17,2,60,53,-107,-22,87,-14,41,127,1,-39,-6,-42,49,44, 
  /* [161][0][][] */ 88,-72,-25,5,22,-81,79,78,-90,127,-7,-30,36,-47,29,-15, 
  /* [162][0][][] */ -16,89,20,-15,103,-8,-32,-46,29,3,-76,-12,64,-14,127,41, 
  /* [163][0][][] */ -90,-82,10,-45,5,-59,64,-2,-13,21,10,-15,-6,-127,6,-79, 
  /* [164][0][][] */ -84,-26,34,45,76,-120,18,-41,31,-39,-3,127,-46,3,-18,-9, 
  /* [165][0][][] */ -7,6,-38,43,-20,-127,55,29,96,-52,-26,-43,-45,-38,2,26, 
  /* [166][0][][] */ -22,36,22,-38,98,-51,84,-9,127,102,-40,95,-28,78,2,47, 
  /* [167][0][][] */ -37,-7,60,-73,89,3,-6,75,-63,61,3,18,24,-127,-50,-1, 
  /* [168][0][][] */ 16,10,-68,-55,55,-100,51,-7,122,-27,-9,10,127,121,81,99, 
  /* [169][0][][] */ -39,-61,-18,61,-127,-8,-48,13,-39,-29,43,-29,42,-29,-83,49, 
  /* [170][0][][] */ 19,-127,67,7,7,-70,15,-43,-1,-19,-6,-16,-35,20,-52,-8, 
  /* [171][0][][] */ -84,-64,-63,-42,23,-33,-1,27,20,-61,49,47,127,62,-25,46, 
  /* [172][0][][] */ -60,58,-75,63,-11,127,4,45,32,76,96,-30,23,-70,-48,54, 
  /* [173][0][][] */ -21,19,-47,-88,98,-13,53,-38,58,72,58,53,36,-127,42,-33, 
  /* [174][0][][] */ 71,58,22,22,20,-127,-121,-38,-53,-39,-49,58,-100,-10,-70,21, 
  /* [175][0][][] */ -64,62,-69,43,21,-127,23,37,62,62,-55,24,-27,7,-30,-42, 
  /* [176][0][][] */ 105,-11,127,34,-30,-4,7,-18,-63,9,-49,62,61,-47,-42,-35, 
  /* [177][0][][] */ 4,21,-10,50,124,-123,-88,3,3,127,23,77,-28,65,-1,67, 
  /* [178][0][][] */ 65,41,-68,-1,3,25,-35,0,62,13,11,-19,127,-48,-8,-74, 
  /* [179][0][][] */ -105,125,-57,46,-112,-41,-30,2,127,25,-17,86,16,46,-9,-35, 
  /* [180][0][][] */ 49,41,127,121,-2,4,-32,9,9,35,119,81,49,-7,81,-88, 
  /* [181][0][][] */ -4,-4,-7,-44,18,11,-127,-25,63,17,96,28,13,-91,32,-9, 
  /* [182][0][][] */ 33,50,85,58,124,5,51,33,-9,-49,-7,36,-15,-12,-127,-78, 
  /* [183][0][][] */ 15,3,124,-67,-102,84,47,-127,-44,10,93,41,53,9,4,40, 
  /* [184][0][][] */ 23,-26,15,116,-54,5,36,-84,127,103,39,64,-61,126,-51,61, 
  /* [185][0][][] */ 33,17,-40,-49,32,23,-27,-43,26,40,64,46,-40,-24,-6,-127, 
  /* [186][0][][] */ -69,-104,-127,-3,55,-89,-74,4,-1,79,-7,-53,-45,-37,-56,-104, 
  /* [187][0][][] */ 34,0,60,15,54,5,103,24,21,-24,-17,-8,-36,127,16,-33, 
  /* [188][0][][] */ -41,27,-57,13,127,-42,15,11,-40,-6,-61,39,2,45,-20,13, 
  /* [189][0][][] */ -97,22,46,-31,45,-40,46,-76,91,127,105,45,19,67,53,-57, 
  /* [190][0][][] */ -110,71,18,-41,37,1,-98,127,23,-10,42,35,110,-90,75,16, 
  /* [191][0][][] */ 51,84,112,-25,-30,-24,127,39,33,48,-58,8,-45,-48,-7,-2, 
  /* [192][0][][] */ 11,6,-70,-55,-57,80,-14,-62,-60,65,-3,-33,93,-127,-24,34, 
  /* [193][0][][] */ 99,-3,-51,-81,-8,127,18,-22,-34,-26,11,-45,-67,56,-1,-14, 
  /* [194][0][][] */ 60,-14,-98,24,13,-11,39,-33,52,-13,88,127,16,112,68,-9, 
  /* [195][0][][] */ -36,65,44,-4,118,-24,97,-1,-50,5,-68,127,-105,100,-78,-82, 
  /* [196][0][][] */ 99,6,-71,94,-2,11,14,-38,-46,-50,-13,69,-105,127,-65,48, 
  /* [197][0][][] */ 11,-6,69,-46,50,43,127,68,37,-47,12,91,11,-57,-6,-6, 
  /* [198][0][][] */ -23,97,92,81,-31,-127,-41,-44,28,11,-41,82,-5,-15,1,34, 
  /* [199][0][][] */ -99,127,47,-44,-20,36,-78,37,-21,35,72,-36,81,-89,-65,-117, 
  /* [200][0][][] */ -19,-17,-127,-22,-72,-75,16,-5,-31,78,28,38,-7,5,-13,74, 
  /* [201][0][][] */ -14,34,37,31,14,7,-39,67,-59,35,-108,-40,-127,74,5,63, 
  /* [202][0][][] */ 127,123,21,45,81,17,2,-65,-49,-122,18,115,34,-28,85,-20, 
  /* [203][0][][] */ 92,-121,-6,-30,-72,29,-16,44,60,-127,32,37,104,-5,2,56, 
  /* [204][0][][] */ 10,100,-7,99,43,-19,71,-2,-108,-124,4,-38,14,-98,-66,-127, 
  /* [205][0][][] */ -127,-37,37,-20,86,57,61,-110,-101,-21,-66,106,115,104,-29,-105, 
  /* [206][0][][] */ 71,-71,-45,20,-16,-47,15,-82,12,-127,-51,9,13,99,-9,88, 
  /* [207][0][][] */ -12,67,31,62,6,78,127,16,-65,-8,-48,-94,-45,-46,87,22, 
  /* [208][0][][] */ -127,-10,-25,54,35,13,-54,-70,5,53,-42,-22,42,-31,62,-44, 
  /* [209][0][][] */ -19,55,-1,-15,-13,27,82,-31,38,-96,79,61,61,-25,-66,-127, 
  /* [210][0][][] */ 75,1,77,-127,57,21,-10,57,-78,28,13,10,-61,-45,-57,-104, 
  /* [211][0][][] */ -62,75,75,-3,-56,21,-28,-71,35,-33,-11,-19,31,-127,-23,-71, 
  /* [212][0][][] */ -61,56,44,56,-100,-19,-61,-62,-47,60,86,23,127,70,-29,-24, 
  /* [213][0][][] */ -127,21,-8,10,50,-2,50,16,18,60,37,-68,18,-59,33,3, 
  /* [214][0][][] */ 22,-60,-7,-17,-114,-35,127,10,-83,-79,55,99,-52,54,-110,-91, 
  /* [215][0][][] */ -47,48,63,80,47,-17,64,-11,3,0,-28,5,-14,127,-77,-52, 
  /* [216][0][][] */ -28,26,-71,61,-53,-6,89,-127,49,-74,-85,-7,-34,-55,0,-34, 
  /* [217][0][][] */ 45,-6,-20,-52,-82,29,-17,-20,-74,-33,82,-127,15,-29,106,-10, 
  /* [218][0][][] */ 27,97,23,-9,32,-10,-95,-127,58,-56,29,-48,56,-112,13,63, 
  /* [219][0][][] */ 38,-18,-19,52,-18,-48,127,-9,91,-33,-35,19,-12,-16,23,3, 
  /* [220][0][][] */ -24,2,-81,121,-46,41,19,29,15,127,83,-30,29,25,24,0, 
  /* [221][0][][] */ 24,-81,43,-47,17,-54,-25,-67,-69,26,-28,38,42,-127,-16,-100, 
  /* [222][0][][] */ -68,16,12,-49,-13,47,-6,-56,-15,86,0,-16,127,-14,59,-71, 
  /* [223][0][][] */ -13,-5,-39,69,-38,-41,-91,30,1,-41,127,81,9,9,-112,6, 
  /* [224][0][][] */ 98,31,30,18,11,26,127,48,-11,-105,-33,28,-47,-30,-28,21, 
  /* [225][0][][] */ 47,98,-21,-16,-4,20,-6,-48,58,52,-127,-18,-63,-51,48,17, 
  /* [226][0][][] */ 37,-28,-67,-11,-48,0,80,-47,-127,-35,-30,8,-13,106,-106,6, 
  /* [227][0][][] */ 29,38,-122,-15,10,-13,8,30,-78,63,-97,-127,-63,13,45,-30, 
  /* [228][0][][] */ -123,-30,52,12,6,-43,127,34,49,75,-12,106,23,-38,45,19, 
  /* [229][0][][] */ -9,-127,48,32,1,56,4,49,-56,16,81,-40,84,-69,10,44, 
  /* [230][0][][] */ -41,85,69,-43,-104,58,90,-127,39,1,-71,35,41,-13,15,-89, 
  /* [231][0][][] */ 20,-11,29,1,28,26,127,-20,47,-18,18,43,38,18,-7,-9, 
  /* [232][0][][] */ 39,-7,127,-38,-34,-4,58,-67,-19,46,12,-50,4,-18,20,-75, 
  /* [233][0][][] */ -44,-95,9,26,-16,-24,-96,-127,42,18,61,12,-11,-14,-123,29, 
  /* [234][0][][] */ 27,37,43,-13,127,-43,2,-53,24,-83,-27,-1,50,-31,-18,0, 
  /* [235][0][][] */ 47,-84,-40,71,60,21,-28,-84,-25,-121,-46,90,105,-127,33,105, 
  /* [236][0][][] */ 23,17,49,124,-17,-50,-127,-84,-15,-14,-44,20,55,38,-67,45, 
  /* [237][0][][] */ 18,-71,-127,-66,55,86,-26,72,21,0,-29,-53,79,73,8,-19, 
  /* [238][0][][] */ -48,25,42,24,-70,-76,46,13,35,-127,-44,99,90,87,-4,80, 
  /* [239][0][][] */ 32,26,-11,13,29,-13,-71,27,85,-103,32,-13,-45,-20,-44,127, 
  /* [240][0][][] */ 0,-81,9,31,52,-51,-6,-127,-42,-68,-61,38,50,11,9,25, 
  /* [241][0][][] */ 127,126,41,-87,72,7,77,51,111,51,21,-46,-24,-30,117,29, 
  /* [242][0][][] */ 73,61,11,-53,-32,48,127,18,48,-21,-6,21,-8,-49,-15,-4, 
  /* [243][0][][] */ 27,125,27,-60,-83,-78,2,32,-16,1,-20,25,-72,-70,-17,-127, 
  /* [244][0][][] */ 14,-36,-44,-72,-53,42,13,-97,112,89,-56,-17,35,127,-55,54, 
  /* [245][0][][] */ -108,71,39,-21,-41,-67,67,65,85,42,-77,-127,-49,-86,-28,-12, 
  /* [246][0][][] */ 45,49,-71,-127,-11,-80,-35,-24,-6,-11,26,80,40,79,-24,-51, 
  /* [247][0][][] */ -64,63,29,10,127,-6,-38,-15,91,-16,11,52,9,23,56,7, 
  /* [248][0][][] */ -95,-38,22,-20,4,52,127,-36,-18,44,-47,-11,25,-13,68,-39, 
  /* [249][0][][] */ -27,33,-40,16,-68,-28,97,82,-87,-45,44,25,-45,66,-127,0, 
  /* [250][0][][] */ -3,10,-12,121,24,14,63,-33,-83,103,-65,-42,83,127,33,-15, 
  /* [251][0][][] */ -10,38,115,-11,2,-21,127,41,-2,-26,-18,-54,-18,-97,92,-24, 
  /* [252][0][][] */ 54,-35,127,21,-5,-15,42,24,31,60,30,31,12,3,37,60, 
  /* [253][0][][] */ -127,13,18,18,-5,-7,47,-39,22,10,-27,-46,0,-35,28,-78, 
  /* [254][0][][] */ -92,-80,-42,-9,-41,-45,29,90,-82,-80,-27,48,68,36,-127,75, 
  /* [255][0][][] */ -45,-54,96,-21,127,61,40,8,-37,-10,-5,-41,59,37,35,0, 
  /* [256][0][][] */ 127,36,-39,20,-20,42,-71,-83,76,23,99,-7,89,58,-55,52, 
  /* [257][0][][] */ -75,74,-96,-33,-31,93,2,-86,127,-67,26,61,52,53,-9,-119, 
  /* [258][0][][] */ -120,31,-107,-36,127,15,30,-11,109,51,-40,-109,-12,-12,-30,30, 
  /* [259][0][][] */ 79,7,-23,70,-11,76,12,-87,46,9,-47,-118,-71,-48,127,12, 
  /* [260][0][][] */ -15,-27,-13,-13,-17,-38,127,108,113,27,44,-101,-115,24,-58,-39, 
  /* [261][0][][] */ 93,-127,-66,-16,-31,-54,61,65,39,-20,45,-43,-115,-30,16,-4, 
  /* [262][0][][] */ -67,19,-57,-66,18,-84,-127,81,-68,-49,-16,-5,11,-54,-70,-4, 
  /* [263][0][][] */ 127,-63,12,8,65,47,4,-12,-63,-37,26,42,-85,-115,70,27, 
  /* [264][0][][] */ -29,-35,13,34,-104,23,-56,-22,-21,101,40,-127,-72,-48,-76,40, 
  /* [265][0][][] */ 53,-2,-41,-127,-68,46,-25,-86,68,-21,68,-40,-69,20,-28,-70, 
  /* [266][0][][] */ -6,17,-82,-60,45,-20,-127,-61,-88,93,120,16,107,-8,84,31, 
  /* [267][0][][] */ 36,35,47,-107,1,-40,123,73,45,122,47,3,30,30,-37,-127, 
  /* [268][0][][] */ -59,-90,-86,-23,-54,9,85,25,68,-21,35,-64,-29,-127,-2,76, 
  /* [269][0][][] */ -76,21,10,-78,127,11,-45,-36,114,37,50,8,-57,-52,-63,48, 
  /* [270][0][][] */ 105,99,65,-117,-7,70,-71,122,88,-127,50,-54,-9,48,-98,-61, 
  /* [271][0][][] */ 36,64,84,-72,77,-60,-17,12,-19,48,127,-33,57,-124,13,20, 
  /* [272][0][][] */ -34,-41,23,-34,6,-35,-71,-120,-28,127,57,-30,110,-28,27,-31, 
  /* [273][0][][] */ -86,22,91,-67,-12,-30,77,-40,-79,105,-63,-15,-20,-127,-5,82, 
  /* [274][0][][] */ -63,27,44,-26,127,21,8,-36,72,25,13,-26,-36,48,-27,-46, 
  /* [275][0][][] */ 28,89,82,23,-8,-61,-127,-12,41,-3,38,4,24,-72,48,-53, 
  /* [276][0][][] */ 31,16,-66,-35,72,61,-127,120,47,-57,50,49,-13,25,69,-75, 
  /* [277][0][][] */ -34,-36,-29,-30,19,93,7,-22,127,11,10,-39,7,-42,78,62, 
  /* [278][0][][] */ -61,15,-63,23,-31,36,17,-52,-72,39,19,-79,127,-105,56,89, 
  /* [279][0][][] */ -23,-30,65,-27,32,28,-78,-25,127,22,15,-101,55,-74,-8,10, 
  /* [280][0][][] */ 84,-17,27,-28,-42,-73,74,7,44,51,-31,67,-8,30,-127,-46, 
  /* [281][0][][] */ 29,35,-64,-86,12,-36,35,82,30,43,9,-127,23,79,58,-26, 
  /* [282][0][][] */ 23,-41,104,20,-124,-42,127,-28,-21,1,80,106,-76,-125,4,70, 
  /* [283][0][][] */ -71,89,-14,-64,-58,17,-127,-55,-34,81,44,-59,108,-16,1,49, 
  /* [284][0][][] */ -39,31,-16,0,34,31,-12,46,-3,72,-18,-45,-6,-127,-70,-95, 
  /* [285][0][][] */ -127,18,-9,-4,51,5,32,-16,83,-35,3,23,-35,50,44,80, 
  /* [286][0][][] */ -29,53,-22,-127,-76,14,-79,17,-76,-10,31,-126,-63,68,-44,-36, 
  /* [287][0][][] */ -56,20,-98,-58,8,6,-16,-3,-78,5,57,-33,66,-71,127,28, 
  /* [288][0][][] */ 118,16,107,-127,25,54,-2,-49,-110,34,43,63,52,59,-1,-27, 
  /* [289][0][][] */ -49,-13,43,-40,24,-20,93,86,-120,13,-31,-127,9,36,-22,-2, 
  /* [290][0][][] */ 50,-25,-82,116,-36,-22,-127,42,-24,67,68,-40,43,6,-37,-12, 
  /* [291][0][][] */ 118,41,60,83,30,-1,127,50,77,-117,-40,96,18,4,-11,36, 
  /* [292][0][][] */ 127,33,49,38,-23,-49,-36,33,-19,-59,28,6,17,10,42,21, 
  /* [293][0][][] */ 88,67,-66,-51,-80,21,-119,35,12,-34,127,67,11,-117,-4,61, 
  /* [294][0][][] */ 27,-127,35,-38,11,-75,48,-22,-12,-75,45,6,-19,49,25,30, 
  /* [295][0][][] */ -2,82,-57,-1,-11,-32,16,-1,-93,127,-10,19,-45,63,-40,-5, 
  /* [296][0][][] */ -14,61,22,-2,62,-96,24,88,-127,-36,-28,67,42,-28,-92,-18, 
  /* [297][0][][] */ 127,51,-32,49,-36,56,-27,-94,3,-62,81,-73,-38,19,63,16, 
  /* [298][0][][] */ -38,6,13,0,-25,105,-25,-115,-79,-17,-15,25,107,-16,-4,127, 
  /* [299][0][][] */ -27,-43,-52,-16,76,26,-33,-3,-15,40,-35,12,-38,127,-38,-44, 
  /* [300][0][][] */ -30,-11,63,-34,99,48,127,-25,88,31,26,50,33,-27,82,-57, 
  /* [301][0][][] */ 32,-47,-127,-46,-36,-59,-31,-19,19,-19,53,93,48,-126,-24,-99, 
  /* [302][0][][] */ -33,-90,-4,-10,-72,73,127,-24,-15,57,64,64,51,32,11,-41, 
  /* [303][0][][] */ -31,-64,33,1,-25,4,9,-68,-60,6,-11,-37,-14,127,-4,63, 
  /* [304][0][][] */ -90,-54,-64,41,-23,-16,-59,41,108,-67,124,-24,-27,127,34,-10, 
  /* [305][0][][] */ 21,-107,-8,-79,-45,-9,28,3,11,92,68,-127,-81,21,0,-14, 
  /* [306][0][][] */ -16,-11,-79,-20,-48,-10,-40,54,127,-92,-16,-101,3,-27,68,-68, 
  /* [307][0][][] */ 65,-50,84,63,29,19,-23,127,2,-23,13,-77,-8,108,-45,65, 
  /* [308][0][][] */ 94,-14,10,-24,-12,59,21,-16,26,0,51,127,14,-39,-54,90, 
  /* [309][0][][] */ 53,31,-11,-127,73,-28,-32,51,-78,94,-40,-81,-37,36,-87,62, 
  /* [310][0][][] */ 99,-51,48,-12,-54,29,-69,44,6,-97,44,-18,62,67,-28,-127, 
  /* [311][0][][] */ -87,105,-41,-4,-62,107,85,-4,84,40,-102,-73,12,-127,15,72, 
  /* [312][0][][] */ 127,14,-72,-3,90,16,37,-22,22,55,69,-86,-2,-1,-82,-31, 
  /* [313][0][][] */ 19,11,20,67,59,-47,69,30,-127,102,-12,39,122,-18,25,63, 
  /* [314][0][][] */ -48,-19,28,127,42,59,41,106,2,-30,-20,22,16,74,-27,24, 
  /* [315][0][][] */ 82,-6,64,14,-89,-127,-39,24,-69,96,17,3,29,-79,-21,-43, 
  /* [316][0][][] */ -26,-61,71,36,47,127,102,29,7,-49,-24,5,-32,24,78,-25, 
  /* [317][0][][] */ -32,-23,-107,3,-49,-127,-43,62,83,6,24,-16,-108,-45,58,68, 
  /* [318][0][][] */ 39,-18,8,13,-29,45,8,-16,-127,-72,55,-3,11,-54,67,25, 
  /* [319][0][][] */ 38,-62,-16,19,-85,-18,8,-27,-105,-24,-5,40,14,13,-127,16, 
  /* [320][0][][] */ 46,64,-116,-18,71,25,-74,-2,117,127,62,-33,-16,-45,0,-51, 
  /* [321][0][][] */ -3,-46,-102,-118,-82,-20,39,-21,-45,-1,23,66,-125,-49,-127,-44, 
  /* [322][0][][] */ 126,-2,10,7,38,-57,-68,-2,-3,-114,-127,36,3,-37,-75,76, 
  /* [323][0][][] */ 127,23,33,15,78,87,-114,34,-41,-115,93,-3,72,41,-27,-67, 
  /* [324][0][][] */ 67,44,53,102,21,-127,-80,-105,-26,20,18,30,51,-71,69,9, 
  /* [325][0][][] */ 12,17,44,38,-33,-104,-14,-88,43,-7,117,-127,-45,-57,-111,82, 
  /* [326][0][][] */ -43,-81,-48,-65,-18,14,45,-77,-37,-27,-9,127,21,29,107,-96, 
  /* [327][0][][] */ 20,-127,40,86,7,-7,39,30,23,16,-12,-16,-16,-52,-3,12, 
  /* [328][0][][] */ 25,30,10,50,61,-71,-101,36,-32,126,-42,-16,-10,127,10,-33, 
  /* [329][0][][] */ -24,83,64,90,64,5,-127,26,43,116,55,61,-82,34,-35,-92, 
  /* [330][0][][] */ 18,-53,-6,127,5,-32,6,23,-82,15,20,76,-58,41,-71,77, 
  /* [331][0][][] */ 57,73,-1,8,67,69,67,93,-127,-94,53,5,48,30,5,-116, 
  /* [332][0][][] */ -87,-127,19,-10,-19,-59,-13,-23,-4,-14,20,-38,-9,-7,-35,108, 
  /* [333][0][][] */ -25,-58,19,38,0,-62,45,-27,-17,-10,-100,-64,-127,3,-23,27, 
  /* [334][0][][] */ -86,20,-123,37,-41,-50,27,67,-45,-51,127,125,-81,-22,34,-49, 
  /* [335][0][][] */ 16,-1,-10,-15,16,76,13,-127,28,51,28,30,17,37,66,20, 
  /* [336][0][][] */ 82,-7,41,48,44,-20,67,75,89,-51,5,-49,-75,-127,-17,-95, 
  /* [337][0][][] */ 127,5,72,11,93,94,34,-34,32,71,-6,11,5,-66,-5,-95, 
  /* [338][0][][] */ -21,-76,55,7,3,-127,-16,6,-40,16,-7,-53,-45,7,4,8, 
  /* [339][0][][] */ -85,35,-20,56,9,26,-19,102,-85,-43,127,32,45,62,10,-23, 
  /* [340][0][][] */ 30,-28,-35,-80,-81,22,-79,28,-22,-88,121,37,127,-47,45,60, 
  /* [341][0][][] */ 30,92,127,-98,-26,12,-82,86,42,-7,23,-78,36,-39,-23,33, 
  /* [342][0][][] */ -81,-53,-36,-41,-105,-60,-72,-2,-62,47,38,0,127,121,58,78, 
  /* [343][0][][] */ 10,3,85,125,18,-127,49,49,42,100,-24,-124,37,76,90,25, 
  /* [344][0][][] */ 52,-72,39,-71,10,61,30,-40,-79,14,43,99,20,23,-127,-84, 
  /* [345][0][][] */ 92,38,50,66,-36,-65,13,-11,-43,127,63,17,-22,17,37,36, 
  /* [346][0][][] */ -44,47,-89,114,-29,27,-2,71,-27,10,-94,59,-6,-127,15,3, 
  /* [347][0][][] */ 52,-70,-24,42,66,65,87,-38,127,-56,33,22,-22,-16,55,35, 
  /* [348][0][][] */ 39,61,47,28,-12,17,-54,-82,-8,3,-43,8,-3,-22,127,-21, 
  /* [349][0][][] */ 40,-37,-22,80,21,-83,41,12,23,-1,41,-24,127,49,12,-6, 
  /* [350][0][][] */ 78,74,-32,10,-21,-114,14,50,-70,-25,-47,-49,-42,-127,6,-31, 
  /* [351][0][][] */ -1,-120,-57,-7,6,117,-127,62,126,-74,84,-89,19,44,-33,28, 
  /* [352][0][][] */ 2,-127,-23,75,-51,43,-68,-12,100,24,-15,-95,-30,81,-89,-93, 
  /* [353][0][][] */ 59,110,-34,-40,71,-35,-40,-54,16,5,-26,127,31,95,-51,-28, 
  /* [354][0][][] */ 11,-18,9,32,-127,42,28,-69,-20,-43,11,-101,74,55,18,-90, 
  /* [355][0][][] */ -44,-93,-20,58,-76,-7,40,66,70,82,15,-127,117,-50,102,21, 
  /* [356][0][][] */ 69,29,-85,-22,-81,-67,-88,-8,94,-103,-1,-1,90,-127,-88,-29, 
  /* [357][0][][] */ 34,-2,15,-22,-109,-53,86,127,-109,73,64,10,35,48,111,40, 
  /* [358][0][][] */ 120,38,-57,67,18,-29,-108,67,41,52,56,-94,15,52,34,-127, 
  /* [359][0][][] */ 59,39,-1,-12,-46,53,-65,-34,22,-7,-18,16,-3,-9,-127,-4, 
  /* [360][0][][] */ 91,13,19,-17,19,81,87,22,67,-69,127,-1,-62,44,-31,19, 
  /* [361][0][][] */ -35,19,-22,-112,-13,-127,101,39,92,27,3,65,101,-28,30,-48, 
  /* [362][0][][] */ -15,-10,59,127,62,78,118,27,-83,-18,30,21,11,-66,9,26, 
  /* [363][0][][] */ -105,40,119,29,30,14,6,85,-127,-13,43,-127,-121,-42,-19,12, 
  /* [364][0][][] */ -127,-63,42,60,-13,15,-3,23,-25,88,14,-7,33,38,-22,31, 
  /* [365][0][][] */ -14,8,-127,-104,-114,-15,-120,-67,51,-68,36,40,91,-114,52,14, 
  /* [366][0][][] */ -39,-45,-127,31,-14,17,-30,18,66,11,-10,-59,9,-73,18,14, 
  /* [367][0][][] */ 117,20,34,-9,-127,35,30,-41,-23,54,-6,-62,-46,23,-44,-31, 
  /* [368][0][][] */ 35,74,-19,19,-95,94,71,-74,-127,12,-62,-31,41,-34,-53,-21, 
  /* [369][0][][] */ -118,-16,74,-127,-25,15,35,-45,-98,-54,105,110,72,-4,105,-11, 
  /* [370][0][][] */ 41,-34,12,-26,-52,44,78,14,25,55,62,14,-9,21,-20,-127, 
  /* [371][0][][] */ -117,-111,12,-35,-58,4,-5,-40,96,5,31,78,123,127,-65,-84, 
  /* [372][0][][] */ -91,-16,-35,25,-16,72,64,-127,117,-73,11,25,-14,-10,23,-81, 
  /* [373][0][][] */ -36,-13,-78,57,64,-65,-127,-64,61,20,9,11,38,71,40,45, 
  /* [374][0][][] */ 90,-8,24,27,-107,60,-122,1,61,-127,95,5,53,27,65,-61, 
  /* [375][0][][] */ 122,8,59,-122,125,-69,-101,-17,7,-35,12,-32,-7,-52,55,-127, 
  /* [376][0][][] */ 13,57,-29,-29,12,-15,-127,-27,-101,-104,-34,20,-17,-35,-57,39, 
  /* [377][0][][] */ -40,-26,19,-36,-75,42,30,-11,-120,0,-10,-32,23,25,-42,127, 
  /* [378][0][][] */ 9,110,38,32,-92,-76,23,-26,-11,-124,48,93,-21,127,-30,41, 
  /* [379][0][][] */ 5,-12,-34,-16,58,9,-127,80,-44,74,6,-24,36,-61,-87,-37, 
  /* [380][0][][] */ 94,-9,-73,-127,58,46,127,-5,-55,-44,-63,1,84,-24,46,3, 
  /* [381][0][][] */ 52,-33,-112,40,-127,81,-121,-123,-37,4,62,-48,29,-36,39,-33, 
  /* [382][0][][] */ 127,10,-30,-32,-36,52,20,17,78,118,-119,-66,20,16,43,-25, 
  /* [383][0][][] */ -53,47,-4,-5,58,-9,56,-12,127,29,-27,17,-26,82,40,-34, 
  /* [384][0][][] */ -76,68,-13,-67,61,-72,33,-11,-19,36,26,26,-15,1,127,-91, 
  /* [385][0][][] */ -27,58,19,16,-93,-21,-26,-60,-102,-2,12,-11,127,-69,19,119, 
  /* [386][0][][] */ 70,-73,39,-18,52,-13,-67,56,84,-3,127,-22,64,-101,-22,11, 
  /* [387][0][][] */ -29,-7,34,86,-17,-43,14,-11,-12,27,40,-49,127,-105,-25,51, 
  /* [388][0][][] */ 77,-46,2,-5,67,-47,-68,-49,-33,55,90,60,-11,21,38,-127, 
  /* [389][0][][] */ -50,117,-31,-40,14,-112,51,92,-127,-50,32,117,-85,-14,106,58, 
  /* [390][0][][] */ -19,-15,127,-111,93,56,-125,19,20,-12,-52,-78,-73,-10,-56,-20, 
  /* [391][0][][] */ 26,88,-4,71,127,28,17,-67,-64,-2,-9,112,-77,29,48,7, 
  /* [392][0][][] */ 123,-41,-9,78,77,-28,-68,-76,-49,-62,84,-127,-25,-96,-52,66, 
  /* [393][0][][] */ -47,25,25,31,-64,2,-6,10,77,68,26,69,-127,-43,-78,104, 
  /* [394][0][][] */ -86,-8,33,-29,-43,-50,-33,-27,-111,50,24,84,127,-78,-38,-19, 
  /* [395][0][][] */ -31,127,5,-78,83,-5,27,-126,-3,23,-22,114,-72,127,76,-45, 
  /* [396][0][][] */ -127,-19,-37,110,15,-56,-123,73,16,33,-49,-77,34,43,-83,-44, 
  /* [397][0][][] */ 85,90,-29,-9,93,-30,-127,74,-19,-89,-13,-7,-113,25,117,-37, 
  /* [398][0][][] */ -122,-6,45,-55,127,46,-63,57,-20,15,-36,-38,-112,-112,-55,73, 
  /* [399][0][][] */ -127,-38,3,53,-89,22,7,-11,-41,39,93,16,67,-36,-33,-2, 
  /* [400][0][][] */ 127,8,-9,-28,23,-57,33,-36,42,-25,-17,38,30,12,72,-64, 
  /* [401][0][][] */ 32,-12,-14,-7,-20,-24,-37,-75,-16,-112,-14,48,127,16,43,59, 
  /* [402][0][][] */ 30,60,-80,-127,-14,5,58,58,7,-113,-32,94,67,127,-11,43, 
  /* [403][0][][] */ 29,-99,-38,2,37,29,51,-127,122,-98,-58,29,-85,66,53,-21, 
  /* [404][0][][] */ 127,46,39,-69,-33,71,-84,-30,5,-79,73,-2,76,-60,-50,1, 
  /* [405][0][][] */ -43,-12,42,23,25,3,-127,38,22,-60,-2,-38,-17,-27,-22,46, 
  /* [406][0][][] */ 41,-6,25,-74,-126,-74,-3,24,86,101,127,-46,13,28,28,-47, 
  /* [407][0][][] */ 87,88,75,5,20,-105,-104,2,-47,43,48,55,-32,127,-5,-78, 
  /* [408][0][][] */ 8,28,73,-96,-127,-42,59,70,13,-100,76,87,32,122,-78,75, 
  /* [409][0][][] */ 18,61,127,77,-32,22,52,16,62,-44,16,-63,-37,-3,59,-75, 
  /* [410][0][][] */ 70,127,-82,-89,-56,-84,-20,88,64,122,70,38,42,73,47,40, 
  /* [411][0][][] */ -8,4,2,-90,-30,-55,-51,-43,38,-5,-11,-46,-38,-127,-9,-56, 
  /* [412][0][][] */ 16,1,-46,-2,-101,55,9,-21,-51,-71,-16,-22,65,-22,58,127, 
  /* [413][0][][] */ 21,70,13,-64,60,-7,-61,-75,92,-3,-3,70,-62,127,-46,-58, 
  /* [414][0][][] */ -9,37,-31,3,120,-12,60,37,-35,4,-127,36,15,-14,-102,-30, 
  /* [415][0][][] */ 92,9,-10,15,-127,-74,-38,16,56,79,-67,-69,-78,98,68,-68, 
  /* [416][0][][] */ -34,-25,-19,67,54,-57,28,71,-36,-64,127,108,64,39,-87,-82, 
  /* [417][0][][] */ 18,-3,-1,42,-39,-3,47,-9,25,-3,50,127,-12,1,-34,-31, 
  /* [418][0][][] */ -58,-63,-90,-73,24,-90,-13,-106,108,-127,12,13,14,73,-82,-97, 
  /* [419][0][][] */ 33,127,-82,22,-65,70,44,-60,-24,36,-22,75,32,18,91,-1, 
  /* [420][0][][] */ 64,-26,-41,58,-1,65,2,82,127,-58,108,-15,107,46,-11,-49, 
  /* [421][0][][] */ -118,-8,2,-93,14,5,-10,9,127,21,26,-110,109,9,55,29, 
  /* [422][0][][] */ 56,-12,-77,28,-127,-24,52,-60,-6,67,2,7,-55,-1,-74,-39, 
  /* [423][0][][] */ -67,-40,-28,-71,-42,-127,41,27,83,-24,-29,-74,32,-9,84,35, 
  /* [424][0][][] */ -72,-27,20,-53,19,17,9,-7,-6,19,10,-42,5,9,-2,-127, 
  /* [425][0][][] */ -66,-27,-39,-100,27,65,-41,-38,-22,11,-38,-10,49,9,-41,-127, 
  /* [426][0][][] */ -51,66,94,78,-110,105,-55,-30,31,28,-32,-127,-56,-29,-98,10, 
  /* [427][0][][] */ -16,-46,41,-127,53,-51,56,33,63,-39,21,116,21,-43,-127,-93, 
  /* [428][0][][] */ -16,28,-14,-72,16,18,123,127,0,113,-97,77,42,126,54,-97, 
  /* [429][0][][] */ -60,-3,8,-51,43,26,-25,40,-46,-21,90,-19,72,-106,88,-127, 
  /* [430][0][][] */ -72,-17,-30,-25,-22,-2,80,6,127,-32,63,-46,54,-34,-15,27, 
  /* [431][0][][] */ 127,-13,-7,-58,-101,9,17,-18,-74,-7,-33,-18,-40,17,23,-22, 
  /* [432][0][][] */ -80,-67,-78,79,14,127,0,31,-17,-112,-57,-9,50,-116,50,-64, 
  /* [433][0][][] */ 27,91,-37,-1,-53,-5,-41,-80,107,53,-28,-127,-2,-57,47,-26, 
  /* [434][0][][] */ 77,-9,-87,53,-79,-113,-127,34,13,122,-88,-118,23,-48,61,-4, 
  /* [435][0][][] */ -88,21,-82,17,88,74,49,11,-27,127,-53,5,-34,-40,26,-101, 
  /* [436][0][][] */ 14,19,-127,30,42,8,14,-26,-55,-41,25,-24,20,-75,-36,-34, 
  /* [437][0][][] */ -6,-24,77,-127,61,28,68,-57,-105,-51,-20,12,59,-5,34,63, 
  /* [438][0][][] */ -6,-21,-8,1,-14,23,65,-4,13,-2,42,20,82,-127,85,-37, 
  /* [439][0][][] */ 81,64,19,-46,65,-58,-5,-20,-21,127,23,-2,-91,-57,40,-26, 
  /* [440][0][][] */ 43,-98,12,42,-18,47,17,-108,-48,-26,80,25,124,-20,127,27, 
  /* [441][0][][] */ 86,-26,-56,46,-23,37,13,17,24,51,56,-73,-39,127,7,-2, 
  /* [442][0][][] */ -10,68,-25,-100,92,127,45,-24,86,-95,-96,-22,-81,-38,13,-11, 
  /* [443][0][][] */ 22,-60,-29,-127,-30,-85,59,-89,66,16,-34,-111,-63,24,55,-10, 
  /* [444][0][][] */ 36,10,-34,-38,44,-21,-127,-17,-27,35,20,53,-29,-2,-50,-32, 
  /* [445][0][][] */ 18,-117,70,35,13,119,74,-2,-37,35,-26,-25,-34,-127,42,88, 
  /* [446][0][][] */ -11,-38,118,31,-63,-43,-37,74,57,-81,-59,-105,-31,-42,-127,28, 
  /* [447][0][][] */ 51,67,-43,-7,-72,54,14,-103,-127,-88,-21,120,-67,42,-59,22, 
  /* [448][0][][] */ -70,0,30,127,22,21,32,48,-11,-33,-10,-25,-18,33,29,-59, 
  /* [449][0][][] */ 114,54,-65,-2,52,-33,69,11,-67,116,-74,-12,-60,-46,18,-127, 
  /* [450][0][][] */ -11,66,0,41,57,105,-2,127,23,48,21,-126,-60,-13,-6,19, 
  /* [451][0][][] */ 16,17,-30,8,-32,85,-127,15,-99,1,62,69,113,13,-10,67, 
  /* [452][0][][] */ 39,-64,-76,-39,-76,-1,-63,59,-19,1,-28,97,-127,79,-14,15, 
  /* [453][0][][] */ 127,64,68,18,4,42,25,4,-42,8,-28,-58,-3,-3,-79,-48, 
  /* [454][0][][] */ -96,12,-12,2,-12,99,-11,-82,81,-127,-36,-9,39,22,15,79, 
  /* [455][0][][] */ -16,52,-7,35,94,9,-12,2,-2,12,-18,-19,14,18,102,-127, 
  /* [456][0][][] */ 31,24,29,-56,123,-81,-17,67,-127,-27,26,67,9,62,75,53, 
  /* [457][0][][] */ 36,63,-48,8,127,-44,16,23,120,-35,59,82,-26,85,0,-71, 
  /* [458][0][][] */ 9,-73,-11,-49,118,-49,-21,30,44,86,84,8,41,-58,-45,-127, 
  /* [459][0][][] */ 34,45,-87,-30,-32,22,-101,-127,35,77,-36,33,56,-103,-27,87, 
  /* [460][0][][] */ -17,21,-31,5,68,-127,-59,122,74,3,-58,-33,-77,37,6,46, 
  /* [461][0][][] */ 32,-74,-13,-67,29,-32,-41,-38,111,78,50,-7,22,127,4,-75, 
  /* [462][0][][] */ -59,3,-55,-127,68,-12,6,-31,68,49,-38,-3,10,13,-23,-32, 
  /* [463][0][][] */ 7,-120,57,-23,46,-31,9,76,60,68,-5,-51,-127,4,-94,104, 
  /* [464][0][][] */ -31,23,99,31,-26,127,35,39,-13,-15,103,-41,-24,-12,-95,-26, 
  /* [465][0][][] */ 45,-87,56,-7,-74,-31,6,68,56,99,-29,-47,105,41,127,-16, 
  /* [466][0][][] */ 5,3,-79,-50,6,-44,-20,-5,-113,57,-127,-55,56,-127,36,-88, 
  /* [467][0][][] */ -1,78,-86,-31,58,-82,-46,18,63,28,86,34,79,-30,77,-127, 
  /* [468][0][][] */ -47,-1,40,12,47,-83,-23,75,-127,-65,13,104,92,-78,-57,-66, 
  /* [469][0][][] */ -54,32,45,-33,27,54,-22,127,49,-29,55,-31,25,-1,60,13, 
  /* [470][0][][] */ 2,72,98,36,3,127,-56,-100,-74,9,14,-10,1,7,10,75, 
  /* [471][0][][] */ -6,-41,-2,38,104,-4,-20,-127,61,19,-43,-72,-28,-44,20,-29, 
  /* [472][0][][] */ -58,87,-44,103,-38,-6,-77,-20,-112,24,16,127,30,-22,-12,-70, 
  /* [473][0][][] */ 50,-30,92,-61,97,11,13,-125,-31,-28,88,-30,76,127,-57,30, 
  /* [474][0][][] */ -52,24,9,4,72,46,47,-86,40,11,33,-44,31,9,45,-127, 
  /* [475][0][][] */ -22,-26,-92,62,-67,113,-15,54,52,-14,-1,-56,43,127,-41,15, 
  /* [476][0][][] */ 100,-36,127,-49,49,-14,-51,9,-91,-35,-12,12,40,24,50,91, 
  /* [477][0][][] */ 70,5,-36,70,-107,-52,26,-33,-127,17,12,105,50,90,-70,-81, 
  /* [478][0][][] */ 78,-13,83,-32,-43,68,22,-32,89,-116,7,-58,-127,-50,83,-31, 
  /* [479][0][][] */ 100,-23,-43,-118,127,59,11,-18,-84,42,-6,-1,90,-75,105,-60, 
  /* [480][0][][] */ -1,-79,6,-30,-2,-40,-13,96,26,42,-22,-98,-83,-48,-94,-127, 
  /* [481][0][][] */ 127,65,40,65,58,-23,-46,5,-18,-15,10,39,49,61,-21,-24, 
  /* [482][0][][] */ -26,-8,-54,70,61,25,127,-14,41,-77,10,41,37,35,8,6, 
  /* [483][0][][] */ -91,64,-64,-127,80,-56,10,-80,54,-8,-48,105,126,-80,87,26, 
  /* [484][0][][] */ -93,-91,-14,-9,127,44,-71,-43,25,-84,66,74,-51,-20,-18,62, 
  /* [485][0][][] */ 39,36,-13,-63,-80,11,73,-127,-27,-30,-60,40,-85,-19,-76,52, 
  /* [486][0][][] */ 58,-9,-31,-51,71,-5,-3,19,-8,15,15,127,-6,-41,19,-16, 
  /* [487][0][][] */ -86,26,115,31,92,107,11,85,-36,127,-70,-29,-44,58,-77,-58, 
  /* [488][0][][] */ -29,23,-35,-86,35,-18,46,127,21,30,-8,47,43,44,26,28, 
  /* [489][0][][] */ 38,-37,112,-60,-107,81,16,-58,-29,3,-45,-82,89,-127,31,47, 
  /* [490][0][][] */ -78,-73,-127,25,94,122,36,-62,-12,36,-17,-50,66,-37,11,-77, 
  /* [491][0][][] */ -1,-5,-12,-103,23,-10,49,15,-10,113,-11,49,38,-13,13,-127, 
  /* [492][0][][] */ 26,41,-47,90,22,45,52,-127,19,-38,-12,-5,44,16,122,5, 
  /* [493][0][][] */ -5,3,-8,77,15,-56,-45,-46,64,15,7,-50,47,-127,1,-74, 
  /* [494][0][][] */ 12,-23,81,50,68,127,-3,53,85,-9,-33,-3,-68,-74,-83,-89, 
  /* [495][0][][] */ -108,79,45,-1,-1,-32,82,127,-14,73,122,51,24,43,5,58, 
  /* [496][0][][] */ -8,-29,-48,70,-86,127,50,26,-23,-53,41,84,-10,-85,90,65, 
  /* [497][0][][] */ 23,37,-12,-76,-16,-33,-87,-73,127,-68,-27,10,21,-23,-57,29, 
  /* [498][0][][] */ 1,-15,-11,-2,-23,42,96,-18,58,127,-18,-2,44,36,-3,-51, 
  /* [499][0][][] */ 18,-34,-39,-42,72,-55,-8,-34,-107,-32,6,-21,-127,-121,-22,35, 
  /* [500][0][][] */ 52,73,46,-74,53,-28,29,68,-127,39,101,39,-63,56,-43,-85, 
  /* [501][0][][] */ 51,-81,-14,-66,8,-127,58,13,30,-80,-20,31,20,55,8,29, 
  /* [502][0][][] */ 8,127,5,-8,9,-22,-50,104,-55,51,38,123,-6,-78,-51,-57, 
  /* [503][0][][] */ -6,-127,64,-74,-26,-62,80,-33,-15,15,-77,16,-5,57,83,34, 
  /* [504][0][][] */ 49,-24,-15,9,39,-6,-3,-127,57,-36,-12,-19,43,-26,-21,-23, 
  /* [505][0][][] */ -18,9,29,-93,19,-36,-6,-41,-42,111,-62,6,-9,-9,-57,-127, 
  /* [506][0][][] */ -86,-89,26,-19,-93,82,5,1,-42,-42,127,38,-75,100,49,5, 
  /* [507][0][][] */ -70,-35,-2,85,57,-2,-39,46,-64,76,66,13,-11,30,44,-127, 
  /* [508][0][][] */ 24,-39,-60,-48,87,-1,-127,11,114,-39,27,-114,-29,-52,35,-10, 
  /* [509][0][][] */ -23,119,-34,61,64,24,-127,19,-109,8,34,24,-64,35,-90,13, 
  /* [510][0][][] */ 9,62,2,31,-44,47,-37,-64,104,-105,42,-127,90,-22,7,-9, 
  /* [511][0][][] */ -16,-127,74,22,10,-17,75,27,21,-30,5,-79,82,37,34,-26, 
  /* [512][0][][] */ 36,-100,68,-33,-51,57,110,-14,79,-127,-43,-63,-94,-6,-18,26, 
  /* [513][0][][] */ 29,45,26,-59,54,75,-2,-23,59,-62,21,-89,8,-3,-127,-65, 
  /* [514][0][][] */ 64,4,39,12,-58,89,44,-27,101,-84,1,-83,46,37,127,-36, 
  /* [515][0][][] */ 56,-68,-90,-60,-60,-123,-127,-38,23,-18,59,-27,65,-6,26,62, 
  /* [516][0][][] */ 60,-51,127,104,-46,-11,-35,-3,-74,29,43,-18,26,34,3,-112, 
  /* [517][0][][] */ -21,104,51,-6,127,-24,-88,14,-75,0,-11,-17,-4,-64,-93,-2, 
  /* [518][0][][] */ -15,4,-78,27,-1,96,100,7,-26,-82,34,127,5,-99,-44,26, 
  /* [519][0][][] */ -54,-86,-24,5,16,96,127,31,122,1,-15,-16,-51,62,-63,-35, 
  /* [520][0][][] */ 102,-46,-36,-95,1,33,48,-11,-81,0,-73,-84,76,127,-14,-110, 
  /* [521][0][][] */ -127,-54,64,-25,2,52,-19,-22,117,35,-20,-39,28,-27,57,6, 
  /* [522][0][][] */ -9,31,42,12,101,-39,77,127,26,4,-31,-37,69,-49,19,-58, 
  /* [523][0][][] */ 73,-19,-2,-124,68,127,-36,23,-58,-1,29,-31,-15,-55,16,1, 
  /* [524][0][][] */ 20,-21,38,-127,46,-62,-58,-36,24,-21,-20,8,121,42,-60,-14, 
  /* [525][0][][] */ -73,-6,3,-103,0,-123,-80,45,25,69,127,56,29,42,-72,116, 
  /* [526][0][][] */ -100,-4,-42,29,28,-53,0,-77,4,127,11,-9,107,-75,68,-42, 
  /* [527][0][][] */ -19,1,51,-89,-1,60,-61,-1,-26,33,127,92,-5,91,-70,12, 
  /* [528][0][][] */ -47,30,45,14,-25,-22,127,-36,66,-33,38,37,-45,-82,7,-90, 
  /* [529][0][][] */ 69,74,7,-9,93,-41,-127,11,18,11,51,16,-23,16,-23,26, 
  /* [530][0][][] */ 127,28,33,4,84,-67,-64,53,0,-9,-6,12,15,-6,7,-82, 
  /* [531][0][][] */ 29,52,-5,-33,-127,81,-37,-44,-49,-40,-5,14,55,46,-29,14, 
  /* [532][0][][] */ 66,-119,9,4,80,38,76,-79,-18,-13,40,-111,10,22,27,-127, 
  /* [533][0][][] */ -80,-52,-26,33,-84,22,-45,-117,-45,-50,-127,27,-81,-4,42,25, 
  /* [534][0][][] */ 73,-75,91,46,69,-46,127,62,2,-36,116,-49,-98,-37,56,-34, 
  /* [535][0][][] */ 9,-34,45,17,97,58,-64,-62,-8,-75,-29,40,34,127,-29,27, 
  /* [536][0][][] */ -39,-49,-45,57,102,32,127,58,-62,25,-55,-2,74,37,42,-10, 
  /* [537][0][][] */ -1,-16,-43,-94,-29,36,48,-59,7,41,78,-31,-43,-121,127,76, 
  /* [538][0][][] */ -22,10,56,-5,127,-37,-70,88,93,-24,-19,-51,25,-6,8,56, 
  /* [539][0][][] */ -48,-22,7,-40,10,127,-36,-108,0,-29,103,7,-35,96,6,84, 
  /* [540][0][][] */ -38,13,9,-43,87,52,-127,-83,13,3,-7,-34,124,125,13,13, 
  /* [541][0][][] */ -1,-20,-39,58,-100,-88,71,36,-62,49,-127,-4,105,-65,-28,-14, 
  /* [542][0][][] */ -95,23,46,-73,81,49,46,-102,10,-42,22,127,-25,-6,-20,105, 
  /* [543][0][][] */ 22,-39,47,-11,57,64,22,127,5,-54,84,-96,77,-122,12,26, 
  /* [544][0][][] */ 92,11,-3,-60,89,60,-95,-68,69,-37,8,-13,-101,-58,127,-6, 
  /* [545][0][][] */ -43,-127,7,-13,21,-47,-21,-37,-39,13,10,-24,43,-9,-69,7, 
  /* [546][0][][] */ 40,-59,-119,3,-26,-1,29,64,-127,48,-38,59,18,26,-21,9, 
  /* [547][0][][] */ -19,-7,-56,-57,66,-3,-3,5,12,-58,-6,127,-39,3,-33,15, 
  /* [548][0][][] */ 33,-89,-127,3,16,-1,1,42,58,124,-58,-16,-25,-9,53,38, 
  /* [549][0][][] */ -2,8,16,-33,127,-38,-1,29,-7,29,-79,18,-25,-8,16,-73, 
  /* [550][0][][] */ -28,-62,106,17,68,18,127,-13,54,-35,-92,69,119,-3,-42,-56, 
  /* [551][0][][] */ 42,-9,-58,69,-95,18,2,-17,127,-36,-18,-115,36,114,50,-84, 
  /* [552][0][][] */ 6,12,-3,19,14,24,127,-79,38,3,44,70,15,51,34,-69, 
  /* [553][0][][] */ 21,-115,-77,19,-24,-127,-21,-33,16,4,101,34,75,-23,52,32, 
  /* [554][0][][] */ 127,-62,5,-28,-116,6,35,-74,-23,-22,62,8,32,59,13,48, 
  /* [555][0][][] */ 78,33,-7,-47,-49,-17,-1,88,94,-127,13,89,71,-25,118,-65, 
  /* [556][0][][] */ 30,-43,43,4,-70,-14,14,31,-121,-5,16,11,-24,17,14,127, 
  /* [557][0][][] */ -69,54,-5,16,88,-7,49,127,31,-4,65,82,21,63,-6,-2, 
  /* [558][0][][] */ -24,-58,-44,-5,13,-24,-11,31,42,118,84,-61,-123,-23,127,-56, 
  /* [559][0][][] */ 8,-7,80,21,35,-25,-52,-4,29,85,127,-16,-22,-48,-16,-27, 
  /* [560][0][][] */ 27,9,-28,-70,-94,-53,26,97,35,-127,31,-30,-52,-11,67,18, 
  /* [561][0][][] */ 44,78,85,4,-64,-7,52,-90,6,93,-87,-17,5,-127,11,-13, 
  /* [562][0][][] */ 14,-97,4,-20,42,80,-127,-88,23,-36,38,-47,35,-29,-5,-28, 
  /* [563][0][][] */ -35,27,29,68,-43,-8,82,76,-62,99,6,99,-127,83,-31,23, 
  /* [564][0][][] */ 127,77,35,46,-31,-72,-5,-52,-119,103,-73,102,119,-32,37,27, 
  /* [565][0][][] */ -6,-127,-79,-69,107,-39,43,85,4,-4,-16,82,-28,-3,-92,31, 
  /* [566][0][][] */ -44,39,38,74,-8,-42,-127,62,99,-50,13,-56,82,1,25,-31, 
  /* [567][0][][] */ -62,-33,-18,62,-68,32,-58,-49,69,48,-98,-127,51,-68,72,-76, 
  /* [568][0][][] */ 11,118,1,-29,-79,-40,45,127,-18,-8,68,-13,-27,-11,-21,-28, 
  /* [569][0][][] */ -12,7,56,-12,127,13,60,28,34,18,-88,-22,24,-104,0,-43, 
  /* [570][0][][] */ 127,95,23,-47,55,89,83,14,-96,-75,-27,33,-35,37,57,107, 
  /* [571][0][][] */ 60,111,105,-1,-28,2,36,28,-87,-96,-127,-105,-68,-10,-55,80, 
  /* [572][0][][] */ -48,2,-21,-73,20,50,-47,-51,127,9,40,-80,-55,-48,-59,-16, 
  /* [573][0][][] */ 104,-11,88,17,-18,127,-4,-40,40,80,88,-72,69,-55,-17,-38, 
  /* [574][0][][] */ 33,68,6,64,121,9,-5,-42,16,-55,127,-84,74,-27,95,7, 
  /* [575][0][][] */ -92,-6,70,64,-39,-59,80,13,2,-11,24,-127,13,-6,-10,-85, 
  /* [576][0][][] */ 30,20,-65,32,38,-47,-24,-11,-64,-26,-127,36,-48,8,42,-8, 
  /* [577][0][][] */ -31,16,-41,-56,29,-35,-101,-23,-6,82,19,29,84,127,-7,-64, 
  /* [578][0][][] */ -74,-99,12,127,108,-77,-64,-46,119,-6,-2,-121,-112,16,55,-101, 
  /* [579][0][][] */ -11,52,88,-54,-9,-4,25,107,-4,-127,44,-36,-7,-45,-59,57, 
  /* [580][0][][] */ -35,29,25,34,0,-86,-82,31,-14,93,73,-43,-2,41,108,127, 
  /* [581][0][][] */ 127,-10,93,40,102,13,-100,-98,73,65,2,57,-122,34,17,-4, 
  /* [582][0][][] */ 11,-71,36,86,35,89,-14,7,19,-127,-55,-75,30,48,56,-30, 
  /* [583][0][][] */ -7,-25,-36,54,-15,-38,-52,-71,-6,16,41,-18,-127,-55,-62,-56, 
  /* [584][0][][] */ 9,-16,-32,-69,73,-31,-127,-115,65,93,38,49,-33,46,-2,45, 
  /* [585][0][][] */ 57,-17,45,-25,55,-55,9,91,-3,22,-67,6,55,-127,-36,-35, 
  /* [586][0][][] */ -58,-127,110,108,-44,8,37,13,109,61,123,1,97,48,87,118, 
  /* [587][0][][] */ 6,-28,-51,-43,-127,15,-2,5,-8,87,-4,42,24,-93,11,3, 
  /* [588][0][][] */ 38,24,-50,-27,-14,53,-118,-51,2,-8,127,-54,-67,-63,-72,-42, 
  /* [589][0][][] */ -108,-9,35,-17,-4,-22,13,-44,127,-49,115,-28,79,32,-35,31, 
  /* [590][0][][] */ -127,-4,-31,29,-52,50,44,-81,44,-63,39,6,99,64,59,50, 
  /* [591][0][][] */ 62,-22,-97,50,34,106,-127,34,3,-64,10,-47,-59,21,-67,-44, 
  /* [592][0][][] */ 14,127,-15,-32,-4,80,-16,57,-59,52,35,33,33,-14,85,-28, 
  /* [593][0][][] */ 20,-61,30,-50,-29,31,70,-32,7,-127,-27,-35,-57,-13,10,121, 
  /* [594][0][][] */ 34,-51,-22,-4,82,-38,-5,-127,66,-37,4,-19,5,48,99,-9, 
  /* [595][0][][] */ -15,-102,-38,-79,-55,34,-6,48,15,34,127,6,-103,28,-29,-1, 
  /* [596][0][][] */ 47,-72,-10,18,103,13,45,15,100,-27,25,-43,4,127,-79,-79, 
  /* [597][0][][] */ -83,-70,47,-61,44,-70,60,118,21,50,29,127,-20,-23,-36,83, 
  /* [598][0][][] */ -1,-18,-43,36,-96,61,-24,2,-51,-23,40,-105,17,-127,72,84, 
  /* [599][0][][] */ 6,-126,79,82,-14,-35,44,74,-97,127,27,60,109,-37,-50,38, 
  /* [600][0][][] */ 10,-8,-1,50,127,41,-88,-50,1,-37,-23,-125,2,-88,6,-58, 
  /* [601][0][][] */ 61,62,-35,-85,-55,73,84,90,127,80,0,-47,89,-22,38,-1, 
  /* [602][0][][] */ 18,-15,4,18,96,1,-60,106,-9,-43,-51,-75,127,-21,10,-105, 
  /* [603][0][][] */ -105,42,-72,-22,-94,25,-17,85,52,124,65,49,8,-27,-66,-127, 
  /* [604][0][][] */ 71,-23,-44,-27,-30,4,52,18,-72,13,22,0,43,-127,27,127, 
  /* [605][0][][] */ 55,58,55,-9,-71,127,48,1,-30,-39,0,-1,-26,86,37,22, 
  /* [606][0][][] */ -15,62,22,49,-51,-17,-45,-127,-6,106,-33,-66,-106,39,39,-14, 
  /* [607][0][][] */ -20,47,66,-95,54,19,127,-40,11,24,-68,71,-78,33,-35,-11, 
  /* [608][0][][] */ -63,-66,-50,49,27,92,127,85,104,39,16,-74,0,120,-33,43, 
  /* [609][0][][] */ -64,70,48,-79,22,7,-74,-9,75,71,0,18,-9,24,-127,-80, 
  /* [610][0][][] */ 15,-13,34,11,-6,56,25,55,27,-41,15,-28,82,-127,6,-25, 
  /* [611][0][][] */ -66,42,6,127,48,111,57,47,29,84,33,-4,112,-59,-20,-96, 
  /* [612][0][][] */ 70,73,127,-4,-26,-11,-26,-20,-94,20,-9,31,-30,-31,-21,-27, 
  /* [613][0][][] */ -64,38,64,37,0,49,121,127,60,-90,18,-57,-83,-12,39,54, 
  /* [614][0][][] */ -34,-70,-48,127,11,28,-29,-68,28,-22,24,-48,50,-23,-36,22, 
  /* [615][0][][] */ 42,80,-48,-23,68,-77,-20,86,127,-113,30,-2,63,5,0,-60, 
  /* [616][0][][] */ -57,53,-69,24,30,-39,50,109,127,27,-16,-66,-60,97,-17,-50, 
  /* [617][0][][] */ -13,89,-125,34,47,-56,113,28,42,122,74,127,24,5,91,17, 
  /* [618][0][][] */ -14,-16,48,21,7,37,75,40,127,-88,48,68,-50,33,11,97, 
  /* [619][0][][] */ 69,-21,-48,7,-25,4,53,46,-41,127,64,-31,77,11,52,-22, 
  /* [620][0][][] */ -61,12,32,-87,-66,127,-74,25,3,65,-62,-7,61,-88,-47,-8, 
  /* [621][0][][] */ -18,-44,20,-8,91,35,31,-50,17,-8,82,20,-39,-127,63,-54, 
  /* [622][0][][] */ -65,68,-112,112,-7,-127,-107,39,-14,99,-108,-54,-14,33,37,113, 
  /* [623][0][][] */ -24,30,28,-15,5,120,16,-60,99,-17,-31,-127,-100,43,9,62, 
  /* [624][0][][] */ -6,18,25,-38,62,-24,-43,-60,47,42,23,6,7,127,-2,-56, 
  /* [625][0][][] */ 88,31,51,20,127,-41,48,103,64,8,-90,54,-20,32,7,-113, 
  /* [626][0][][] */ 7,54,24,-21,-14,17,32,-13,-127,52,12,21,51,3,-46,-77, 
  /* [627][0][][] */ 28,-37,-100,-2,86,48,-63,-35,-127,-56,-7,98,88,0,81,-5, 
  /* [628][0][][] */ 6,127,-86,45,27,38,38,45,-107,37,33,38,35,48,-14,-42, 
  /* [629][0][][] */ 71,-75,-63,-48,-89,-25,127,112,-1,32,41,9,109,-27,72,11, 
  /* [630][0][][] */ 53,-15,-66,-26,93,-115,-10,-10,-34,76,127,7,76,-97,63,1, 
  /* [631][0][][] */ -53,23,-26,-62,27,3,127,-15,30,-13,-31,115,-22,-43,-20,-7, 
  /* [632][0][][] */ -49,-57,-7,57,-83,67,52,-127,-60,-18,88,105,99,19,44,23, 
  /* [633][0][][] */ 23,-94,-35,41,-81,-21,58,-41,-85,127,-18,-78,-32,4,13,-85, 
  /* [634][0][][] */ -23,-5,-30,-32,8,-24,-127,31,-20,-16,-26,21,10,-41,-40,34, 
  /* [635][0][][] */ 20,62,73,26,-60,-45,17,-79,12,127,-6,17,114,-79,15,-1, 
  /* [636][0][][] */ 75,40,3,26,76,127,-8,-89,2,-77,-34,9,93,14,73,-54, 
  /* [637][0][][] */ 28,-55,-16,2,-51,-53,-25,33,64,40,127,-24,-6,3,39,14, 
  /* [638][0][][] */ 33,58,62,-56,-17,77,78,-57,13,-127,71,67,105,29,7,-11, 
  /* [639][0][][] */ 30,0,127,11,67,40,-46,7,22,7,-23,-3,71,-19,-7,-98, 
  /* [640][0][][] */ -68,-1,78,64,-17,108,-54,-63,-14,60,-127,-69,54,12,-72,-64, 
  /* [641][0][][] */ -40,0,51,-89,-23,17,-75,-45,-58,84,-39,127,34,-31,-8,106, 
  /* [642][0][][] */ 34,-21,38,-39,-24,-99,106,27,44,-127,69,95,49,10,102,-26, 
  /* [643][0][][] */ -127,5,32,-127,23,-38,111,-17,-10,20,-92,41,68,5,1,-61, 
  /* [644][0][][] */ -28,5,20,-89,-27,61,127,68,52,10,37,-6,86,89,-30,3, 
  /* [645][0][][] */ 28,17,84,50,-43,27,-104,0,15,-47,60,86,-41,5,-45,-127, 
  /* [646][0][][] */ -98,-36,-35,38,13,29,-12,44,127,73,92,-61,-11,42,19,3, 
  /* [647][0][][] */ -12,-14,31,79,-63,-127,15,-68,45,27,-1,5,-48,-17,121,-4, 
  /* [648][0][][] */ 27,8,83,-121,59,22,-27,-45,68,29,94,21,-47,11,41,-127, 
  /* [649][0][][] */ -92,121,30,93,-76,39,127,106,-66,-28,29,-34,58,-35,-1,-42, 
  /* [650][0][][] */ -19,-35,-5,-33,127,20,32,-33,10,-22,26,-12,17,-57,36,98, 
  /* [651][0][][] */ 45,42,-80,24,-64,118,77,31,52,-127,49,13,46,5,-59,-52, 
  /* [652][0][][] */ -14,69,7,-22,27,-39,-42,-23,56,-24,11,5,-25,-41,-6,-127, 
  /* [653][0][][] */ 9,-71,61,-43,-5,66,-71,30,75,9,71,-127,-64,12,-20,-72, 
  /* [654][0][][] */ 94,45,22,52,-40,40,86,-127,4,-124,-44,41,-45,-113,-38,-92, 
  /* [655][0][][] */ 24,3,-19,36,17,-29,50,47,53,-15,127,35,14,-20,-6,-1, 
  /* [656][0][][] */ 127,-10,-18,10,25,2,85,56,121,-29,-13,-21,26,2,-53,-57, 
  /* [657][0][][] */ -50,-53,127,126,109,-49,43,20,-6,65,-35,44,-27,40,-50,-41, 
  /* [658][0][][] */ -68,-26,30,-86,-30,-17,-127,9,117,67,-40,-94,-63,6,-67,-52, 
  /* [659][0][][] */ 106,-84,-59,89,72,-34,-84,-25,116,127,-105,-61,-91,22,-7,5, 
  /* [660][0][][] */ 127,30,-32,-14,-6,41,-19,-51,-41,-4,-33,-2,-4,-8,-70,6, 
  /* [661][0][][] */ -50,46,12,-127,63,73,83,-73,-17,-96,13,112,22,14,-8,124, 
  /* [662][0][][] */ -25,-53,-12,45,-25,-64,34,87,-71,-31,-45,-30,50,127,-101,77, 
  /* [663][0][][] */ 16,-3,40,43,60,-27,-55,-71,17,-73,-94,-16,127,-7,2,-119, 
  /* [664][0][][] */ 3,-24,2,-55,2,28,-15,51,37,34,56,-54,86,26,-4,127, 
  /* [665][0][][] */ -14,40,63,0,-14,-110,106,124,-74,26,109,-127,-102,2,50,5, 
  /* [666][0][][] */ 48,30,127,-8,-20,-5,30,5,-82,14,0,12,71,-19,49,-122, 
  /* [667][0][][] */ 45,19,-93,-127,-59,-116,43,73,75,5,-69,59,8,10,47,54, 
  /* [668][0][][] */ -29,-54,-30,-33,-36,32,-30,-74,-33,81,28,-95,-127,30,104,16, 
  /* [669][0][][] */ 32,1,103,21,42,-58,125,-101,-69,66,4,-13,-110,-49,127,-37, 
  /* [670][0][][] */ 57,38,-49,-68,37,-23,-127,-26,8,7,-49,21,61,-2,31,4, 
  /* [671][0][][] */ -54,-3,36,67,104,14,98,68,9,38,-28,26,127,-73,77,-96, 
  /* [672][0][][] */ 0,-36,12,-127,-42,-22,2,9,-25,-16,23,-12,9,-74,39,106, 
  /* [673][0][][] */ -47,-112,13,-33,102,81,99,0,28,-26,-55,127,5,63,-95,39, 
  /* [674][0][][] */ 19,96,1,-15,30,-55,127,52,41,-84,34,13,29,5,32,16, 
  /* [675][0][][] */ -4,-19,65,-93,-8,-21,-117,-61,118,69,103,102,-114,34,-127,-90, 
  /* [676][0][][] */ -15,-42,43,24,52,35,-24,-127,11,69,-41,-66,-47,-5,-109,62, 
  /* [677][0][][] */ 42,-49,-50,-56,-8,-59,-13,45,-36,3,1,-5,1,6,-127,-11, 
  /* [678][0][][] */ 127,-4,116,-72,34,-15,122,41,-124,-77,-104,8,-45,52,30,-91, 
  /* [679][0][][] */ 40,-3,20,67,-58,-37,-73,14,-29,62,-3,17,-127,19,35,97, 
  /* [680][0][][] */ -82,-20,-127,-87,82,-44,40,23,-30,103,-78,-25,-33,9,-126,108, 
  /* [681][0][][] */ -94,20,-16,-26,85,114,-49,38,58,33,127,10,73,-67,-23,-72, 
  /* [682][0][][] */ -10,-30,13,-27,62,9,34,33,55,57,118,11,1,-127,-58,92, 
  /* [683][0][][] */ 80,37,-54,-37,127,-20,-122,-35,56,85,-16,36,-11,48,-88,-86, 
  /* [684][0][][] */ -82,-36,-73,-60,-97,-89,19,127,-27,14,-40,-39,-38,-1,0,56, 
  /* [685][0][][] */ -61,7,9,-33,-21,43,-13,-75,-93,36,-6,4,-17,-127,-6,48, 
  /* [686][0][][] */ 74,22,120,-92,-22,22,-18,62,53,127,39,-53,-38,-40,47,83, 
  /* [687][0][][] */ -3,6,29,-16,15,95,127,-16,38,-27,-67,-66,96,-83,0,-88, 
  /* [688][0][][] */ 59,9,53,122,-125,-52,-14,-55,57,-6,-31,45,127,28,-24,-79, 
  /* [689][0][][] */ -111,-127,20,61,-46,-56,63,-53,33,-31,59,13,24,22,79,-37, 
  /* [690][0][][] */ -25,-6,-39,127,50,-77,30,29,100,-9,-52,-25,93,29,77,-45, 
  /* [691][0][][] */ 69,-59,-41,-14,97,0,59,104,-46,58,28,49,127,-34,-75,-84, 
  /* [692][0][][] */ -70,-25,-26,-85,48,-120,-44,-116,99,60,10,17,95,127,-1,-60, 
  /* [693][0][][] */ -100,-75,-75,-18,3,-23,127,-9,114,67,18,59,46,-30,14,-75, 
  /* [694][0][][] */ 117,-59,-53,-102,-77,-97,-35,-78,4,-8,36,29,52,4,127,68, 
  /* [695][0][][] */ -127,-26,-31,6,-55,94,3,-60,-118,85,43,0,26,-91,21,36, 
  /* [696][0][][] */ 5,9,-6,1,26,13,-12,-69,-26,25,-27,11,63,-102,13,-127, 
  /* [697][0][][] */ -38,11,-22,8,-13,6,11,18,2,48,-79,-19,-81,12,-127,-20, 
  /* [698][0][][] */ -1,127,-37,-38,-39,8,24,53,-99,-58,-63,53,-8,-57,-96,30, 
  /* [699][0][][] */ 48,21,-86,127,37,-105,-19,76,53,57,27,-70,-72,-40,0,22, 
  /* [700][0][][] */ 89,-41,9,-48,-94,49,127,28,-45,-63,13,77,120,19,-34,13, 
  /* [701][0][][] */ 55,-95,103,56,61,70,60,-62,-5,15,127,-90,-120,107,-110,-34, 
  /* [702][0][][] */ 127,-25,-3,-78,46,-86,-13,-11,47,41,69,73,59,-25,-16,-21, 
  /* [703][0][][] */ -17,-127,10,53,9,-16,59,97,-2,21,-66,-17,35,34,-34,89, 
  /* [704][0][][] */ -32,-89,40,127,69,-2,117,123,6,71,40,-41,28,107,119,15, 
  /* [705][0][][] */ -35,14,113,-22,52,-32,122,25,-62,15,18,74,127,52,30,42, 
  /* [706][0][][] */ -2,-73,9,-9,12,48,-66,-38,-14,91,69,-95,5,-127,62,55, 
  /* [707][0][][] */ 83,-34,94,-20,-127,-51,-10,-5,67,-43,30,-98,18,-2,3,-6, 
  /* [708][0][][] */ -22,78,-96,49,-101,-39,12,-41,64,-127,-1,31,59,81,-69,69, 
  /* [709][0][][] */ 1,-9,-92,-122,65,-59,110,-39,49,30,-71,37,123,34,-23,-127, 
  /* [710][0][][] */ 43,30,12,-50,-39,127,27,-28,-63,14,40,-56,-44,53,-53,48, 
  /* [711][0][][] */ 117,-64,-110,-127,91,86,1,70,-1,37,94,18,-43,17,-47,-2, 
  /* [712][0][][] */ 66,32,-62,35,36,2,-127,-1,-2,-59,34,-40,-68,-8,-70,-70, 
  /* [713][0][][] */ -90,-44,13,-51,127,-28,37,-22,14,2,15,34,72,-33,27,43, 
  /* [714][0][][] */ 5,-37,-127,-3,75,-19,51,-7,17,32,-26,35,0,-123,16,-32, 
  /* [715][0][][] */ -78,-6,-7,-51,-55,59,-54,-33,127,26,77,-60,84,74,-20,93, 
  /* [716][0][][] */ -32,63,-127,23,93,-71,50,5,-62,17,48,92,50,-79,70,-100, 
  /* [717][0][][] */ -20,38,40,127,111,-38,68,40,8,54,90,-6,-52,37,9,-38, 
  /* [718][0][][] */ -75,19,35,24,21,33,-100,-19,49,108,-78,-124,42,127,0,-49, 
  /* [719][0][][] */ -44,70,50,-10,3,-26,-57,-12,-99,127,61,40,-33,-46,33,20, 
  /* [720][0][][] */ -17,119,-53,51,-22,-14,-11,-31,19,40,42,127,-46,11,54,34, 
  /* [721][0][][] */ 66,-72,26,-35,-87,41,51,95,72,-39,127,18,-50,12,-5,-34, 
  /* [722][0][][] */ 12,-62,-78,-23,58,127,91,32,-39,57,114,69,72,18,8,-115, 
  /* [723][0][][] */ 14,-7,49,79,50,-61,105,66,-68,-127,40,-66,-25,-76,32,-2, 
  /* [724][0][][] */ -17,66,7,41,-18,-85,40,1,17,127,-72,-22,-44,-12,84,32, 
  /* [725][0][][] */ -44,21,-15,-12,36,-46,19,-1,10,-27,11,34,-10,127,4,-50, 
  /* [726][0][][] */ 54,116,41,-50,-45,10,-56,59,-82,127,45,-63,-44,-23,-80,-67, 
  /* [727][0][][] */ 22,50,81,13,70,71,-20,-13,-16,-29,-20,-27,32,-12,40,127, 
  /* [728][0][][] */ -64,-29,64,13,-34,25,61,-20,-27,47,-13,-17,127,-28,82,12, 
  /* [729][0][][] */ 18,-113,78,50,-72,28,47,-61,42,112,44,-43,127,20,31,-125, 
  /* [730][0][][] */ -25,-87,-63,57,-71,23,-118,37,-89,69,-21,-107,127,-88,75,108, 
  /* [731][0][][] */ -127,-4,-44,-90,101,5,-66,77,46,-58,32,-65,36,53,62,-106, 
  /* [732][0][][] */ 100,-32,-90,127,93,11,-4,42,52,-31,-100,85,82,-88,-94,-34, 
  /* [733][0][][] */ -7,39,11,-21,-12,35,112,52,-9,-15,-67,75,-77,-127,14,7, 
  /* [734][0][][] */ 127,-19,40,-67,6,-7,47,-6,-5,80,6,28,-66,109,-47,57, 
  /* [735][0][][] */ -79,60,-54,-62,11,103,13,127,29,13,82,-24,-47,-46,-73,48, 
  /* [736][0][][] */ 24,127,11,38,2,64,50,114,121,-17,118,-35,114,93,75,27, 
  /* [737][0][][] */ 112,8,2,-37,-89,62,127,18,-70,70,82,-7,19,-11,-27,-76, 
  /* [738][0][][] */ -54,-43,2,64,-18,-46,-46,-17,43,33,20,42,93,111,127,-37, 
  /* [739][0][][] */ 65,-44,-26,-38,-54,-46,14,67,127,38,126,-2,-58,77,14,110, 
  /* [740][0][][] */ 46,51,-120,-54,-126,58,83,17,-40,47,-66,127,-49,-39,26,-16, 
  /* [741][0][][] */ 127,41,-9,-16,-69,114,-76,55,93,-22,7,119,72,112,-57,29, 
  /* [742][0][][] */ -76,17,50,-43,88,118,-22,-26,-73,-127,-95,64,64,-3,-70,-43, 
  /* [743][0][][] */ 0,-21,-57,-75,-53,127,76,-96,-24,-49,-124,24,20,-14,-45,-9, 
  /* [744][0][][] */ -23,-14,-26,-37,60,-42,72,13,44,0,-127,-19,-85,-55,7,0, 
  /* [745][0][][] */ -11,-38,53,-32,-65,-127,-37,61,-41,42,-72,-39,3,10,20,-18, 
  /* [746][0][][] */ 127,-104,15,22,-50,8,85,-14,22,68,1,-73,28,46,33,-109, 
  /* [747][0][][] */ -28,2,46,-72,27,50,-9,-82,-3,34,0,-11,38,-127,51,-74, 
  /* [748][0][][] */ -66,101,48,-106,122,22,123,-22,127,-16,-98,-31,106,-80,43,13, 
  /* [749][0][][] */ -54,36,-22,-127,27,41,62,43,44,13,-12,27,81,11,-41,69, 
  /* [750][0][][] */ -1,19,5,22,1,27,41,-34,-75,-127,59,-1,77,-17,-76,45, 
  /* [751][0][][] */ -32,2,47,-5,108,-53,127,-28,72,48,-16,13,-24,101,-67,-81, 
  /* [752][0][][] */ 3,56,6,50,62,70,-118,-127,-18,47,108,32,77,-5,-119,-89, 
  /* [753][0][][] */ 26,-123,-34,54,-65,-13,-86,19,-32,42,52,-123,109,-61,117,127, 
  /* [754][0][][] */ -5,-33,0,-32,9,-4,-12,39,-66,52,-71,18,-2,-14,-127,28, 
  /* [755][0][][] */ 126,-67,-6,48,5,-55,-12,-32,127,-63,108,-112,71,84,75,-63, 
  /* [756][0][][] */ 99,-15,41,12,119,-65,-59,127,-6,35,13,21,89,44,71,100, 
  /* [757][0][][] */ 29,-82,19,23,-78,79,-53,-127,87,-26,82,-46,50,-28,100,21, 
  /* [758][0][][] */ 20,64,-19,52,45,3,-31,127,-56,-61,14,20,68,-122,-39,13, 
  /* [759][0][][] */ 10,-11,-49,-78,-33,11,33,8,34,74,13,-15,39,-32,127,-26, 
  /* [760][0][][] */ 86,-20,49,16,18,-116,-127,59,-8,59,-30,-50,-26,-81,20,44, 
  /* [761][0][][] */ 21,-18,-101,-6,-108,-22,-36,-97,-127,-25,1,34,-6,-98,-6,42, 
  /* [762][0][][] */ -9,-2,-62,-2,26,-113,-15,14,-39,69,13,55,100,-25,70,-127, 
  /* [763][0][][] */ 114,-106,-53,22,60,35,-37,12,34,-49,50,-74,34,-52,-8,-127, 
  /* [764][0][][] */ -23,46,-19,-49,31,2,16,42,-15,30,-17,34,127,-3,-9,-95, 
  /* [765][0][][] */ -29,23,-6,86,-17,4,96,56,3,35,89,-30,33,-67,127,47, 
  /* [766][0][][] */ -70,-4,53,37,-51,-103,0,1,-32,113,23,-5,8,-69,72,-127, 
  /* [767][0][][] */ 57,41,3,36,27,90,-17,-72,28,95,-2,-97,15,-51,127,-82, 
  /* [768][0][][] */ -30,-126,-41,21,76,63,23,127,23,-67,-43,-9,-34,13,-85,-46, 
  /* [769][0][][] */ -69,22,10,-44,13,17,127,-71,114,8,58,96,-14,95,-31,3, 
  /* [770][0][][] */ -74,11,42,-39,-101,127,122,62,17,-118,-41,21,42,-27,38,-21, 
  /* [771][0][][] */ 9,-86,114,-62,23,-72,47,16,68,78,-92,127,-110,-2,51,27, 
  /* [772][0][][] */ -26,-61,52,-47,-60,-66,11,-127,0,-25,-23,-25,54,-11,70,32, 
  /* [773][0][][] */ 111,-65,-127,60,115,73,-60,48,-8,-105,-47,-107,66,98,9,68, 
  /* [774][0][][] */ 23,-127,-27,45,22,6,23,-23,6,32,28,15,-5,30,57,-10, 
  /* [775][0][][] */ -40,0,58,-39,-96,-27,38,127,10,-28,-17,-12,-55,-39,-39,68, 
  /* [776][0][][] */ 49,-41,47,-12,30,-116,75,40,-32,-42,-6,-27,74,11,127,-10, 
  /* [777][0][][] */ -21,74,-69,-9,65,19,-12,81,127,-23,0,-56,119,91,-10,-47, 
  /* [778][0][][] */ 92,0,-42,-20,-18,-65,55,127,25,-73,122,33,-3,36,59,-2, 
  /* [779][0][][] */ -26,-7,29,20,6,68,105,-100,-40,-79,15,90,14,70,55,127, 
  /* [780][0][][] */ -53,-111,-16,76,-20,59,16,-19,73,27,100,-118,74,24,127,34, 
  /* [781][0][][] */ 109,-39,115,29,115,89,-15,55,-127,12,94,112,-84,-47,-58,52, 
  /* [782][0][][] */ -39,41,68,-17,81,-19,127,21,-21,-30,-47,6,7,5,-3,-37, 
  /* [783][0][][] */ -127,-3,-16,-68,78,-12,0,31,-5,103,-44,-6,-94,-22,-81,64, 
  /* [784][0][][] */ -26,-1,1,-25,-14,39,127,51,-80,43,21,32,-24,-38,-43,-108, 
  /* [785][0][][] */ 127,-17,23,48,42,37,-36,10,23,43,-25,-37,52,36,-21,-17, 
  /* [786][0][][] */ -32,49,17,-34,22,70,58,-41,48,-51,21,22,-71,50,27,127, 
  /* [787][0][][] */ -21,-20,83,-17,35,-127,48,-58,-24,31,12,-22,6,23,48,-31, 
  /* [788][0][][] */ 90,127,17,6,10,57,-73,77,-1,-101,-109,-25,16,8,36,-31, 
  /* [789][0][][] */ -5,-31,18,82,40,-21,-20,30,-12,-75,4,30,127,20,-5,4, 
  /* [790][0][][] */ -56,-15,-26,12,-11,0,-60,-4,122,-13,-127,44,-50,-57,-72,35, 
  /* [791][0][][] */ 56,16,-27,35,54,127,-56,56,80,54,40,55,15,32,-57,-106, 
  /* [792][0][][] */ 9,-63,-79,13,-52,-11,76,-25,127,-55,-41,-20,37,0,71,-6, 
  /* [793][0][][] */ -22,-127,92,10,13,91,117,36,52,-28,90,-11,61,106,-68,42, 
  /* [794][0][][] */ 36,48,62,75,-49,-31,-20,108,13,-100,72,-127,27,115,23,-51, 
  /* [795][0][][] */ -18,-70,5,-8,-47,79,-55,-57,-42,-19,66,-127,87,13,15,33, 
  /* [796][0][][] */ 26,-107,-46,16,21,-127,41,10,-95,47,-10,3,-59,4,-29,-1, 
  /* [797][0][][] */ -57,-31,37,-29,-32,127,-86,6,7,71,19,-71,75,-117,36,21, 
  /* [798][0][][] */ -68,-48,117,-79,83,-69,-2,-37,111,28,-16,26,37,-33,127,26, 
  /* [799][0][][] */ 35,6,-38,3,11,-12,22,-87,53,20,48,22,26,26,127,4, 
  /* [800][0][][] */ -36,-43,-34,98,-12,18,-18,-122,30,34,-20,5,9,-8,9,-127, 
  /* [801][0][][] */ 49,-58,20,-18,-3,-77,0,-25,-42,-54,-35,87,-52,-15,-15,127, 
  /* [802][0][][] */ -53,-15,9,-57,39,-3,-23,44,-127,36,-5,-74,7,38,58,-93, 
  /* [803][0][][] */ 44,-43,16,3,-6,69,-73,-123,-26,36,11,-43,-127,29,70,122, 
  /* [804][0][][] */ 17,106,79,-74,47,15,-13,-2,-18,54,-56,-127,-26,-67,76,11, 
  /* [805][0][][] */ 1,18,38,-106,13,-24,127,6,80,-73,-16,102,-59,-15,-21,124, 
  /* [806][0][][] */ 40,-25,-9,-127,-6,119,-72,78,-25,-1,-19,-41,-8,-93,-50,63, 
  /* [807][0][][] */ -9,53,-56,32,-54,-10,127,-91,-81,83,32,62,46,99,10,30, 
  /* [808][0][][] */ -82,127,-57,-36,-27,-23,-10,26,117,-2,71,-2,-38,35,62,-19, 
  /* [809][0][][] */ -68,-59,-66,-65,23,92,-71,97,40,-68,127,-108,-31,37,-85,21, 
  /* [810][0][][] */ 3,-109,-30,15,-6,-55,127,25,-15,-43,-5,39,6,7,89,26, 
  /* [811][0][][] */ -7,-17,7,68,68,22,58,-20,-127,39,-3,7,-16,-89,-63,-26, 
  /* [812][0][][] */ 49,-73,-127,35,-18,4,35,-86,21,-34,106,89,-1,-79,61,36, 
  /* [813][0][][] */ -9,-40,-127,-45,-53,1,42,-37,72,34,10,-27,102,28,-17,-91, 
  /* [814][0][][] */ -20,15,-8,1,-12,17,20,-66,-3,-43,-7,71,127,47,-2,30, 
  /* [815][0][][] */ -127,28,-69,-70,78,12,-29,-66,-17,44,39,127,98,-11,-63,42, 
  /* [816][0][][] */ -22,39,-16,1,77,-50,-115,43,34,-43,14,58,66,-12,-127,50, 
  /* [817][0][][] */ 49,9,-127,-115,-2,-63,-14,-1,85,22,85,18,83,84,-37,-52, 
  /* [818][0][][] */ -18,14,-28,103,18,24,127,0,38,42,-97,-45,-20,-12,-5,-13, 
  /* [819][0][][] */ 23,37,99,-65,-2,9,22,-7,5,7,48,8,127,-24,-47,-95, 
  /* [820][0][][] */ -75,28,75,70,54,89,13,-127,35,10,-13,3,5,-66,21,-9, 
  /* [821][0][][] */ 15,27,82,-41,76,-22,29,1,8,93,127,97,55,-19,-19,-56, 
  /* [822][0][][] */ 50,44,-56,-1,58,91,-127,-65,-40,9,56,20,10,-29,38,-70, 
  /* [823][0][][] */ 54,-22,11,73,8,-59,59,-23,127,-9,10,-4,-29,71,19,-66, 
  /* [824][0][][] */ -91,8,-10,3,-120,42,15,-127,-22,-62,-50,-14,-10,-46,110,31, 
  /* [825][0][][] */ -40,-9,-105,-15,-99,2,-30,-14,125,19,4,-1,127,58,16,-34, 
  /* [826][0][][] */ -78,-10,-24,-9,-80,91,-39,-72,-127,46,-22,24,89,52,77,47, 
  /* [827][0][][] */ 33,99,71,1,75,127,-55,-6,-48,32,-46,-26,17,-50,-33,-20, 
  /* [828][0][][] */ 26,-4,127,-38,-73,60,73,62,10,58,5,-94,-9,16,22,19, 
  /* [829][0][][] */ -71,-39,49,-84,-18,48,64,0,-20,43,67,74,65,-61,-127,-23, 
  /* [830][0][][] */ 110,42,14,28,39,127,1,112,-5,54,22,27,-25,-96,-61,-33, 
  /* [831][0][][] */ -50,52,24,77,-104,-24,3,-47,-3,17,-18,10,127,-19,60,19, 
  /* [832][0][][] */ 89,32,-22,-3,-20,127,30,-83,44,94,-47,59,14,28,-10,-94, 
  /* [833][0][][] */ -79,-66,-51,28,127,32,-112,55,35,98,-46,-19,33,-99,8,71, 
  /* [834][0][][] */ -14,127,-13,20,-39,31,-1,58,-6,58,32,-43,59,5,18,3, 
  /* [835][0][][] */ 115,-1,84,-83,9,1,-37,22,-100,-1,91,-127,-96,-65,3,-89, 
  /* [836][0][][] */ 29,-33,59,80,39,47,1,-80,50,-45,75,-127,-86,-15,-1,-93, 
  /* [837][0][][] */ -47,127,4,-79,-26,88,112,53,-24,3,48,-113,-35,-62,46,-18, 
  /* [838][0][][] */ -25,43,18,-127,28,-11,108,-89,-4,96,-18,69,11,0,-57,-61, 
  /* [839][0][][] */ -125,35,59,47,-76,38,79,-94,95,-5,12,1,-127,100,-27,44, 
  /* [840][0][][] */ 56,-8,127,72,123,-71,72,-60,9,-88,-70,43,-26,18,70,0, 
  /* [841][0][][] */ 86,54,-22,-127,50,-101,123,-24,21,4,-85,104,-115,10,-16,-88, 
  /* [842][0][][] */ -14,-4,-35,44,15,-21,-22,-33,-48,14,-87,21,7,40,-17,127, 
  /* [843][0][][] */ -111,29,38,-120,-73,36,-3,90,127,92,14,-50,-4,-46,-5,84, 
  /* [844][0][][] */ 76,-6,-58,48,36,-55,-49,23,49,-72,10,127,-25,-21,33,70, 
  /* [845][0][][] */ -22,-53,76,79,-61,-127,36,93,-4,89,-71,8,33,74,-111,70, 
  /* [846][0][][] */ -25,5,-9,127,-41,-47,58,63,34,78,31,-52,37,8,-79,-73, 
  /* [847][0][][] */ -127,61,-42,9,101,120,109,-20,107,40,-36,-43,58,47,50,69, 
  /* [848][0][][] */ 0,-37,-60,80,-127,87,-63,-10,-64,-13,60,-39,75,-3,48,88, 
  /* [849][0][][] */ 20,2,112,-8,39,75,46,10,127,-41,-12,-35,26,46,66,-37, 
  /* [850][0][][] */ 22,-42,-12,16,122,104,-7,13,89,-56,-32,-127,84,87,120,47, 
  /* [851][0][][] */ 13,-75,14,46,59,65,-33,-47,127,-59,58,32,-5,42,-4,-19, 
  /* [852][0][][] */ 42,0,16,-127,34,-101,-109,67,-19,70,15,-88,90,-62,-26,-4, 
  /* [853][0][][] */ -101,-97,21,-21,-127,0,42,50,1,38,43,-32,-29,14,-1,-80, 
  /* [854][0][][] */ 25,-4,-7,65,-76,-43,-80,12,63,127,50,-16,26,24,34,57, 
  /* [855][0][][] */ -90,-92,-36,86,-40,-5,127,16,29,50,-74,-103,-79,101,52,103, 
  /* [856][0][][] */ -111,53,25,-75,2,26,18,-80,-59,24,56,27,127,55,-41,-7, 
  /* [857][0][][] */ 95,20,37,-127,69,-43,49,98,81,-100,16,25,-69,-35,-94,-81, 
  /* [858][0][][] */ -53,-97,-48,-96,-43,94,89,-73,-55,72,36,-4,64,-127,35,70, 
  /* [859][0][][] */ -81,-41,-56,49,-102,46,-87,-32,127,-18,104,-36,-90,4,-32,-28, 
  /* [860][0][][] */ 82,119,26,-40,12,2,66,-55,12,38,34,28,7,127,40,12, 
  /* [861][0][][] */ -17,35,5,5,18,48,-127,-5,-70,22,-5,-20,10,106,-17,59, 
  /* [862][0][][] */ 14,-54,-98,1,64,0,15,61,127,15,32,18,-9,32,-5,-84, 
  /* [863][0][][] */ 62,51,-89,-47,46,-71,-22,-46,15,127,87,45,-123,-88,-22,-53, 
  /* [864][0][][] */ 31,8,-10,42,-85,-13,78,76,127,10,71,-77,60,-18,18,19, 
  /* [865][0][][] */ -42,-59,-74,-7,-9,35,81,-69,4,-10,-35,12,127,65,99,-49, 
  /* [866][0][][] */ -16,-15,7,31,63,15,127,21,-65,-79,-70,82,22,-21,-19,16, 
  /* [867][0][][] */ 11,5,1,127,88,36,-85,51,95,-15,82,22,-1,-50,-63,-75, 
  /* [868][0][][] */ -127,67,-51,23,1,81,-37,-21,-3,10,57,69,94,37,67,-93, 
  /* [869][0][][] */ -126,-55,-9,-35,3,-20,-75,-85,-52,2,51,52,97,-127,-54,86, 
  /* [870][0][][] */ -78,-127,-20,-28,38,1,57,-2,1,66,89,63,77,-100,-48,-39, 
  /* [871][0][][] */ -26,-15,7,5,28,-16,-4,21,0,101,-26,-40,127,-63,79,30, 
  /* [872][0][][] */ -29,-53,-44,0,5,-87,-24,-127,3,-47,42,54,64,24,-12,5, 
  /* [873][0][][] */ -16,29,39,53,50,47,91,-14,-79,24,-79,33,-46,-36,41,-127, 
  /* [874][0][][] */ 113,95,-42,4,17,-83,41,127,-22,-32,-26,41,27,-31,6,3, 
  /* [875][0][][] */ -127,20,15,18,93,-12,98,27,64,-80,-59,-37,18,-9,12,11, 
  /* [876][0][][] */ -19,-65,39,58,-64,-4,-114,27,127,-71,114,-118,-98,28,94,119, 
  /* [877][0][][] */ 127,-19,51,-11,67,-47,86,40,0,106,-8,7,-18,-18,-17,-77, 
  /* [878][0][][] */ 30,94,22,-13,20,29,-18,-120,-22,81,9,-88,-8,29,109,-127, 
  /* [879][0][][] */ 127,-87,0,121,-95,46,13,-25,-28,37,5,-78,74,75,81,-63, 
  /* [880][0][][] */ 70,-17,0,103,-44,-127,-30,63,42,3,-54,13,53,107,-33,-84, 
  /* [881][0][][] */ -46,6,97,-60,-49,58,-31,68,-70,-112,50,127,-24,6,-117,81, 
  /* [882][0][][] */ -77,78,64,-45,127,79,-109,26,32,77,21,37,51,-59,-43,-40, 
  /* [883][0][][] */ 16,23,0,-54,37,-45,68,-65,-15,51,-20,-127,19,18,-72,-31, 
  /* [884][0][][] */ 40,48,-20,-27,2,-12,-8,-29,9,44,-113,118,34,24,32,-127, 
  /* [885][0][][] */ -112,64,22,32,81,-127,-108,126,-28,-14,-109,55,6,-81,64,12, 
  /* [886][0][][] */ 36,-39,52,28,44,-97,65,16,57,127,-49,-66,39,-84,67,-125, 
  /* [887][0][][] */ -11,85,33,-2,76,-30,-39,-55,41,60,-25,57,-127,101,49,-2, 
  /* [888][0][][] */ 32,46,2,-2,-96,14,-31,45,2,-7,1,-23,-127,-4,-38,14, 
  /* [889][0][][] */ 69,8,14,8,-5,-70,-127,-30,42,-52,49,-56,62,74,52,-34, 
  /* [890][0][][] */ -40,34,-68,19,-17,57,-5,-127,-35,12,-69,4,-78,-40,11,13, 
  /* [891][0][][] */ -77,-35,43,4,53,44,12,-40,127,10,19,7,-14,-8,-48,-32, 
  /* [892][0][][] */ 9,11,19,64,48,-25,30,-50,-54,-13,93,-18,36,-55,34,-127, 
  /* [893][0][][] */ 37,-62,127,106,37,-41,-65,65,123,38,-14,-62,30,7,27,-94, 
  /* [894][0][][] */ 34,-39,13,-14,86,-112,-127,-101,-122,58,-71,-77,-37,-61,-82,-106, 
  /* [895][0][][] */ -2,45,58,-15,23,60,-121,-23,-42,-7,3,-52,14,71,14,-127, 
  /* [896][0][][] */ 0,-116,110,35,52,20,-44,24,-30,88,-39,-127,-104,-23,-92,-50, 
  /* [897][0][][] */ 36,-74,-49,-64,124,101,46,-20,-82,39,2,71,127,39,-16,61, 
  /* [898][0][][] */ -99,90,-62,-127,-62,16,18,46,-4,36,56,18,-20,-25,-16,-56, 
  /* [899][0][][] */ 60,-25,-15,-7,95,22,127,34,68,-12,-16,-24,63,-14,-26,-14, 
  /* [900][0][][] */ -15,23,-87,22,-127,12,80,-15,38,-3,-14,-44,-112,61,-27,1, 
  /* [901][0][][] */ 99,127,-48,-40,-12,105,-11,-88,57,-72,36,123,28,96,-83,-66, 
  /* [902][0][][] */ -127,9,45,-6,-14,15,78,-40,38,45,-36,13,68,61,89,-10, 
  /* [903][0][][] */ -43,14,-26,1,-32,17,-46,-42,-34,20,20,-9,127,-94,47,-45, 
  /* [904][0][][] */ -8,-43,-53,90,-90,1,86,-48,33,16,77,-4,-69,26,127,-5, 
  /* [905][0][][] */ -28,-105,85,-63,-4,44,127,-85,126,123,73,-108,-94,16,89,-19, 
  /* [906][0][][] */ -127,-36,-22,-28,10,-111,-10,76,7,-16,-59,57,34,-15,-108,-4, 
  /* [907][0][][] */ 78,35,75,117,-6,-5,77,-127,-25,31,15,111,90,86,35,51, 
  /* [908][0][][] */ 57,-15,36,-8,-80,107,115,33,25,-74,-23,127,44,112,-70,-2, 
  /* [909][0][][] */ 59,5,28,-29,74,29,75,77,115,-24,17,6,111,-54,-5,-127, 
  /* [910][0][][] */ -45,48,-48,-36,20,-4,-79,-118,33,17,-38,22,15,127,6,-19, 
  /* [911][0][][] */ -37,46,17,-44,27,54,28,101,-67,-64,5,-86,-127,-70,90,-111, 
  /* [912][0][][] */ -41,-46,-56,11,2,54,7,-127,104,59,-14,-103,31,66,82,5, 
  /* [913][0][][] */ -21,2,-48,127,-41,15,-49,-80,73,-18,22,61,-23,94,60,-45, 
  /* [914][0][][] */ 95,-54,127,-43,-46,54,83,41,42,61,-57,-8,8,44,-65,-88, 
  /* [915][0][][] */ 37,71,127,56,30,65,86,19,-41,-69,18,-25,-105,17,8,40, 
  /* [916][0][][] */ 52,-11,6,-69,40,-29,65,3,127,30,51,1,-35,6,44,-74, 
  /* [917][0][][] */ 38,5,-91,46,37,65,87,62,-13,-79,30,3,-127,89,55,-25, 
  /* [918][0][][] */ -33,-33,51,57,-31,-88,69,-18,127,113,6,-74,10,-95,57,33, 
  /* [919][0][][] */ -17,48,-25,-8,-14,-19,-127,-22,-19,-29,4,-32,65,-52,-24,66, 
  /* [920][0][][] */ -127,3,105,73,-84,-8,7,-85,35,-69,43,95,109,-7,-70,36, 
  /* [921][0][][] */ -84,-101,-6,27,92,-2,119,-84,23,125,127,11,-118,52,34,-95, 
  /* [922][0][][] */ 29,-2,-11,19,12,-127,-40,-81,-42,46,-68,-50,-21,7,32,-36, 
  /* [923][0][][] */ 80,62,-71,20,120,-94,-50,34,-8,71,-127,-3,12,-27,-22,-21, 
  /* [924][0][][] */ 95,-16,-7,90,-101,29,53,-40,-127,-25,63,5,-40,103,-110,-111, 
  /* [925][0][][] */ -36,-1,-20,3,127,-61,-72,-79,-10,14,32,34,87,-89,-12,-38, 
  /* [926][0][][] */ -6,-54,34,-32,-122,-9,-57,16,27,14,14,-83,56,127,-34,-7, 
  /* [927][0][][] */ 40,-58,-58,75,-82,55,-127,16,-14,-79,82,-30,53,9,32,97, 
  /* [928][0][][] */ 127,5,20,-5,32,-42,50,92,-64,36,-27,-40,-86,-8,-22,-58, 
  /* [929][0][][] */ 1,-127,-14,-65,-26,-19,52,79,15,-21,50,-50,-50,-78,-11,-49, 
  /* [930][0][][] */ -85,-43,-75,-16,-76,-84,-21,-127,29,58,16,-21,17,41,16,9, 
  /* [931][0][][] */ 22,-74,17,66,68,-76,-89,-127,9,-84,11,26,-6,-23,60,8, 
  /* [932][0][][] */ -9,-34,-68,87,-51,10,24,-26,-92,-14,24,-4,15,127,71,-25, 
  /* [933][0][][] */ 56,71,64,-56,-27,40,36,-43,60,15,-127,-29,31,34,17,-9, 
  /* [934][0][][] */ 63,-7,38,-52,127,-48,-65,-80,10,68,38,60,-35,26,-38,-23, 
  /* [935][0][][] */ 80,70,-32,-72,-50,-90,-58,10,-127,-12,-6,50,-59,16,-25,52, 
  /* [936][0][][] */ 111,78,22,-91,-70,-108,127,-17,93,-14,32,10,44,53,101,12, 
  /* [937][0][][] */ 72,-27,42,3,16,12,-100,-31,-61,12,-17,-82,-127,3,40,69, 
  /* [938][0][][] */ 51,42,30,66,-37,110,-127,66,53,-76,77,-41,7,39,-43,-6, 
  /* [939][0][][] */ 16,80,-127,52,-70,-65,-58,35,-71,-82,-15,103,71,10,-20,65, 
  /* [940][0][][] */ 127,-8,-24,16,40,-17,-32,65,80,15,7,-57,-5,65,18,-82, 
  /* [941][0][][] */ -10,-34,-69,35,22,-100,40,80,127,101,-74,-113,30,-5,4,-107, 
  /* [942][0][][] */ -11,2,58,13,-14,-5,-93,-19,-50,-20,-60,-22,113,127,0,-47, 
  /* [943][0][][] */ -37,2,-51,-36,-87,68,72,-93,66,21,-12,6,65,31,-127,-50, 
  /* [944][0][][] */ 127,-54,-48,-32,30,18,-13,-4,21,82,-58,-64,-23,-2,58,-3, 
  /* [945][0][][] */ 36,104,-36,-29,-58,-8,-2,-42,61,-51,-64,-12,-127,-79,46,43, 
  /* [946][0][][] */ -2,44,5,-3,127,78,61,-26,7,24,-48,123,29,-80,55,-97, 
  /* [947][0][][] */ 28,-74,-43,88,48,89,-10,41,-66,-4,127,43,-29,-69,14,19, 
  /* [948][0][][] */ -14,-127,-71,68,106,-92,-27,3,91,89,9,44,22,95,-112,9, 
  /* [949][0][][] */ -69,123,-40,28,-23,-50,68,-18,-33,-77,105,-127,-37,-104,95,123, 
  /* [950][0][][] */ 3,48,-59,-14,4,8,21,-27,34,-37,-2,127,13,5,-66,-6, 
  /* [951][0][][] */ -2,-100,109,54,-66,127,80,-2,-29,-25,-34,46,-8,-28,51,92, 
  /* [952][0][][] */ -24,29,127,-23,18,47,36,-46,51,-44,29,53,7,3,50,126, 
  /* [953][0][][] */ 62,52,16,-5,44,-36,17,58,96,-55,-59,8,21,83,-113,-127, 
  /* [954][0][][] */ -18,23,44,83,82,-88,28,-19,58,19,20,48,64,-34,-28,127, 
  /* [955][0][][] */ 110,-17,51,92,-127,25,51,43,51,-53,-90,123,14,17,105,60, 
  /* [956][0][][] */ 2,6,35,-87,10,23,96,19,28,-109,-15,5,-22,127,12,-10, 
  /* [957][0][][] */ 13,83,115,34,8,57,-89,-77,-127,-2,-24,-15,21,-112,100,-29, 
  /* [958][0][][] */ -2,-4,44,-87,17,93,-18,64,56,43,110,37,126,-108,95,127, 
  /* [959][0][][] */ -25,-94,23,126,6,114,127,-72,-31,-48,5,-36,-91,-21,-31,-14, 
  /* [960][0][][] */ 57,-56,105,-28,78,-8,37,-91,90,-127,57,69,-4,93,-42,109, 
  /* [961][0][][] */ 40,-70,77,-12,49,-127,-9,-67,38,4,28,-115,6,-15,-17,17, 
  /* [962][0][][] */ 93,-10,-63,-40,-67,-23,6,-35,36,-89,47,54,101,-11,99,127, 
  /* [963][0][][] */ 29,-4,-74,-83,8,-48,-107,29,23,-127,104,-18,15,-101,17,86, 
  /* [964][0][][] */ 117,4,-10,118,15,52,-120,-57,-127,-30,-49,67,-7,99,-125,-94, 
  /* [965][0][][] */ -21,-28,-95,-123,-127,121,-91,67,46,90,-8,-102,22,117,84,-83, 
  /* [966][0][][] */ -21,-67,52,-100,58,-11,127,4,32,116,6,-83,14,-57,82,-69, 
  /* [967][0][][] */ 91,2,42,-15,-51,43,39,-33,-45,-24,-6,20,-127,82,-6,-14, 
  /* [968][0][][] */ -127,7,8,-22,61,0,10,-50,-40,-7,-14,95,56,56,-32,16, 
  /* [969][0][][] */ -124,71,-27,42,86,127,-9,-66,-100,8,67,127,81,-36,49,-21, 
  /* [970][0][][] */ 25,-33,14,-26,40,79,-15,-65,29,127,-40,-62,-57,-46,-22,-4, 
  /* [971][0][][] */ -87,-17,-63,39,30,-83,43,-37,-4,-42,-52,127,90,-86,-2,-9, 
  /* [972][0][][] */ -5,-127,-67,-123,25,11,101,-2,-1,113,-26,-41,-98,64,93,112, 
  /* [973][0][][] */ 12,-17,-13,34,18,104,59,0,-10,97,125,-19,12,-127,35,-119, 
  /* [974][0][][] */ 92,47,-126,61,-127,35,93,-50,51,34,4,-77,20,26,114,24, 
  /* [975][0][][] */ -49,18,-22,49,73,-89,-127,-88,7,10,69,45,-3,65,-34,-5, 
  /* [976][0][][] */ 21,6,-54,-44,-34,-10,-58,-57,-95,98,-23,-74,41,-65,44,127, 
  /* [977][0][][] */ 3,-12,6,127,41,38,77,0,-1,-81,-6,23,-110,7,22,30, 
  /* [978][0][][] */ -24,15,-47,-35,70,53,-25,80,10,-31,100,-1,-49,-35,-37,-127, 
  /* [979][0][][] */ -45,-111,17,43,-30,-68,36,-42,29,127,62,-74,21,24,41,82, 
  /* [980][0][][] */ -33,-61,37,-127,-4,57,98,25,-121,-11,7,7,92,-76,40,-86, 
  /* [981][0][][] */ -10,127,-54,75,-91,87,-19,124,-33,-33,102,47,50,1,51,64, 
  /* [982][0][][] */ 127,119,39,-74,-29,-82,4,34,32,33,-63,10,54,-37,5,-30, 
  /* [983][0][][] */ -16,7,-31,20,-66,4,4,10,-50,115,10,-77,127,29,-36,-4, 
  /* [984][0][][] */ -1,46,14,-50,56,19,112,-47,-69,37,-61,127,-15,34,-91,27, 
  /* [985][0][][] */ -32,60,5,-39,-14,-127,14,28,-18,113,-41,82,4,-71,-68,64, 
  /* [986][0][][] */ 29,14,-12,-127,-115,-30,84,59,-5,-26,-48,12,-95,104,-42,-32, 
  /* [987][0][][] */ 60,7,-12,-76,77,-9,-87,-37,9,-61,-17,67,43,-53,127,-30, 
  /* [988][0][][] */ -36,84,-28,-78,-75,-33,-79,39,107,127,-51,85,-32,115,-79,11, 
  /* [989][0][][] */ -62,-10,-29,-43,84,109,-20,-33,-23,-13,127,10,59,20,-99,-88, 
  /* [990][0][][] */ 25,6,29,9,-22,55,41,3,-7,33,127,74,13,36,-19,-7, 
  /* [991][0][][] */ 111,-16,9,-33,-20,-9,89,47,124,-6,46,59,127,2,39,19, 
  /* [992][0][][] */ 33,114,73,-60,5,-8,-107,-23,-61,-127,-72,-4,9,55,42,-18, 
  /* [993][0][][] */ -14,16,127,-63,-9,36,-21,-102,-62,-4,-65,22,-53,57,-64,-74, 
  /* [994][0][][] */ 76,-127,-49,-81,-62,-78,-40,-20,90,-62,15,5,-57,44,40,13, 
  /* [995][0][][] */ -12,20,-33,1,-127,73,3,34,8,-29,32,-63,-23,-7,23,-19, 
  /* [996][0][][] */ 75,32,22,-110,45,22,-30,35,11,-45,71,-30,-18,34,127,-54, 
  /* [997][0][][] */ -58,29,2,-3,42,-21,127,22,16,-46,24,78,-80,-21,-73,-11, 
  /* [998][0][][] */ -87,40,5,-1,38,-59,-127,-61,24,109,-11,-55,46,105,-52,-35, 
  /* [999][0][][] */ 87,91,-51,41,56,-50,66,-39,-27,4,14,31,37,-10,127,-55, 
  /* [1000][0][][] */ -12,-40,49,-26,-34,65,47,-57,-19,127,108,-13,43,73,25,-46, 
  /* [1001][0][][] */ -97,18,-127,-40,108,65,7,10,22,52,113,97,28,22,-55,30, 
  /* [1002][0][][] */ -47,25,-6,-98,-11,-54,93,-6,69,127,-4,60,-9,-68,-54,103, 
  /* [1003][0][][] */ 19,-9,-25,9,-39,-27,7,59,127,28,-55,-99,90,-7,27,-30, 
  /* [1004][0][][] */ -36,-122,5,-90,-49,-60,26,-5,24,127,-7,-46,59,50,-64,-47, 
  /* [1005][0][][] */ -61,49,12,24,8,63,-79,18,-36,-5,-49,-127,-30,-71,-124,-107, 
  /* [1006][0][][] */ -38,59,52,-8,31,29,80,-11,45,16,-15,6,17,127,14,-55, 
  /* [1007][0][][] */ -13,-40,57,-24,-43,-60,-23,14,-52,-127,59,-16,-52,52,71,-6, 
  /* [1008][0][][] */ -26,16,-2,-83,127,-109,74,60,-55,27,-29,48,-36,-55,-27,29, 
  /* [1009][0][][] */ 22,-16,70,43,96,-10,-1,-127,-53,-26,-36,-49,-25,-54,66,-30, 
  /* [1010][0][][] */ 11,-15,-15,3,-42,33,-59,-34,28,0,8,-127,6,-27,-13,-31, 
  /* [1011][0][][] */ 28,-127,-20,-27,0,63,20,38,120,97,-33,-94,70,-8,-76,-68, 
  /* [1012][0][][] */ -19,-42,-81,14,127,7,17,-4,-28,-48,-41,3,-1,-30,107,-39, 
  /* [1013][0][][] */ 23,2,20,-41,-5,39,55,-52,0,127,10,-10,116,14,18,-47, 
  /* [1014][0][][] */ -127,21,51,-17,90,-49,114,-64,74,21,-81,45,-48,46,-11,-48, 
  /* [1015][0][][] */ 8,39,95,-65,45,-48,-65,1,49,-4,124,-127,-59,117,-66,-88, 
  /* [1016][0][][] */ 52,0,-127,16,98,-47,-124,80,-50,-28,-4,-72,31,-29,18,-101, 
  /* [1017][0][][] */ 2,36,-37,-49,-77,21,26,19,15,-127,-11,-21,31,-10,9,-77, 
  /* [1018][0][][] */ -14,21,-50,-34,-13,32,41,49,26,10,12,36,127,2,27,9, 
  /* [1019][0][][] */ -9,-122,127,77,-15,-21,-115,4,-88,-82,-8,-16,43,46,-123,125, 
  /* [1020][0][][] */ 107,100,15,-10,10,4,-31,-46,70,-42,126,127,-59,-58,-90,-39, 
  /* [1021][0][][] */ -6,61,79,-127,102,75,-90,104,72,-89,-10,64,-85,-88,-50,77, 
  /* [1022][0][][] */ 74,-34,100,-67,-37,53,127,16,9,-13,-72,-82,-30,18,17,23, 
  /* [1023][0][][] */ 90,-55,85,4,-11,-111,50,-127,27,37,16,7,63,-83,64,3, 
  /* [1024][0][][] */ 9,-53,-22,22,-127,42,-44,-38,35,2,73,-8,-126,-93,26,24, 
  /* [1025][0][][] */ 67,41,127,1,-23,30,-73,3,-32,-60,-18,18,115,8,-47,87, 
  /* [1026][0][][] */ -119,-42,-58,43,-6,90,48,-56,-43,-42,127,84,60,77,76,-12, 
  /* [1027][0][][] */ 75,-60,-41,-40,28,-13,127,121,95,102,5,-123,43,-67,-41,-31, 
  /* [1028][0][][] */ -57,-52,18,-121,68,-41,59,30,-40,5,-24,83,127,-9,-72,31, 
  /* [1029][0][][] */ 6,93,5,-127,-108,27,118,-43,13,-44,86,6,48,58,-16,-36, 
  /* [1030][0][][] */ 5,15,-11,1,25,-23,127,-81,32,-39,-35,53,-2,39,7,-69, 
  /* [1031][0][][] */ 33,12,-62,-127,90,-56,-13,7,14,-11,-38,68,-19,-65,-82,14, 
  /* [1032][0][][] */ -64,-30,-103,65,61,-60,-33,-40,-27,62,84,127,49,20,-43,-30, 
  /* [1033][0][][] */ -16,-52,-32,11,-24,-29,127,-67,4,63,-6,118,-2,51,-12,-28, 
  /* [1034][0][][] */ 85,43,-29,-27,-48,41,-44,38,-50,6,-60,94,-9,55,-127,62, 
  /* [1035][0][][] */ 17,-57,31,-99,73,-108,18,-16,32,-67,14,76,-27,-60,6,127, 
  /* [1036][0][][] */ 21,-47,98,-117,45,82,56,-30,-74,82,104,12,12,101,-29,-127, 
  /* [1037][0][][] */ -28,-12,60,-5,-17,7,57,-16,116,27,42,31,-20,127,-7,-88, 
  /* [1038][0][][] */ 34,87,79,-127,-3,-127,-12,111,71,8,31,94,14,-14,-20,18, 
  /* [1039][0][][] */ -127,0,7,-45,9,-7,0,-61,25,23,13,17,46,18,-11,9, 
  /* [1040][0][][] */ -60,20,9,96,41,127,46,-1,-20,-10,22,-65,-87,-67,-20,-77, 
  /* [1041][0][][] */ -64,44,37,84,77,-89,4,-31,-2,24,7,17,61,-26,64,-127, 
  /* [1042][0][][] */ 110,-111,-78,-23,-50,55,15,35,-108,-100,-127,-24,16,66,-7,-37, 
  /* [1043][0][][] */ -7,-26,-20,13,-19,-24,31,52,50,66,1,6,70,64,38,127, 
  /* [1044][0][][] */ -36,-21,-27,26,83,14,3,-110,56,41,74,61,24,-6,-5,-127, 
  /* [1045][0][][] */ 41,2,-16,45,58,5,-16,34,2,-84,-25,-5,127,-69,31,-33, 
  /* [1046][0][][] */ 49,-41,-35,17,66,101,-109,68,70,-127,90,-1,-49,67,-91,48, 
  /* [1047][0][][] */ 8,96,-127,-3,-94,-25,14,47,-16,64,-8,113,-11,9,-12,-18, 
  /* [1048][0][][] */ -62,80,20,-25,29,44,96,127,-89,6,-20,-47,-52,-48,-59,-58, 
  /* [1049][0][][] */ 5,19,-12,-54,-17,7,29,29,6,-49,62,-37,-13,11,127,28, 
  /* [1050][0][][] */ -85,-41,105,43,34,88,-44,-81,16,27,-35,-127,-91,70,53,-120, 
  /* [1051][0][][] */ 22,-10,-61,-16,60,-25,-127,-91,-4,7,89,84,83,33,-21,28, 
  /* [1052][0][][] */ -4,-58,37,-5,-56,-127,95,-21,11,59,-34,97,67,-7,-35,33, 
  /* [1053][0][][] */ 109,22,35,126,-127,-84,-78,66,-11,-46,82,-34,57,116,-43,52, 
  /* [1054][0][][] */ -45,12,-97,-41,21,-28,79,-41,106,-127,-14,121,-91,117,37,-110, 
  /* [1055][0][][] */ 98,60,40,127,43,-94,-3,84,49,-113,-17,-55,93,86,-43,-93, 
  /* [1056][0][][] */ 63,-113,-63,-67,127,51,6,72,0,-40,-71,-15,15,31,-55,-34, 
  /* [1057][0][][] */ -11,17,-50,-63,-27,123,106,-94,101,59,-42,-84,75,46,127,-23, 
  /* [1058][0][][] */ -63,-60,23,3,13,48,3,-2,-13,65,53,-38,54,13,-4,127, 
  /* [1059][0][][] */ 42,-33,8,-9,-14,-2,-101,30,-43,59,-38,-12,-32,-48,-127,6, 
  /* [1060][0][][] */ 14,-22,33,38,-25,49,127,88,-33,-10,-37,-48,4,-83,23,72, 
  /* [1061][0][][] */ -43,-21,-1,-103,55,46,73,70,-39,-127,5,20,14,56,-65,72, 
  /* [1062][0][][] */ 105,39,-2,57,-65,15,-2,22,-108,-29,126,-6,1,-33,-127,46, 
  /* [1063][0][][] */ -89,-27,-55,-1,127,-58,-58,84,-83,51,23,74,101,-65,-100,-119, 
  /* [1064][0][][] */ 43,-2,19,-18,-25,-2,127,52,-29,-33,-6,-33,21,-23,-3,-9, 
  /* [1065][0][][] */ -10,-22,-14,30,-81,85,78,-44,46,-127,-5,-20,-18,70,2,34, 
  /* [1066][0][][] */ -10,-18,-30,-68,59,32,-22,-23,127,75,83,-30,-45,84,-122,1, 
  /* [1067][0][][] */ -127,8,54,1,67,20,100,30,-104,38,-12,-14,79,-53,-29,-36, 
  /* [1068][0][][] */ -91,34,-55,-39,75,-15,72,9,-14,36,-36,-33,56,-20,-41,-127, 
  /* [1069][0][][] */ -14,-127,85,54,85,-39,-47,35,-13,-72,-17,86,-16,-28,89,-99, 
  /* [1070][0][][] */ 56,-13,-78,26,28,33,-16,-38,61,2,-15,-48,108,-6,-28,-127, 
  /* [1071][0][][] */ 6,67,-3,83,79,-127,31,64,-46,84,-53,32,34,-15,-26,-12, 
  /* [1072][0][][] */ 44,-32,48,81,28,-57,65,127,-59,-38,8,11,-39,-115,-11,-65, 
  /* [1073][0][][] */ -117,-22,18,34,-13,-33,6,-17,120,-66,54,-43,-78,-41,-127,-26, 
  /* [1074][0][][] */ 72,1,-18,-62,-34,2,73,88,-6,-100,4,-123,19,127,33,56, 
  /* [1075][0][][] */ 38,52,-43,-17,1,-32,41,127,1,62,32,63,56,15,-20,-79, 
  /* [1076][0][][] */ 49,127,106,-22,-12,-34,-47,-4,39,122,-113,-26,-18,-54,-93,102, 
  /* [1077][0][][] */ -10,-31,50,124,0,27,-127,81,84,-83,7,72,-11,11,-23,52, 
  /* [1078][0][][] */ 97,8,-34,-17,57,-127,10,30,-24,39,-23,23,-41,62,21,30, 
  /* [1079][0][][] */ 92,0,-20,-41,50,55,-63,-18,-127,-62,13,88,70,6,-60,-31, 
  /* [1080][0][][] */ -28,89,127,-43,-51,34,-12,17,42,29,63,-39,-40,22,102,22, 
  /* [1081][0][][] */ 127,6,7,16,-33,-54,-1,-45,54,42,13,-33,59,17,96,26, 
  /* [1082][0][][] */ -44,-31,31,-3,57,6,17,49,-16,4,30,6,127,-35,-9,-68, 
  /* [1083][0][][] */ -8,-33,127,-95,-122,-29,117,111,116,-53,-5,-84,34,100,-46,-56, 
  /* [1084][0][][] */ 104,101,-33,31,-54,20,-13,-127,-41,21,-6,59,-106,-20,-19,31, 
  /* [1085][0][][] */ -46,-127,31,10,-34,11,19,111,99,-28,-51,-94,117,6,52,-13, 
  /* [1086][0][][] */ 58,-51,-38,-91,80,113,-12,36,-55,-3,49,15,50,21,-127,92, 
  /* [1087][0][][] */ -55,-64,-10,-20,-41,92,-37,-10,46,-108,28,-127,-56,90,-20,5, 
  /* [1088][0][][] */ 30,8,-14,-1,-7,61,40,22,99,-13,127,-87,-2,6,31,-46, 
  /* [1089][0][][] */ 75,-5,127,63,-42,-52,88,15,-88,45,-33,81,85,18,5,37, 
  /* [1090][0][][] */ 82,-5,15,19,-30,4,42,0,43,52,65,-34,14,127,-3,-24, 
  /* [1091][0][][] */ 66,11,-79,20,-49,-48,-23,27,-122,-21,-14,86,-27,3,-127,-59, 
  /* [1092][0][][] */ -44,-38,-42,-27,119,-49,127,20,117,-15,-70,-36,-116,-20,0,84, 
  /* [1093][0][][] */ 104,-51,-16,-14,-18,-34,127,103,-87,91,-9,-24,-105,23,-70,12, 
  /* [1094][0][][] */ 53,-48,43,-108,-42,-11,-9,62,-14,-40,22,-41,-47,-39,-127,-118, 
  /* [1095][0][][] */ 27,53,-20,-127,-113,-93,78,43,10,51,-100,-8,31,56,38,19, 
  /* [1096][0][][] */ -79,-79,-94,-30,-5,35,17,21,100,-11,127,-105,44,60,77,-120, 
  /* [1097][0][][] */ -14,-1,27,65,100,-7,-75,-50,31,-74,102,59,81,127,2,-46, 
  /* [1098][0][][] */ 51,-94,8,-61,75,127,15,-53,7,-123,-94,29,40,98,-15,-23, 
  /* [1099][0][][] */ -110,56,-74,-50,81,127,125,31,-20,47,-54,-41,31,13,-67,38, 
  /* [1100][0][][] */ 77,-35,83,-100,-102,-45,-91,-82,122,-62,21,103,77,-127,-64,-86, 
  /* [1101][0][][] */ 30,50,-127,-22,-23,-10,-58,37,66,-53,-36,-44,-9,-36,-68,-20, 
  /* [1102][0][][] */ -66,-11,127,22,6,21,46,-9,27,20,-18,-4,-17,-21,6,-26, 
  /* [1103][0][][] */ 56,47,53,-3,117,51,-53,-70,33,61,-41,-49,5,-61,127,17, 
  /* [1104][0][][] */ 25,70,-33,-47,7,56,127,69,-60,7,74,70,12,-92,-83,-13, 
  /* [1105][0][][] */ -5,-56,-18,-32,-24,14,-2,68,45,13,-18,-127,-61,-36,3,-61, 
  /* [1106][0][][] */ 74,-29,-24,-127,-56,10,-9,37,110,-7,-12,-36,-25,-36,-40,-31, 
  /* [1107][0][][] */ 26,-17,86,-127,72,-14,81,-70,-1,50,-45,39,81,-112,-21,-45, 
  /* [1108][0][][] */ 55,-10,-13,-103,10,-127,-31,-25,-38,82,-26,-30,-13,38,5,-48, 
  /* [1109][0][][] */ 126,-76,27,101,48,-76,109,-45,-57,13,-28,103,122,53,127,-32, 
  /* [1110][0][][] */ -9,-8,54,-57,-36,-45,-35,-107,-11,127,27,105,25,29,-27,-40, 
  /* [1111][0][][] */ -29,91,-64,113,6,60,120,10,84,-56,-61,-30,-43,110,44,-127, 
  /* [1112][0][][] */ 66,127,-15,-7,15,50,-65,60,57,111,-72,-3,106,-47,-30,-11, 
  /* [1113][0][][] */ 67,88,117,40,-107,-55,-51,18,127,65,75,-11,-38,43,26,-50, 
  /* [1114][0][][] */ 40,-29,-105,35,20,0,61,124,-18,-52,58,-48,49,50,35,127, 
  /* [1115][0][][] */ 30,-68,51,70,125,21,-30,-50,-60,64,-127,15,-26,-102,33,-25, 
  /* [1116][0][][] */ -31,-35,-30,9,34,56,30,42,-33,-44,-23,-25,127,-47,-49,-20, 
  /* [1117][0][][] */ 46,108,127,48,51,-19,-19,-107,-45,7,34,-66,47,-22,10,-22, 
  /* [1118][0][][] */ 93,-71,107,-76,3,21,127,-94,-71,-113,64,-17,36,-6,41,31, 
  /* [1119][0][][] */ 39,65,-61,-31,114,55,-121,109,-120,104,127,46,-39,50,61,91, 
  /* [1120][0][][] */ -94,66,-43,-121,110,-63,-86,-15,21,28,-60,127,-15,-82,-68,-46, 
  /* [1121][0][][] */ -77,20,-56,18,88,19,3,-32,39,87,-51,-15,60,127,8,-26, 
  /* [1122][0][][] */ -103,21,74,-102,-25,-9,25,-22,127,26,73,52,41,76,50,44, 
  /* [1123][0][][] */ 61,-2,65,55,73,127,-49,-51,-15,65,6,-41,-65,-19,-76,-111, 
  /* [1124][0][][] */ 127,44,-1,-95,-25,30,14,-8,84,4,-105,-35,97,35,30,-31, 
  /* [1125][0][][] */ -65,-32,51,73,-52,-12,-30,72,127,-55,57,-34,63,78,-49,33, 
  /* [1126][0][][] */ -42,-65,-32,43,48,22,-21,-25,126,50,65,-127,9,6,-32,-16, 
  /* [1127][0][][] */ 12,124,42,-71,-19,-127,32,70,68,53,78,-33,104,25,12,33, 
  /* [1128][0][][] */ 46,-91,-100,-58,-28,-50,-23,-127,33,19,85,73,56,18,66,-38, 
  /* [1129][0][][] */ -127,35,-100,26,33,65,-57,-6,18,64,5,-23,-49,60,-37,-61, 
  /* [1130][0][][] */ -25,-5,-31,-23,-41,-71,47,-34,63,127,98,-85,26,-14,40,-35, 
  /* [1131][0][][] */ 13,-111,56,-6,-8,-15,127,22,-38,37,80,94,0,-76,-23,15, 
  /* [1132][0][][] */ -127,-88,-21,23,17,-20,17,-20,5,-24,2,44,96,32,-44,-55, 
  /* [1133][0][][] */ 46,-17,26,-20,52,-47,-75,-50,113,127,18,3,56,-36,32,-25, 
  /* [1134][0][][] */ 19,-2,34,-48,86,22,-62,-48,-89,-13,-95,-127,-62,-90,51,-113, 
  /* [1135][0][][] */ -1,127,27,48,-2,-5,-6,5,-54,-102,-17,-14,83,27,44,5, 
  /* [1136][0][][] */ 68,50,10,27,-15,25,57,-92,7,83,78,4,-76,-74,-85,-127, 
  /* [1137][0][][] */ 45,26,45,-127,16,-9,-30,39,115,-10,83,35,41,41,-40,-1, 
  /* [1138][0][][] */ 3,127,26,35,47,53,-35,13,-22,-53,23,15,6,-86,51,-42, 
  /* [1139][0][][] */ -75,-20,21,-53,-127,-7,64,-18,-24,53,115,-35,-7,-115,44,21, 
  /* [1140][0][][] */ 21,-127,-9,-65,56,-18,-72,-15,-26,95,54,87,39,-102,-46,33, 
  /* [1141][0][][] */ 114,60,-39,127,-35,47,-24,5,37,-64,-101,-63,-101,43,-96,58, 
  /* [1142][0][][] */ 14,-2,-22,-11,-14,-104,-79,83,69,127,41,-105,-88,-126,-42,64, 
  /* [1143][0][][] */ -79,42,-18,-41,-127,34,81,-17,53,52,105,-34,-82,-6,23,11, 
  /* [1144][0][][] */ 48,-20,35,47,-31,-54,-72,-19,-127,104,-71,85,21,-27,-95,-35, 
  /* [1145][0][][] */ 96,81,-16,66,81,-2,9,42,-7,35,99,-127,71,-29,33,-26, 
  /* [1146][0][][] */ 36,49,13,127,-3,80,25,-67,30,-61,-4,74,-66,-110,86,48, 
  /* [1147][0][][] */ 66,25,-9,-12,-4,4,-127,-112,11,66,18,67,-35,25,34,39, 
  /* [1148][0][][] */ -127,41,-30,10,23,50,-51,-31,10,21,-60,5,-29,-57,-41,62, 
  /* [1149][0][][] */ 91,32,127,-37,64,-52,-54,-47,93,-47,69,42,6,17,-9,-114, 
  /* [1150][0][][] */ 46,26,-107,93,-50,-58,-40,-127,-69,52,-88,-12,121,-63,-53,-119, 
  /* [1151][0][][] */ -68,62,89,-14,-6,127,63,-23,-9,61,29,-58,-57,2,45,-81, 
  /* [1152][0][][] */ -19,127,109,-69,90,-8,120,54,94,-9,-67,104,-44,103,-79,-74, 
  /* [1153][0][][] */ -15,-91,38,-38,-18,-15,-16,-34,-6,71,38,127,95,-69,35,-29, 
  /* [1154][0][][] */ 10,58,-23,-39,15,127,-46,-69,-30,-54,-64,-20,-12,-2,93,-41, 
  /* [1155][0][][] */ -13,-34,-12,-80,127,40,5,30,30,-78,59,69,-31,28,-5,67, 
  /* [1156][0][][] */ -9,-83,-25,9,41,-62,-26,-64,56,21,-81,-127,43,-43,-5,47, 
  /* [1157][0][][] */ -78,15,-1,-124,34,-32,29,-15,80,-6,-109,127,11,6,-79,5, 
  /* [1158][0][][] */ 31,-63,60,-4,12,127,43,-12,-1,-25,-3,15,-7,87,3,-79, 
  /* [1159][0][][] */ -5,-39,21,-6,12,127,-30,-1,-111,-94,-37,-5,-45,30,24,8, 
  /* [1160][0][][] */ 111,-67,-1,-22,34,4,-36,95,127,-88,106,-14,-22,74,-78,-35, 
  /* [1161][0][][] */ 57,10,22,5,-44,-36,127,-13,-90,-33,114,54,67,-112,93,101, 
  /* [1162][0][][] */ 32,-53,-28,-40,-46,-19,7,-22,28,42,-10,-60,127,-110,43,-35, 
  /* [1163][0][][] */ -17,127,60,-17,-42,-116,-66,-78,58,63,-64,-15,-75,-96,106,-104, 
  /* [1164][0][][] */ 32,-104,-96,108,32,15,-29,-107,80,-28,127,96,26,-7,-78,-63, 
  /* [1165][0][][] */ -55,-41,32,28,-89,-111,58,-4,127,82,78,4,92,0,92,-37, 
  /* [1166][0][][] */ 43,-127,-41,51,-70,52,-125,-49,51,-35,64,-71,115,-47,41,59, 
  /* [1167][0][][] */ -67,4,-16,120,80,-17,-56,-73,125,-1,85,-7,127,24,12,-73, 
  /* [1168][0][][] */ -100,-1,-77,46,-19,-51,127,-8,27,51,-82,-75,21,73,51,66, 
  /* [1169][0][][] */ 88,-10,5,-27,-78,47,36,42,127,-84,107,-10,10,63,-5,-16, 
  /* [1170][0][][] */ 127,48,-35,-48,32,-74,-11,30,-5,46,-71,-37,-41,-65,-13,28, 
  /* [1171][0][][] */ -6,-5,-27,6,22,-16,78,-29,-32,13,-108,7,71,26,30,-127, 
  /* [1172][0][][] */ 94,66,14,-24,30,-32,-13,1,98,59,57,127,85,127,-66,-40, 
  /* [1173][0][][] */ -92,-73,-7,33,-49,12,-38,-1,60,18,-23,-112,127,-124,61,9, 
  /* [1174][0][][] */ -57,-76,-76,-12,127,32,-20,-57,28,7,72,64,13,-36,-60,-19, 
  /* [1175][0][][] */ 0,-94,-51,-127,95,14,11,78,-40,-43,40,65,86,13,-30,-37, 
  /* [1176][0][][] */ 13,61,13,27,127,46,-33,-3,-1,8,57,1,59,-17,52,-38, 
  /* [1177][0][][] */ 84,108,-81,-11,22,29,21,-127,-11,47,-42,-41,-48,24,91,14, 
  /* [1178][0][][] */ 83,-17,-1,21,-29,-58,-18,-100,32,35,-15,-1,79,-127,29,72, 
  /* [1179][0][][] */ 66,10,12,58,64,-116,29,38,127,31,-34,2,85,46,-30,28, 
  /* [1180][0][][] */ 23,6,44,14,12,-65,8,23,127,-27,-26,-31,-80,29,36,29, 
  /* [1181][0][][] */ -50,80,83,-37,-68,-39,29,-62,-72,27,4,57,127,-2,83,-101, 
  /* [1182][0][][] */ -21,-12,-87,56,38,127,-71,38,-24,33,7,-49,34,3,-96,56, 
  /* [1183][0][][] */ 41,49,-78,-18,46,6,-64,8,-18,35,40,127,-8,-122,-94,7, 
  /* [1184][0][][] */ -71,-81,2,-93,-34,127,43,44,56,23,80,-75,-51,-74,-54,-47, 
  /* [1185][0][][] */ 5,-14,53,12,32,-22,35,-16,-111,9,-33,-15,61,73,127,-23, 
  /* [1186][0][][] */ -21,15,-22,-8,-2,15,34,57,116,37,14,127,34,110,41,-90, 
  /* [1187][0][][] */ -113,70,94,-24,-114,62,99,107,-24,97,-12,127,91,-46,-7,-36, 
  /* [1188][0][][] */ -66,54,-54,-108,72,-10,-20,127,33,-18,-38,-91,49,-50,-47,-9, 
  /* [1189][0][][] */ -30,29,-12,-33,46,41,107,15,2,127,25,23,-3,7,36,-73, 
  /* [1190][0][][] */ 4,-39,-50,17,33,41,-26,-19,-69,27,16,21,14,15,127,26, 
  /* [1191][0][][] */ 62,-7,-75,-31,-95,-6,-64,51,-69,-11,-57,-45,115,-127,63,45, 
  /* [1192][0][][] */ 61,-18,38,77,23,41,-11,85,6,-95,51,-39,65,127,-31,-19, 
  /* [1193][0][][] */ -115,46,-84,39,23,57,-124,-33,-44,-46,-75,-58,127,61,-63,60, 
  /* [1194][0][][] */ 68,54,-4,-93,-71,127,-58,-43,-73,126,42,-22,24,69,-81,-99, 
  /* [1195][0][][] */ 105,-1,-54,92,-68,-1,3,-64,-4,-127,-26,40,7,48,1,-23, 
  /* [1196][0][][] */ -23,127,-51,83,-13,47,-21,12,-51,-65,-100,59,25,33,-53,-58, 
  /* [1197][0][][] */ -4,-55,24,-2,71,86,-73,10,-33,92,127,12,-6,73,-44,-35, 
  /* [1198][0][][] */ -56,-21,9,-16,63,41,127,0,27,-35,-16,-96,-44,-28,-13,-55, 
  /* [1199][0][][] */ -115,-73,-65,-52,-24,-25,60,67,127,-6,-66,90,-86,12,12,61, 
  /* [1200][0][][] */ -57,4,-87,-25,-115,50,5,-9,108,127,-28,6,-65,100,84,117, 
  /* [1201][0][][] */ -40,43,-45,-35,70,20,-7,-14,-34,-100,-127,-52,116,22,-70,-55, 
  /* [1202][0][][] */ 67,101,51,-4,-36,-59,-25,-32,-127,107,-55,106,48,-76,38,53, 
  /* [1203][0][][] */ -80,72,55,-16,58,-39,22,-45,32,35,-9,45,-53,127,-48,-73, 
  /* [1204][0][][] */ -36,-16,13,-52,6,11,127,-41,-36,19,-46,56,68,4,38,-27, 
  /* [1205][0][][] */ -34,52,-2,12,-7,7,50,-11,-3,-42,-65,4,-12,20,127,41, 
  /* [1206][0][][] */ -127,43,58,-57,-43,66,-32,-19,36,-92,-8,-36,19,107,-101,17, 
  /* [1207][0][][] */ 118,-112,-8,92,24,65,28,-122,-114,54,-18,127,95,8,114,-38, 
  /* [1208][0][][] */ -39,42,30,13,7,-13,26,51,60,127,-24,-40,28,-92,-43,49, 
  /* [1209][0][][] */ 45,-31,103,23,57,22,-2,-123,50,-31,-127,-70,-4,35,11,4, 
  /* [1210][0][][] */ 58,36,41,16,-58,1,52,-111,-127,-31,-49,64,27,13,-78,-13, 
  /* [1211][0][][] */ -26,-30,-12,-127,55,-14,-5,-34,-77,72,-49,-28,-9,-16,20,-35, 
  /* [1212][0][][] */ 6,-39,-62,97,18,35,-80,36,28,-105,-7,-127,41,72,13,-77, 
  /* [1213][0][][] */ -42,7,-54,-127,-103,-46,-54,-8,-15,65,-33,17,15,93,21,24, 
  /* [1214][0][][] */ -4,-16,-20,38,-83,69,6,8,-32,39,17,32,-11,-84,-36,-127, 
  /* [1215][0][][] */ -56,59,-74,127,-61,-2,-29,-35,5,-51,25,2,-18,18,-31,-10, 
  /* [1216][0][][] */ 95,40,42,-18,-40,-12,127,81,-114,30,2,-50,-84,-24,-12,44, 
  /* [1217][0][][] */ 28,11,-8,15,-39,3,32,-84,-127,-69,-17,-64,-62,-28,-50,24, 
  /* [1218][0][][] */ -26,-36,25,15,42,-14,33,81,59,30,-54,-11,-1,-41,45,127, 
  /* [1219][0][][] */ -7,45,-50,-36,62,-62,-52,-41,-26,111,-127,-36,12,33,-28,-103, 
  /* [1220][0][][] */ -6,-12,-18,45,-127,-65,99,9,-70,83,-74,-12,-30,34,19,-24, 
  /* [1221][0][][] */ -19,-99,42,-35,67,28,63,-78,-127,-91,14,116,9,-30,-11,2, 
  /* [1222][0][][] */ 82,44,27,-127,-20,19,12,6,3,11,67,87,-46,-66,-96,-67, 
  /* [1223][0][][] */ 47,9,23,15,62,-111,45,14,-36,83,10,111,7,-47,-46,-127, 
  /* [1224][0][][] */ -26,78,-83,-26,94,-21,25,41,-57,28,33,-95,-69,127,51,-71, 
  /* [1225][0][][] */ 13,-3,-23,-8,10,-127,-55,-61,4,65,-55,103,-64,-3,8,1, 
  /* [1226][0][][] */ -12,-110,127,35,37,-34,-63,-39,-65,14,91,43,66,-43,11,64, 
  /* [1227][0][][] */ 125,-38,29,-40,41,19,34,48,-127,77,67,-2,28,-60,-82,14, 
  /* [1228][0][][] */ -3,2,-39,-120,-91,-42,8,-53,-24,-34,-3,127,8,44,68,18, 
  /* [1229][0][][] */ -29,92,25,-22,-2,-57,58,49,-36,-13,36,-10,127,67,16,-95, 
  /* [1230][0][][] */ 52,47,68,70,21,-23,119,13,-127,-113,-37,13,72,69,62,-47, 
  /* [1231][0][][] */ 9,37,-70,-14,65,-44,-31,102,15,-66,20,72,-97,-39,-127,-16, 
  /* [1232][0][][] */ -94,-67,-9,-34,57,127,-9,-25,97,29,32,-78,-14,27,73,-8, 
  /* [1233][0][][] */ 1,-103,32,21,-101,-111,-11,6,34,127,39,53,-92,1,-9,23, 
  /* [1234][0][][] */ -18,127,78,104,50,77,2,-11,-1,68,86,39,38,24,42,-56, 
  /* [1235][0][][] */ -4,-43,-47,-3,-56,29,127,17,111,50,37,24,41,-58,36,10, 
  /* [1236][0][][] */ 56,31,-86,-2,-71,57,-36,-127,56,-33,56,59,-9,37,5,-70, 
  /* [1237][0][][] */ 4,-31,-84,41,65,31,-13,-30,-11,127,63,-21,7,-37,36,-26, 
  /* [1238][0][][] */ -70,20,-35,-127,-17,5,-82,-50,32,-87,43,31,49,-55,-50,125, 
  /* [1239][0][][] */ 28,-20,-41,-29,-67,-10,48,0,87,57,-31,-41,-43,-80,46,-127, 
  /* [1240][0][][] */ -19,-32,28,-77,64,-127,-10,-61,-7,48,-6,-19,-27,60,32,-49, 
  /* [1241][0][][] */ 0,11,36,127,-88,-53,-60,-61,-36,-68,-26,66,30,-34,-1,-18, 
  /* [1242][0][][] */ 70,-81,-10,101,-110,-42,-12,127,47,-106,6,-19,114,89,48,-44, 
  /* [1243][0][][] */ 56,85,-36,-51,-26,-77,-19,-70,18,6,42,81,26,-96,127,52, 
  /* [1244][0][][] */ 75,28,33,-62,34,-127,-66,24,32,-31,-24,91,50,-37,44,-61, 
  /* [1245][0][][] */ 18,76,-16,41,-39,51,44,22,14,-63,-52,127,36,-10,70,-21, 
  /* [1246][0][][] */ -30,117,38,-39,-60,79,2,50,-127,-24,-2,-31,65,16,24,-26, 
  /* [1247][0][][] */ 8,22,5,1,5,41,21,-19,79,-84,-38,10,90,-92,-83,-127, 
  /* [1248][0][][] */ 40,-15,0,-56,-5,50,22,-127,-32,0,42,17,84,-27,67,-114, 
  /* [1249][0][][] */ 60,63,-108,32,22,71,-63,127,83,52,29,-56,58,-7,-52,-41, 
  /* [1250][0][][] */ -51,-49,-127,98,74,17,-21,25,55,-21,107,45,19,-46,16,-54, 
  /* [1251][0][][] */ 30,-38,27,94,62,-53,-78,-71,118,30,-7,-5,-127,-22,-37,123, 
  /* [1252][0][][] */ -127,52,46,31,-14,37,-27,69,-9,83,-2,-91,39,27,4,-76, 
  /* [1253][0][][] */ -59,-6,-15,-43,127,33,46,-95,-11,-7,-110,85,-48,-60,-26,48, 
  /* [1254][0][][] */ -7,20,-46,-44,127,81,-46,17,44,11,21,-36,23,-20,27,29, 
  /* [1255][0][][] */ -127,-74,-38,15,12,-13,-17,71,82,-76,80,-34,-51,2,-6,-3, 
  /* [1256][0][][] */ -42,-42,36,127,-43,30,46,-39,-19,-43,17,-57,9,48,64,34, 
  /* [1257][0][][] */ -97,56,75,35,127,-22,-7,62,-48,-67,-67,62,-105,95,-63,-5, 
  /* [1258][0][][] */ 127,-28,-10,48,-9,-64,87,40,25,-2,-1,13,36,-24,-8,-26, 
  /* [1259][0][][] */ -87,-50,-54,-48,-31,-71,-80,24,57,-36,-38,-22,122,-127,-63,-53, 
  /* [1260][0][][] */ 42,53,21,-69,-58,-46,61,44,9,-62,-42,0,127,-18,45,39, 
  /* [1261][0][][] */ -52,-33,31,-40,11,-16,-29,-18,37,26,-50,53,37,127,-79,-74, 
  /* [1262][0][][] */ -47,100,-25,4,-28,-3,31,21,46,-19,35,127,-58,30,-71,98, 
  /* [1263][0][][] */ -58,-73,-58,-10,17,40,27,-6,-80,76,-116,-94,-14,-25,-127,-21, 
  /* [1264][0][][] */ -72,-5,23,-67,40,-48,-85,-53,-25,-57,63,127,67,-53,-55,-5, 
  /* [1265][0][][] */ 14,-87,-11,-59,99,23,-29,103,107,-56,127,6,46,54,14,-5, 
  /* [1266][0][][] */ 37,12,127,-16,81,48,72,35,-98,-62,57,26,-15,67,-42,16, 
  /* [1267][0][][] */ 27,-27,85,-42,3,127,25,-31,4,66,42,-28,-40,-48,-81,36, 
  /* [1268][0][][] */ 32,77,61,3,7,16,68,-39,82,-28,-50,-127,-38,34,56,-1, 
  /* [1269][0][][] */ 112,52,34,108,-7,85,-127,36,92,-113,-27,-82,51,63,-83,15, 
  /* [1270][0][][] */ 121,1,-35,-127,43,69,-28,79,-87,102,12,74,-98,-6,-73,-78, 
  /* [1271][0][][] */ 20,-66,-43,38,-31,-55,37,52,-50,127,-47,-18,1,-50,-38,-38, 
  /* [1272][0][][] */ -105,14,15,78,89,36,-85,-127,11,58,-15,-66,27,-83,-76,-55, 
  /* [1273][0][][] */ 31,-32,72,-28,66,9,-18,-127,-1,82,-45,84,77,17,46,-80, 
  /* [1274][0][][] */ -121,-18,39,35,51,-54,34,-10,-31,-21,-74,43,-127,-104,-24,10, 
  /* [1275][0][][] */ -83,-4,-71,-127,45,41,-42,36,-30,62,-80,-1,-25,-58,40,23, 
  /* [1276][0][][] */ -11,17,2,45,41,9,-59,21,-44,-79,31,52,127,4,6,27, 
  /* [1277][0][][] */ 127,-37,-7,-42,-45,34,84,19,-35,80,17,-23,24,-7,-71,-24, 
  /* [1278][0][][] */ -73,7,96,-62,105,-58,-11,80,-38,-24,34,-22,-6,-55,52,-127, 
  /* [1279][0][][] */ 55,-11,127,-55,46,38,-5,49,-18,93,-2,65,-13,-57,-43,26, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 1280,1,1,16 } };
const TfArray<1280, float> quant9_scale = { 1280, { 0.0054545318707823753, 0.0039630457758903503, 0.0050721485167741776, 0.0052831023931503296, 0.0046178721822798252, 0.0067197391763329506, 0.0063027180731296539, 0.0050705038011074066, 0.0063592535443603992, 0.0062466482631862164, 0.0050626522861421108, 0.0053506521508097649, 0.0061522745527327061, 0.0065171560272574425, 0.0045182774774730206, 0.0036311126314103603, 0.0056968284770846367, 0.0068035661242902279, 0.0052693611942231655, 0.0039643649943172932, 0.0051665725186467171, 0.0075956359505653381, 0.0069350004196166992, 0.0037531396374106407, 0.0041926871053874493, 0.0073473546653985977, 0.0061368593014776707, 0.0045945309102535248, 0.0047552147880196571, 0.0071060284972190857, 0.0053979698568582535, 0.0048501975834369659, 0.0044483570381999016, 0.0055233296006917953, 0.0051314504817128181, 0.0071869581006467342, 0.0057409852743148804, 0.005425705574452877, 0.0048278248868882656, 0.0058243335224688053, 0.0054430910386145115, 0.0048880241811275482, 0.0060612973757088184, 0.0058896858245134354, 0.0051568262279033661, 0.0053740069270133972, 0.0049363435246050358, 0.0060221194289624691, 0.0058078751899302006, 0.0044983630068600178, 0.0056970925070345402, 0.0043701552785933018, 0.0048158243298530579, 0.0057973903603851795, 0.0036486173048615456, 0.0051787532866001129, 0.0071243587881326675, 0.0048426338471472263, 0.0053130476735532284, 0.0042489292100071907, 0.0052229710854589939, 0.0049010571092367172, 0.0047630784101784229, 0.0056591578759253025, 0.003810968017205596, 0.0041609685868024826, 0.0062875542789697647, 0.0058658020570874214, 0.0052956086583435535, 0.0071827787905931473, 0.004090484231710434, 0.0065870983526110649, 0.005305243656039238, 0.005549571942538023, 0.0048643718473613262, 0.0055493940599262714, 0.0049627553671598434, 0.0065217902883887291, 0.0055519086308777332, 0.0044524208642542362, 0.0056483461521565914, 0.0033424242865294218, 0.0033535934053361416, 0.0052474429830908775, 0.0038017206825315952, 0.006336018443107605, 0.004470242653042078, 0.0037660896778106689, 0.0067426543682813644, 0.0055293822661042213, 0.0048527941107749939, 0.007101601455360651, 0.0061087715439498425, 0.0064291032031178474, 0.0037300470285117626, 0.0047544464468955994, 0.0057416600175201893, 0.0050127636641263962, 0.006959348451346159, 0.0051721637137234211, 0.0070337704382836819, 0.0049445568583905697, 0.004037030041217804, 0.0046145552769303322, 0.0049115577712655067, 0.0051532546058297157, 0.0047847889363765717, 0.0052285827696323395, 0.0053435019217431545, 0.0049467268399894238, 0.004929322749376297, 0.0052040019072592258, 0.0050656790845096111, 0.0062043084762990475, 0.0043889349326491356, 0.0056634941138327122, 0.0047272713854908943, 0.0066446191631257534, 0.0047574741765856743, 0.0038380157202482224, 0.0051623964682221413, 0.0052725179120898247, 0.005160982720553875, 0.0051010954193770885, 0.0046081137843430042, 0.005666694138199091, 0.0032697725109755993, 0.0052091712132096291, 0.0068192239850759506, 0.0052497759461402893, 0.0043155145831406116, 0.0057765538804233074, 0.0046926168724894524, 0.0065180128440260887, 0.0058081494644284248, 0.0062964889220893383, 0.0048168748617172241, 0.0056919590570032597, 0.0038963041733950377, 0.0042972560040652752, 0.0058311149477958679, 0.0050088227726519108, 0.0048119365237653255, 0.0040752766653895378, 0.0039937668479979038, 0.0066292891278862953, 0.0038181690033525229, 0.0036024469882249832, 0.0043962164781987667, 0.004294978454709053, 0.0040116477757692337, 0.0054705520160496235, 0.0045659281313419342, 0.0044532292522490025, 0.0053251706995069981, 0.0053578377701342106, 0.0046902652829885483, 0.006577945314347744, 0.0057163047604262829, 0.0049556391313672066, 0.0057967370375990868, 0.004618227481842041, 0.0056241508573293686, 0.0059735439717769623, 0.0047147409059107304, 0.0061007770709693432, 0.0035045782569795847, 0.0055961171165108681, 0.0040541035123169422, 0.0049140169285237789, 0.0085782790556550026, 0.0060610123910009861, 0.0049886628985404968, 0.0048903119750320911, 0.0047840499319136143, 0.0060716462321579456, 0.0055840504355728626, 0.004820551723241806, 0.005712208803743124, 0.0039789201691746712, 0.0044501759111881256, 0.0063857319764792919, 0.0048817899078130722, 0.0042303078807890415, 0.0041519980877637863, 0.0077053317800164223, 0.0046726958826184273, 0.0070369141176342964, 0.0067094597034156322, 0.0044894767925143242, 0.0042793969623744488, 0.0052304868586361408, 0.00536370649933815, 0.0059688789770007133, 0.0054710586555302143, 0.0043517914600670338, 0.0051915957592427731, 0.004929705522954464, 0.0048766806721687317, 0.0045650494284927845, 0.006739247590303421, 0.0062452862039208412, 0.0048986147157847881, 0.0051045846194028854, 0.0033804825507104397, 0.0036939666606485844, 0.0059008919633924961, 0.005595529917627573, 0.0067854137159883976, 0.0046570119448006153, 0.0047606285661458969, 0.0057968287728726864, 0.0045616556890308857, 0.0068782675080001354, 0.0039232592098414898, 0.0050945370458066463, 0.0053773890249431133, 0.0047383252531290054, 0.0046264408156275749, 0.0062061697244644165, 0.0051480378024280071, 0.0052133798599243164, 0.0062658083625137806, 0.0057414881885051727, 0.0053486577235162258, 0.0054099275730550289, 0.0046618068590760231, 0.0044749518856406212, 0.0051359264180064201, 0.0056877504102885723, 0.00502777099609375, 0.0065946872346103191, 0.006914693396538496, 0.00595841184258461, 0.0063255741260945797, 0.0046003428287804127, 0.0051198289729654789, 0.0044668903574347496, 0.0054716747254133224, 0.0051388111896812916, 0.0066773775033652782, 0.0039160405285656452, 0.0056373421102762222, 0.0048278006725013256, 0.0039447294548153877, 0.0054150447249412537, 0.0055079893209040165, 0.0051135243847966194, 0.0068128784187138081, 0.0048518064431846142, 0.004501712042838335, 0.0053686192259192467, 0.0064016426913440228, 0.0081080561503767967, 0.005015107337385416, 0.0058616106398403645, 0.0045980648137629032, 0.0045280861668288708, 0.0044580972753465176, 0.0046353372745215893, 0.0050005912780761719, 0.0052020181901752949, 0.0045912275090813637, 0.0049270954914391041, 0.0055738561786711216, 0.0054235770367085934, 0.0047181942500174046, 0.0043507758527994156, 0.0046240249648690224, 0.0039818901568651199, 0.0045283157378435135, 0.0045260987244546413, 0.0055305818095803261, 0.0045950552448630333, 0.0058230836875736713, 0.0052594463340938091, 0.004080834798514843, 0.0050570783205330372, 0.0046184388920664787, 0.0057763759978115559, 0.0049534821882843971, 0.0044694598764181137, 0.0036968877539038658, 0.0048447423614561558, 0.006391916424036026, 0.0049604075029492378, 0.0044603850692510605, 0.0057273651473224163, 0.0047033829614520073, 0.0048560425639152527, 0.0045124543830752373, 0.00430270005017519, 0.0073544164188206196, 0.0051521765999495983, 0.0071483245119452477, 0.0054577342234551907, 0.0048517361283302307, 0.0052424222230911255, 0.0051898444071412086, 0.0062459828332066536, 0.0043652625754475594, 0.0050359601154923439, 0.0054516573436558247, 0.0065241227857768536, 0.0043141092173755169, 0.0058429543860256672, 0.0045998366549611092, 0.0060476851649582386, 0.0051866290159523487, 0.0051166708581149578, 0.0048076682724058628, 0.0038683849852532148, 0.0038815841544419527, 0.0054480982944369316, 0.0065828152000904083, 0.0046721901744604111, 0.005751908291131258, 0.0056819193996489048, 0.0058458256535232067, 0.0056481519713997841, 0.0050928168930113316, 0.0042828163132071495, 0.0057899276725947857, 0.0048558851704001427, 0.005390537902712822, 0.003572933841496706, 0.0051714936271309853, 0.0069185574539005756, 0.0048063374124467373, 0.0038868258707225323, 0.006521331612020731, 0.0045218518935143948, 0.0061668632552027702, 0.0069769714027643204, 0.0045377989299595356, 0.0056004514917731285, 0.0043068286031484604, 0.0047169607132673264, 0.0070098219439387321, 0.0052884705364704132, 0.0048588183708488941, 0.0056521696969866753, 0.004027792252600193, 0.0039437804371118546, 0.0046298149973154068, 0.0060262037441134453, 0.0045052454806864262, 0.0045234537683427334, 0.007059877272695303, 0.0052129817195236683, 0.0043201739899814129, 0.0038489368744194508, 0.0042947367765009403, 0.0048828250728547573, 0.0049912575632333755, 0.003875277703627944, 0.004445456899702549, 0.0051712160930037498, 0.0040457951836287975, 0.0080491751432418823, 0.0045622317120432854, 0.0053604152053594589, 0.0050463816151022911, 0.0044059283100068569, 0.0065544154495000839, 0.0047506638802587986, 0.0068039549514651299, 0.0058058868162333965, 0.0046334555372595787, 0.0037452809046953917, 0.0067083840258419514, 0.0037023124750703573, 0.004997926764190197, 0.005488615483045578, 0.004268464632332325, 0.0047419271431863308, 0.0056188330054283142, 0.005637001246213913, 0.0045364643447101116, 0.0059941769577562809, 0.0041777514852583408, 0.0042613819241523743, 0.0036688903346657753, 0.0057894871570169926, 0.0058686975389719009, 0.0048402245156466961, 0.0053735151886940002, 0.0045400443486869335, 0.0059050875715911388, 0.0038701011799275875, 0.0049570444971323013, 0.0045782197266817093, 0.0040520611219108105, 0.0048258965834975243, 0.0045323260128498077, 0.0036651359405368567, 0.0040739732794463634, 0.0041212188079953194, 0.0044229710474610329, 0.0057023931294679642, 0.0063871662132441998, 0.0065890601836144924, 0.0051883324049413204, 0.004815918393433094, 0.0065678446553647518, 0.0064395829103887081, 0.004793146625161171, 0.0042731505818665028, 0.0052486909553408623, 0.0056711491197347641, 0.004389849491417408, 0.0065126167610287666, 0.0062677557580173016, 0.0044217710383236408, 0.0052890153601765633, 0.0037555794697254896, 0.0045409318991005421, 0.0071785501204431057, 0.0040825027972459793, 0.00563046894967556, 0.0044943112879991531, 0.0048237089067697525, 0.0053790779784321785, 0.0061312653124332428, 0.0077701103873550892, 0.0055599971674382687, 0.0052977469749748707, 0.0041059288196265697, 0.0038135969080030918, 0.0050608296878635883, 0.0057411096058785915, 0.006663633044809103, 0.0039940467104315758, 0.0053252861835062504, 0.0034592919982969761, 0.0060936161316931248, 0.0057451212778687477, 0.0044695711694657803, 0.0059293867088854313, 0.0057556112296879292, 0.0052173682488501072, 0.0052444655448198318, 0.0041648400947451591, 0.0051556583493947983, 0.0077807595953345299, 0.0040350127965211868, 0.0046833199448883533, 0.0044318344444036484, 0.0070861685089766979, 0.0042664334177970886, 0.0059251617640256882, 0.005101486574858427, 0.0049208975397050381, 0.0058679264038801193, 0.0048449477180838585, 0.0068504693917930126, 0.0051966886967420578, 0.0048606842756271362, 0.0055783814750611782, 0.00508152786642313, 0.0065925479866564274, 0.0050521711818873882, 0.0063558970578014851, 0.0052717933431267738, 0.0061022308655083179, 0.0038371644914150238, 0.0044641918502748013, 0.0059236437082290649, 0.0038953004404902458, 0.0064651216380298138, 0.0052475137636065483, 0.0063082990236580372, 0.0046656602062284946, 0.0038485364057123661, 0.0063375663012266159, 0.0049038776196539402, 0.0060801715590059757, 0.0040773302316665649, 0.0045867431908845901, 0.0043630655854940414, 0.0051136491820216179, 0.0064109242521226406, 0.0060888072475790977, 0.00432943319901824, 0.0040209623984992504, 0.0050590592436492443, 0.0068159131333231926, 0.0045260908082127571, 0.0066800862550735474, 0.0043295701034367085, 0.0052623092196881771, 0.0055888076312839985, 0.0056461361236870289, 0.0060321725904941559, 0.0050569898448884487, 0.0050130439922213554, 0.0040790890343487263, 0.0069187772460281849, 0.005565327126532793, 0.0047124582342803478, 0.0041291327215731144, 0.0070502539165318012, 0.0049174772575497627, 0.0066394614987075329, 0.0079436702653765678, 0.0049625704996287823, 0.0041570058092474937, 0.0058790836483240128, 0.0050903744995594025, 0.0052138986065983772, 0.0043626460246741772, 0.0061829178594052792, 0.005093245767056942, 0.0052690980955958366, 0.0048530683852732182, 0.0049767540767788887, 0.0045974045060575008, 0.0055208527483046055, 0.0043668304570019245, 0.0051833516918122768, 0.0036556941922754049, 0.0048525766469538212, 0.0054922844283282757, 0.0052815312519669533, 0.0052791074849665165, 0.0041452515870332718, 0.0064856121316552162, 0.0049248230643570423, 0.0051644849590957165, 0.0070610982365906239, 0.0059116804040968418, 0.006763828918337822, 0.0045310622081160545, 0.0045740990899503231, 0.0045781531371176243, 0.0054973862133920193, 0.0058209397830069065, 0.0048825982958078384, 0.0059726289473474026, 0.0040298691019415855, 0.0042206114158034325, 0.0039970548823475838, 0.0035326031502336264, 0.0043386146426200867, 0.0042672622948884964, 0.0069986339658498764, 0.0052370922639966011, 0.0060219485312700272, 0.0044960929080843925, 0.0070864553563296795, 0.005010153166949749, 0.0041130250319838524, 0.0053606303408741951, 0.0063652764074504375, 0.0061240661889314651, 0.0043936297297477722, 0.0067377248778939247, 0.0062581957317888737, 0.005568389780819416, 0.0073474226519465446, 0.0052651506848633289, 0.005161031149327755, 0.0059477463364601135, 0.0045922752469778061, 0.0046012420207262039, 0.0050609163008630276, 0.0043934728018939495, 0.0044422750361263752, 0.0062887961976230145, 0.0054709953255951405, 0.0044734273105859756, 0.0050197853706777096, 0.0054705217480659485, 0.0044369990937411785, 0.0040499987080693245, 0.0050883288495242596, 0.0072179799899458885, 0.0048445719294250011, 0.0042979288846254349, 0.005368212703615427, 0.0049819913692772388, 0.0041987234726548195, 0.0053722108714282513, 0.0064025293104350567, 0.0047398689202964306, 0.0048658554442226887, 0.0036509199999272823, 0.0060579841956496239, 0.0056929108686745167, 0.0045031094923615456, 0.0050681210123002529, 0.0048695667646825314, 0.0064042620360851288, 0.0056988196447491646, 0.006520361639559269, 0.0068071954883635044, 0.0049825282767415047, 0.0048320256173610687, 0.0044235009700059891, 0.0040893326513469219, 0.0059716878458857536, 0.0039965645410120487, 0.0041803363710641861, 0.0056159347295761108, 0.0050557181239128113, 0.0064944149926304817, 0.0055712061002850533, 0.0044870250858366489, 0.004305665846914053, 0.0051737520843744278, 0.0060398024506866932, 0.0048928768374025822, 0.0065679028630256653, 0.0047275228425860405, 0.0062996619381010532, 0.0053465450182557106, 0.0053710355423390865, 0.0040107821114361286, 0.0045171394012868404, 0.0048603750765323639, 0.0045721624046564102, 0.0056623928248882294, 0.0044019678607583046, 0.0046927342191338539, 0.0062434603460133076, 0.004345194436609745, 0.0058184992522001266, 0.0054473141208291054, 0.0054782889783382416, 0.0045516630634665489, 0.0049141859635710716, 0.0052366801537573338, 0.0045889993198215961, 0.0048541449941694736, 0.0073095019906759262, 0.0055051622912287712, 0.0057440167292952538, 0.0078682638704776764, 0.0046327258460223675, 0.0059900428168475628, 0.0050288154743611813, 0.0043792440555989742, 0.0054265544749796391, 0.0047284062020480633, 0.0053222258575260639, 0.0044900905340909958, 0.0056630424223840237, 0.0062947375699877739, 0.0051378132775425911, 0.0047831442207098007, 0.005150077398866415, 0.0053922859951853752, 0.0070358850061893463, 0.0062059313058853149, 0.0038447086699306965, 0.0071576391346752644, 0.0045807757414877415, 0.0051896045915782452, 0.004807058721780777, 0.0037122056819498539, 0.0068816347047686577, 0.0034714923240244389, 0.005288037471473217, 0.0049916780553758144, 0.0053866608068346977, 0.0040396843105554581, 0.0058026355691254139, 0.005766652524471283, 0.0058459537103772163, 0.0041438625194132328, 0.0067448178306221962, 0.0047287070192396641, 0.0061204922385513783, 0.004146612249314785, 0.0058616660535335541, 0.0037517014425247908, 0.0054252413101494312, 0.0066113322973251343, 0.0041013527661561966, 0.0063609126955270767, 0.0042126062326133251, 0.0052058030851185322, 0.0040627275593578815, 0.0046434015966951847, 0.0059052295982837677, 0.0063184476457536221, 0.004530884325504303, 0.0048230472020804882, 0.003775167278945446, 0.005599848460406065, 0.0052609997801482677, 0.0042412127368152142, 0.0040646232664585114, 0.0052907820791006088, 0.0056052319705486298, 0.0055593210272490978, 0.0068894489668309689, 0.007662053219974041, 0.0057195965200662613, 0.0045441235415637493, 0.005085404496639967, 0.003892483888193965, 0.0055596595630049706, 0.0059559685178101063, 0.0042620711028575897, 0.0046453224495053291, 0.0050586117431521416, 0.0057503506541252136, 0.0047838632017374039, 0.0037916414439678192, 0.0056344904005527496, 0.0041136802174150944, 0.0060042082332074642, 0.0055814431980252266, 0.0056365593336522579, 0.0042146383784711361, 0.0048085427843034267, 0.0050691524520516396, 0.003977388609200716, 0.0057047395966947079, 0.0051991944201290607, 0.0062909163534641266, 0.0044817458838224411, 0.0041693444363772869, 0.0063125616870820522, 0.0068349782377481461, 0.0051365639083087444, 0.0056432341225445271, 0.0062956470064818859, 0.004168141633272171, 0.003539747092872858, 0.0041791191324591637, 0.0038534058257937431, 0.004873709287494421, 0.0051326220855116844, 0.0056060049682855606, 0.0040088226087391376, 0.0048479214310646057, 0.0048131220974028111, 0.0050336737185716629, 0.0044928728602826595, 0.0039642895571887493, 0.0047550508752465248, 0.005066276527941227, 0.0062580821104347706, 0.0050058974884450436, 0.0042034178040921688, 0.006195547990500927, 0.0033818972297012806, 0.005107121542096138, 0.0048346235416829586, 0.0043264641426503658, 0.0047484631650149822, 0.0035226258914917707, 0.0066178399138152599, 0.0039658923633396626, 0.0044895983301103115, 0.0046861572191119194, 0.0054138298146426678, 0.0067781382240355015, 0.0051921033300459385, 0.005334251094609499, 0.005529564805328846, 0.0044677155092358589, 0.0066380701027810574, 0.0055763581767678261, 0.0055169225670397282, 0.0051338407211005688, 0.0051479330286383629, 0.0040999036282300949, 0.0048288814723491669, 0.0039386921562254429, 0.0060681216418743134, 0.0037793582305312157, 0.0084742875769734383, 0.0066953441128134727, 0.0056762374006211758, 0.0045752306468784809, 0.0056759780272841454, 0.0043341126292943954, 0.0042026974260807037, 0.0038294808473438025, 0.0063519440591335297, 0.0049712336622178555, 0.0054040160030126572, 0.0055239624343812466, 0.0040370626375079155, 0.006310279481112957, 0.00493280915543437, 0.0066996915265917778, 0.0053712590597569942, 0.0045042694546282291, 0.0057535474188625813, 0.004391595721244812, 0.003964434377849102, 0.0048424499109387398, 0.0053711016662418842, 0.0047536264173686504, 0.0043686111457645893, 0.0070983129553496838, 0.0069837090559303761, 0.0067423288710415363, 0.0051663331687450409, 0.0042868521995842457, 0.0058104903437197208, 0.004063023254275322, 0.0048772003501653671, 0.0042612403631210327, 0.0053301402367651463, 0.0044488552957773209, 0.0074058892205357552, 0.0053768390789628029, 0.0050889085978269577, 0.0050771608948707581, 0.0072441184893250465, 0.0043387236073613167, 0.0060329674743115902, 0.0047906171530485153, 0.0058124242350459099, 0.0056053441949188709, 0.0052135437726974487, 0.0047268467023968697, 0.0069651841185986996, 0.0057317526079714298, 0.005185465794056654, 0.0047777765430510044, 0.0044003608636558056, 0.0064143557101488113, 0.0066935154609382153, 0.004566107876598835, 0.0049694688059389591, 0.0054041324183344841, 0.0043916665017604828, 0.0044128065928816795, 0.0074913469143211842, 0.0042488332837820053, 0.0050207274034619331, 0.0050043514929711819, 0.0040186685509979725, 0.0039520463906228542, 0.0048956782557070255, 0.0038891476579010487, 0.0073130051605403423, 0.0045399176888167858, 0.0065199742093682289, 0.0044079022482037544, 0.0048340153880417347, 0.003519850317388773, 0.0045028147287666798, 0.0054169176146388054, 0.0037158532068133354, 0.0056385854259133339, 0.0041666729375720024, 0.0060534160584211349, 0.005299961194396019, 0.0046585854142904282, 0.0046219914220273495, 0.0041224528104066849, 0.0038390189874917269, 0.0045750918798148632, 0.0045280233025550842, 0.0060797980986535549, 0.0060151703655719757, 0.0046876375563442707, 0.0048791016452014446, 0.0055057480931282043, 0.0062468717806041241, 0.0054892366752028465, 0.00534392474219203, 0.0041329944506287575, 0.0053333188407123089, 0.0056535410694777966, 0.0061138318851590157, 0.0052726459689438343, 0.0056461775675415993, 0.0060492581687867641, 0.0031961505301296711, 0.004418584518134594, 0.0051881857216358185, 0.0034630047157406807, 0.0040356139652431011, 0.0041829082183539867, 0.0046067885123193264, 0.0043773707002401352, 0.0045403321273624897, 0.0035901013761758804, 0.0043226913549005985, 0.0045927152968943119, 0.0073844250291585922, 0.0053184940479695797, 0.006284395232796669, 0.0061565116047859192, 0.0057454141788184643, 0.0036993904504925013, 0.0038551888428628445, 0.00529490876942873, 0.0057480721734464169, 0.0039614583365619183, 0.005768198985606432, 0.0049578971229493618, 0.0059405569918453693, 0.0037984703667461872, 0.0061264527030289173, 0.0063135246746242046, 0.0056166546419262886, 0.0038795261643826962, 0.0054053380154073238, 0.0043513961136341095, 0.0049135354347527027, 0.0045197578147053719, 0.0047967764548957348, 0.0043675336055457592, 0.0047234832309186459, 0.005441104993224144, 0.0043707261793315411, 0.0051865600980818272, 0.0065845977514982224, 0.0049557420425117016, 0.0049651265144348145, 0.0064358646050095558, 0.0040982873179018497, 0.0041177598759531975, 0.0062015336006879807, 0.0046951966360211372, 0.0037779849953949451, 0.0064330613240599632, 0.0050499029457569122, 0.0044536273926496506, 0.0051324740052223206, 0.0057788514532148838, 0.0058025592006742954, 0.006299865897744894, 0.005677396897226572, 0.0057766679674386978, 0.0053270854987204075, 0.0056757982820272446, 0.0046667600981891155, 0.005751424003392458, 0.0053109112195670605, 0.00546667305752635, 0.0050675263628363609, 0.0039916299283504486, 0.0044277599081397057, 0.0048778699710965157, 0.0050995592027902603, 0.005400379654020071, 0.0043116360902786255, 0.0054492205381393433, 0.0047494824975728989, 0.0028134500607848167, 0.0068200826644897461, 0.0042829420417547226, 0.0045416755601763725, 0.0045021381229162216, 0.0049502192996442318, 0.003694155253469944, 0.0057529406622052193, 0.0046252128668129444, 0.0035732721444219351, 0.0048517221584916115, 0.0038105116691440344, 0.0052775354124605656, 0.0052844998426735401, 0.0045680715702474117, 0.0041560954414308071, 0.0030434008222073317, 0.0047595049254596233, 0.0065321982838213444, 0.0054870308376848698, 0.0044456594623625278, 0.0059947352856397629, 0.005651252344250679, 0.0039053137879818678, 0.0050622997805476189, 0.0037446729838848114, 0.0053732818923890591, 0.0049930443055927753, 0.005875742994248867, 0.0060143996961414814, 0.0050906841643154621, 0.0043510706163942814, 0.004692484624683857, 0.0048163835890591145, 0.004600385669618845, 0.004229844082146883, 0.0058950465172529221, 0.0057284636422991753, 0.0056824344210326672, 0.0037820311263203621, 0.004689428023993969, 0.0070209414698183537, 0.0047922255471348763, 0.0051146466284990311, 0.0049720555543899536, 0.0060174115933477879, 0.0071453382261097431, 0.0059870593249797821, 0.0047867647372186184, 0.0047899340279400349, 0.0058563593775033951, 0.005432620644569397, 0.0042560617439448833, 0.0040155509486794472, 0.0046852775849401951, 0.0051745134405791759, 0.005469747819006443, 0.0062644830904901028, 0.0048146662302315235, 0.0051156934350728989, 0.0069021349772810936, 0.0071720336563885212, 0.0040795160457491875, 0.0061603100039064884, 0.0051936274394392967, 0.0047271503135561943, 0.0041431994177401066, 0.0043042427860200405, 0.0058121387846767902, 0.0078143775463104248, 0.0042360993102192879, 0.0041525457054376602, 0.0031724900472909212, 0.0063699819147586823, 0.0052187829278409481, 0.0050680479034781456, 0.0056954794563353062, 0.0047503560781478882, 0.0034663670230656862, 0.0044575142674148083, 0.0044929422438144684, 0.0064520062878727913, 0.0054768798872828484, 0.0062960791401565075, 0.0056207906454801559, 0.0055933832190930843, 0.0046197297051548958, 0.0039713946171104908, 0.0054463199339807034, 0.0046494295820593834, 0.0066351350396871567, 0.0061630075797438622, 0.0055620456114411354, 0.0036354553885757923, 0.0056375316344201565, 0.0060538500547409058, 0.0061429888010025024, 0.0048274216242134571, 0.005547698587179184, 0.0057558021508157253, 0.0069250930100679398, 0.0052936729043722153, 0.0059466804377734661, 0.0053908252157270908, 0.0036470424383878708, 0.0037604821845889091, 0.0037862681783735752, 0.0050720786675810814, 0.0037113712169229984, 0.0056615271605551243, 0.006515825167298317, 0.0056527713313698769, 0.0053093270398676395, 0.0043861647136509418, 0.0043209320865571499, 0.0074872411787509918, 0.006029872689396143, 0.0045286240056157112, 0.0053604887798428535, 0.0052941520698368549, 0.0037216993514448404, 0.0052751451730728149, 0.0052462462335824966, 0.004477126058191061, 0.0045290538109838963, 0.0043639997020363808, 0.005459614098072052, 0.0040112254209816456, 0.0039136097766458988, 0.0058211875148117542, 0.0055267936550080776, 0.0051957191899418831, 0.0052790599875152111, 0.006998435128480196, 0.0043748160824179649, 0.004778561182320118, 0.0038121331017464399, 0.0041194986552000046, 0.0047770733945071697, 0.0057665882632136345, 0.0053694820962846279, 0.0054698372259736061, 0.0044058398343622684, 0.0038939446676522493, 0.0047401208430528641, 0.0048985788598656654, 0.0057430481538176537, 0.0043917614966630936, 0.0049144118092954159, 0.0047793942503631115, 0.0039974050596356392, 0.00352504663169384, 0.0059716110117733479, 0.0074203247204422951, 0.0054863947443664074, 0.0044520390219986439, 0.0066033340990543365, 0.006440452765673399, 0.004318412858992815, 0.0052172578871250153, 0.0040781251154839993, 0.0051077995449304581, 0.0041125407442450523, 0.004371370654553175, 0.004033123143017292, 0.004590142983943224, 0.0047327633947134018, 0.0059578255750238895, 0.0048930258490145206, 0.0040157046169042587, 0.003866617102175951, 0.0042615057900547981, 0.0054176365956664085, 0.0041775275021791458, 0.006336594931781292, 0.0047006122767925262, 0.0051597603596746922, 0.0053560133092105389, 0.0042530084028840065, 0.0055774669162929058, 0.0058217146433889866, 0.0056939865462481976, 0.0053191566839814186, 0.0061187213286757469, 0.0052257557399570942, 0.0050212452188134193, 0.0067582582123577595, 0.0040477979928255081, 0.0057535450905561447, 0.0064114434644579887, 0.0053562447428703308, 0.0050312499515712261, 0.0046850894577801228, 0.0050432099960744381, 0.005396026186645031, 0.0043046427890658379, 0.0041425437666475773, 0.0041805696673691273, 0.0058853118680417538, 0.0058635999448597431, 0.0047843889333307743, 0.0035696160048246384, 0.0058554899878799915, 0.003667821642011404, 0.0048681567423045635, 0.0057715452276170254, 0.0047558541409671307, 0.0057193958200514317, 0.0044100801460444927, 0.0063339793123304844, 0.0057406597770750523, 0.0051196524873375893, 0.0043565020896494389, 0.0052906977944076061, 0.0044965441338717937, 0.0052195573225617409, 0.0048294831067323685, 0.0040094656869769096, 0.0046373927034437656, 0.0056471037678420544, 0.0055106049403548241, 0.0054431739263236523, 0.0053548440337181091, 0.0037853820249438286, 0.004189356230199337, 0.0059184776619076729, 0.0049027213826775551, 0.0074327802285552025, 0.0043778014369308949, 0.0051073567010462284, 0.0044783963821828365, 0.0066647622734308243, 0.0051251421682536602, 0.0053358851000666618, 0.0053174961358308792, 0.0054655321873724461, 0.0066054523922502995, 0.0046077994629740715, 0.0035221346188336611, 0.005413801409304142, 0.0056763659231364727, 0.0064813075587153435, 0.0041259368881583214, 0.0060254759155213833, 0.0042372127063572407, 0.0043363389559090137, 0.0058236783370375633, 0.0054665100760757923, 0.006255412008613348, 0.0058906315825879574, 0.0043983780778944492, 0.0038404238875955343, 0.0049343602731823921, 0.0050819371826946735, 0.0045957658439874649, 0.0068890196271240711, 0.0081418305635452271, 0.0046908506192266941, 0.0038888517301529646, 0.0054337573237717152, 0.0059610488824546337, 0.0049137291498482227, 0.0065422705374658108, 0.0041568931192159653, 0.0051331198774278164, 0.0055689583532512188, 0.0052758650854229927, 0.0050339773297309875, 0.0052578463219106197, 0.0056399567984044552, 0.0048123393207788467, 0.0052486266940832138, 0.0040376419201493263, 0.0049453889951109886, 0.0044665830209851265, 0.0041218232363462448, 0.006265539675951004, 0.0047709932550787926, 0.0046176793985068798, 0.006194655317813158, 0.005073231179267168, 0.0048878868110477924, 0.0047499663196504116, 0.0049888668581843376, 0.0056857084855437279, 0.0048376657068729401, 0.0054700984619557858, 0.0056679043918848038, 0.007375841960310936, 0.0044133332557976246, 0.0058497642166912556, 0.0063974750228226185, 0.0046689794398844242, 0.0035578438546508551, 0.0055346861481666565, 0.0052640917710959911, 0.0062284148298203945, 0.0058950884267687798, 0.0050454777665436268, 0.0060311206616461277, 0.0045141400769352913, 0.0062580825760960579, 0.0043243700638413429, 0.0059118643403053284, 0.0045265397056937218, 0.00574480090290308, 0.0049093193374574184, 0.0067431656643748283, 0.0046368604525923729, 0.0052484557963907719, 0.0044206748716533184, 0.0063646691851317883, 0.0052671576850116253, 0.0047662500292062759, 0.0049882992170751095, 0.0045688813552260399, 0.0050917943008244038, 0.0051278630271553993, 0.0053043877705931664, 0.0054501262493431568, 0.0043581402860581875, 0.0038545865099877119, 0.0053388928063213825, 0.0060892272740602493, 0.0050841709598898888, 0.004775454755872488, 0.0048530134372413158, 0.00754213472828269, 0.0049302675761282444, 0.0049616312608122826, 0.0047980975359678268, } };
const TfArray<1280, int> quant9_zero = { 1280, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[16] = { -11319, -9468, -6030, -38058, 23486, -19119, -14532, -30113, -2272, -39227, 6904, 17049, -37496, -124, 11579, 10816, };
const TfArray<1, int> tensor_dimension10 = { 1, { 16 } };
const TfArray<16, float> quant10_scale = { 16, { 0.00014594454842153937, 0.00013756881526205689, 0.00015487162454519421, 0.00021228728292044252, 0.00013339909492060542, 0.00013050364213995636, 9.9535107437986881e-05, 0.00013499961642082781, 0.0001510573347331956, 0.00011212034587515518, 0.00011987381003564224, 9.9147102446295321e-05, 0.00012740681995637715, 0.00014839466894045472, 0.00017585225577931851, 0.0001058718771673739, } };
const TfArray<16, int> quant10_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[16*1*1*48] = { 
  /* [0][0][][] */ -11,-41,-1,-27,-6,69,-53,-28,-7,99,15,-10,-28,7,7,-100,68,-77,-37,10,22,-30,-61,-24,-48,13,16,-121,36,-23,-24,0,-20,-27,51,-1,12,-41,127,-14,33,12,-16,-3,21,11,33,0, 
  /* [1][0][][] */ 2,23,23,50,49,47,25,16,-10,41,-29,37,23,-70,-49,-115,-46,-62,-23,-42,-83,-70,-42,-31,115,1,31,51,56,-37,-21,39,-18,117,-44,-50,33,68,18,-58,100,-58,-79,-95,-119,-64,127,40, 
  /* [2][0][][] */ -30,-12,-26,67,-64,-36,35,21,-3,-63,-17,50,-50,-89,45,-15,-70,-1,-41,79,-97,19,-10,-11,-44,-13,-38,-32,0,-23,0,11,3,68,44,-82,-14,-39,-76,-4,127,92,31,37,14,21,-28,2, 
  /* [3][0][][] */ -45,-19,-26,30,72,50,53,44,49,-43,37,-4,36,28,-37,-30,56,-9,16,63,5,16,61,23,-33,-32,22,38,5,-24,30,-52,30,127,32,-3,33,-20,62,-21,5,-5,32,13,-9,-22,20,31, 
  /* [4][0][][] */ -4,5,-90,54,-20,28,56,43,31,-127,46,3,-12,126,12,-65,101,-10,-12,125,43,-25,12,16,-28,-11,5,-68,43,-35,1,13,-56,-32,-25,-6,12,-4,-61,-19,-97,-33,3,2,-15,-103,8,-20, 
  /* [5][0][][] */ -39,-24,7,127,7,16,-12,4,3,-66,72,-55,25,33,-7,-28,31,20,-39,-16,-66,-10,-38,-48,37,-9,-53,-26,-27,16,-28,104,-8,116,20,88,-53,-43,-42,21,-78,-18,15,27,45,43,22,-37, 
  /* [6][0][][] */ -11,69,-1,-47,-24,-35,-30,52,15,21,-61,48,-2,-45,16,-11,-20,15,-6,-84,-25,18,54,15,86,-2,-12,-26,16,-83,3,21,-19,21,3,8,44,99,44,28,-41,-2,34,17,58,127,-43,9, 
  /* [7][0][][] */ 21,-32,-34,-38,-7,4,-20,34,32,-71,-25,-29,35,-100,-2,16,-69,37,6,127,-97,-1,24,35,106,-18,-34,-16,-21,30,43,119,41,-73,14,71,-36,-72,107,-5,64,-58,38,89,-7,-29,12,-21, 
  /* [8][0][][] */ 23,-20,51,10,11,-5,-23,-60,-63,61,-4,-30,-33,-1,3,35,-30,-28,3,127,13,-20,-80,-51,-7,37,-13,-15,-5,-83,-39,-45,-33,4,-33,33,78,-19,-36,38,-26,-9,-17,-13,63,1,12,-4, 
  /* [9][0][][] */ -14,45,-32,-26,31,-37,39,4,-11,127,36,-31,37,-11,7,54,80,63,-27,16,-29,54,32,-7,-15,22,-31,18,-11,64,18,-99,64,40,-54,76,-39,65,-11,51,117,-17,25,21,86,-105,-30,9, 
  /* [10][0][][] */ -34,-51,-46,12,57,56,-95,10,57,-63,-71,55,-68,52,-100,53,27,-22,-43,11,119,-67,63,14,83,23,-63,-111,-80,-69,-47,-55,-4,92,-67,26,-3,-43,-7,76,87,-90,-127,-34,107,-46,-89,34, 
  /* [11][0][][] */ 27,59,55,-87,61,71,-53,-10,53,-32,45,-127,45,-9,-91,7,-54,27,99,-44,81,-35,16,55,-65,-14,8,-123,19,-38,11,-69,119,-77,59,104,33,12,-51,-15,49,-26,-29,24,-17,87,35,-17, 
  /* [12][0][][] */ -47,2,20,27,38,67,-63,-9,-11,86,-8,13,3,7,-49,-67,4,-38,6,127,41,-49,8,-28,57,28,25,-79,74,56,-24,41,-41,57,70,-31,-59,2,-13,-7,-29,-36,-12,-40,-39,48,26,6, 
  /* [13][0][][] */ 10,-41,-81,3,-5,9,12,49,76,127,-11,3,28,-28,12,-33,-38,-21,33,-74,10,-8,59,28,4,-40,18,-20,9,12,37,59,12,-75,23,19,-18,-78,-70,-12,-21,-5,-5,47,-3,41,11,-7, 
  /* [14][0][][] */ 0,-13,-27,-42,-45,-44,-61,27,36,-64,50,-78,42,-11,12,9,-30,-23,-18,14,34,-19,80,58,-6,-30,17,-2,43,19,13,35,-25,-59,-127,25,-39,3,41,-42,55,-9,-21,-14,-82,64,1,-11, 
  /* [15][0][][] */ 40,13,62,-63,43,98,57,53,19,-86,0,26,12,-60,13,-118,-26,-95,49,-66,-15,31,-7,-2,8,-31,127,24,31,108,83,-93,29,-8,61,-20,-49,-6,-28,-33,-16,30,72,113,58,12,88,86, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant11_scale = { 16, { 0.0099452603608369827, 0.0093745039775967598, 0.010553588159382343, 0.014466127380728722, 0.0090903621166944504, 0.0088930539786815643, 0.0067827305756509304, 0.0091994283720850945, 0.010293667204678059, 0.007640340831130743, 0.0081686936318874359, 0.0067562907934188843, 0.0086820237338542938, 0.010112222284078598, 0.011983294971287251, 0.007214544340968132, } };
const TfArray<16, int> quant11_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int32_t tensor_data12[48] = { -4233, 12593, -450, 5080, -14541, 44803, -14884, 31665, 38943, -295, 37089, -1976, 31776, -1156, 18288, -360, -3962, 28497, -11119, 21386, 464, 32059, 1966, 30224, 3494, 3115, -4492, -9039, -2326, 879, -8085, 29322, -2744, 28224, -336, -4085, -190, -311, 19777, -527, 6405, 33915, -17896, -5528, 2607, -13105, -4783, -3005, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 6.8398745497688651e-05, 9.3585091235581785e-05, 6.467627827078104e-05, 0.00010016134910983965, 0.00012827801401726902, 3.443991590756923e-05, 5.4189891670830548e-05, 3.2290063245454803e-05, 3.255499541410245e-05, 0.00019989475549664348, 3.148020914522931e-05, 8.952005737228319e-05, 3.95802671846468e-05, 0.00014786422252655029, 7.4805415351875126e-05, 9.1498986876104027e-05, 6.8577879574149847e-05, 4.6715638745808974e-05, 7.5302872573956847e-05, 0.0002400904631940648, 0.0001448638504371047, 3.5125824069837108e-05, 4.0114198782248423e-05, 3.0387669539777562e-05, 8.4910432633478194e-05, 9.9039498309139162e-05, 7.4794625106733292e-05, 0.00012517331924755126, 5.1540526328608394e-05, 8.9029941591434181e-05, 6.0052509070374072e-05, 7.6802563853561878e-05, 7.3405186412855983e-05, 9.072598913917318e-05, 7.4449431849643588e-05, 9.046014747582376e-05, 0.00012684283137787133, 0.00011611155787250027, 0.00017430323350708932, 7.1779133577365428e-05, 7.7618868090212345e-05, 4.0226259443443269e-05, 5.5850923672551289e-05, 4.2021471017505974e-05, 8.5658379248343408e-05, 0.00011246894428040832, 5.6456861784681678e-05, 6.9321504270192236e-05, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[1*3*3*48] = { 
  /* [0][0][][] */ 41,-8,-20,39,7,-89,21,-84,-114,0,-122,3,-35,0,-6,-3,13,10,22,-5,-13,-17,2,-111,16,13,-3,6,18,-8,15,15,9,15,9,39,-8,-13,3,-45,-16,-55,53,23,-5,19,9,6, 22,6,21,127,7,-127,39,-17,-127,2,-86,39,-51,51,-33,35,124,-8,38,-2,-41,-58,-36,-127,85,-62,-1,31,87,3,53,68,-20,-48,31,127,-7,-20,8,-8,-38,-88,108,62,-6,65,70,-3, 41,-6,-18,42,6,-82,23,-69,-107,1,-126,1,-12,0,-5,-4,12,0,27,-6,-12,-17,0,-109,11,15,1,7,22,-4,16,10,3,13,8,34,-6,-15,2,38,-15,-39,58,28,-17,22,20,6, 
  /* [0][1][][] */ 25,-12,8,12,21,-102,36,-118,-44,-2,-87,21,-79,1,-49,17,2,-23,18,-6,-15,-111,94,-77,2,127,24,9,56,3,36,-1,32,11,25,-1,-3,25,-2,-127,-1,-81,32,64,19,26,24,14, 127,-127,127,-100,127,60,127,-75,-86,127,-55,127,-89,-127,-127,127,127,-127,127,-127,-112,-127,127,-126,127,-123,127,127,127,127,127,-127,127,-127,127,42,127,127,-127,10,127,-127,127,127,127,127,127,-32, 23,-8,3,18,18,-84,39,-127,-42,-3,-87,22,-55,7,-49,18,1,-44,18,-6,-15,-105,93,-71,-4,110,30,7,52,2,24,2,29,12,22,-11,-5,22,3,117,-1,-65,39,84,-20,29,47,21, 
  /* [0][2][][] */ 8,-17,-3,-5,20,-96,25,-50,-57,0,-88,-6,-59,26,-19,-2,-3,-6,3,-3,26,-90,52,-87,-11,33,-1,10,-13,-5,16,18,12,14,0,-33,-9,4,0,-23,11,0,10,23,3,24,-10,27, -2,-22,82,-41,34,-109,104,10,-109,5,-127,-68,-127,127,-55,15,-10,-79,19,-11,127,-97,116,-81,-53,-56,55,23,54,5,10,-56,30,51,33,-106,-2,38,-13,-4,124,53,1,73,41,73,5,127, 10,-20,-3,-8,21,-80,25,-44,-51,1,-85,-4,-54,26,-19,-1,2,-5,-1,-3,28,-72,56,-82,-9,28,3,9,-6,-6,13,17,7,11,-1,-27,-10,-2,-1,18,13,13,4,19,-2,30,0,31, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0058264839462935925, 0.007971959188580513, 0.0055093886330723763, 0.0085321515798568726, 0.010927244089543819, 0.002933732233941555, 0.0046161157079041004, 0.0027505990583449602, 0.0027731670998036861, 0.017027849331498146, 0.0026816125027835369, 0.00762568274512887, 0.0033716084435582161, 0.012595676816999912, 0.0063722296617925167, 0.0077942563220858574, 0.0058417432010173798, 0.0039794282056391239, 0.0064146053045988083, 0.020451882854104042, 0.012340093031525612, 0.00299216085113585, 0.0034170907456427813, 0.0025885454379022121, 0.0072330161929130554, 0.0084365876391530037, 0.0063713104464113712, 0.010662773624062538, 0.00439043203368783, 0.00758393295109272, 0.0051155174151062965, 0.0065423552878201008, 0.0062529528513550758, 0.0077284094877541065, 0.0063419057987630367, 0.0077057634480297565, 0.010804989375174046, 0.0098908552899956703, 0.014847858808934689, 0.0061144391074776649, 0.0066118915565311909, 0.0034266365692019463, 0.0047576092183589935, 0.0035795599687844515, 0.0072967298328876495, 0.0095805628225207329, 0.0048092254437506199, 0.0059050880372524261, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 3 };
const ALIGN(16) int32_t tensor_data14[48] = { -534, 4014, 2650, 33580, 10413, 7978, 9753, 2444, 5373, 20163, 2816, 2955, 5051, 34606, 7007, 5192, 9193, 7606, 6466, 30626, 20872, 4704, 2652, 4761, 2427, 13341, 325, 12089, -1404, 1672, 1568, 10409, 4598, 13782, 3716, 17423, -1099, -3342, 18843, 11910, 7200, 3360, 8871, 3219, 6713, 33707, 7887, 1142, };
const TfArray<1, int> tensor_dimension14 = { 1, { 48 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00010024536459241062, 0.00011217650171602145, 0.00012467737542465329, 3.0607552616856992e-05, 6.83515754644759e-05, 7.3368064477108419e-05, 7.9305253166239709e-05, 0.00010427603410789743, 8.2712889707181603e-05, 4.7131998144323006e-05, 6.7565437348093837e-05, 7.4765266617760062e-05, 7.4078037869185209e-05, 2.8356829716358334e-05, 8.2762126112356782e-05, 7.7485849033109844e-05, 5.8662320952862501e-05, 7.2898968937806785e-05, 0.00011538070975802839, 3.2833322620717809e-05, 4.7999612434068695e-05, 0.00010090404248330742, 0.00010049479169538245, 8.2316706539131701e-05, 9.2628579295706004e-05, 5.9095018514199182e-05, 8.8872919150162488e-05, 6.3696264987811446e-05, 0.00012852440704591572, 0.00017876969650387764, 0.00012477097334340215, 4.9561884225113317e-05, 9.8853444796986878e-05, 6.308030424406752e-05, 8.5101557488087565e-05, 5.2157323807477951e-05, 0.00017226309864781797, 0.00010540412768023089, 5.1802555390167981e-05, 6.0771159041905776e-05, 5.8268240536563098e-05, 8.2506892795208842e-05, 7.3624432843644172e-05, 0.00011802233348134905, 7.9814621130935848e-05, 2.8782846129615791e-05, 7.9694080341141671e-05, 8.8041044364217669e-05, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[48*1*1*8] = { 
  /* [0][0][][] */ 73,55,-84,-36,94,127,1,-41, 
  /* [1][0][][] */ 127,42,-18,66,-42,-83,3,-11, 
  /* [2][0][][] */ -16,-27,-20,50,39,11,-83,127, 
  /* [3][0][][] */ -51,125,-40,76,-76,-127,40,97, 
  /* [4][0][][] */ -51,-34,40,-85,3,-56,-127,-55, 
  /* [5][0][][] */ -102,-32,-36,-127,95,53,60,51, 
  /* [6][0][][] */ -76,-13,36,-127,33,26,57,-84, 
  /* [7][0][][] */ 106,68,13,-48,-109,-17,127,-36, 
  /* [8][0][][] */ -54,-32,-20,54,77,127,-102,101, 
  /* [9][0][][] */ -27,5,27,7,-30,-27,127,-6, 
  /* [10][0][][] */ -119,-15,127,66,-125,-66,-85,-125, 
  /* [11][0][][] */ -89,127,-5,100,-77,39,-38,-14, 
  /* [12][0][][] */ 69,-102,-107,-55,127,-33,65,43, 
  /* [13][0][][] */ 73,30,104,-127,94,-22,11,-49, 
  /* [14][0][][] */ -19,-11,41,-81,-15,-50,-127,-67, 
  /* [15][0][][] */ 106,106,64,82,-127,-63,-12,8, 
  /* [16][0][][] */ -49,-83,-66,127,-59,106,91,66, 
  /* [17][0][][] */ 70,-50,-101,47,65,-127,55,92, 
  /* [18][0][][] */ 0,127,21,-55,-7,-1,0,-2, 
  /* [19][0][][] */ -62,-127,-2,6,-44,-52,-56,-68, 
  /* [20][0][][] */ -55,6,-46,-6,14,17,29,127, 
  /* [21][0][][] */ 32,26,-22,37,18,70,70,127, 
  /* [22][0][][] */ -78,-7,-16,12,25,17,127,109, 
  /* [23][0][][] */ -11,-47,-119,-127,100,-85,-58,-82, 
  /* [24][0][][] */ -55,78,-127,-12,-13,-8,28,-16, 
  /* [25][0][][] */ 103,-126,-7,-127,-83,6,96,-9, 
  /* [26][0][][] */ 115,56,-127,23,64,-127,-5,61, 
  /* [27][0][][] */ 95,72,-33,127,3,-99,78,18, 
  /* [28][0][][] */ -17,13,44,-9,24,127,47,40, 
  /* [29][0][][] */ 61,-23,-19,-59,-127,31,5,39, 
  /* [30][0][][] */ 127,64,-59,-1,4,45,-115,-11, 
  /* [31][0][][] */ 46,-17,54,-127,115,-107,87,82, 
  /* [32][0][][] */ 43,-44,127,54,22,-3,-45,-18, 
  /* [33][0][][] */ 27,-12,-21,7,32,127,-10,-73, 
  /* [34][0][][] */ -15,90,124,51,-127,81,40,82, 
  /* [35][0][][] */ -21,3,-127,-27,41,25,70,36, 
  /* [36][0][][] */ -63,27,19,61,127,-27,-8,-33, 
  /* [37][0][][] */ -127,-41,22,-73,44,84,-5,18, 
  /* [38][0][][] */ 19,24,-17,-127,-8,-7,17,-23, 
  /* [39][0][][] */ -21,-108,-127,-98,33,-46,111,29, 
  /* [40][0][][] */ 100,-127,116,-25,82,60,39,73, 
  /* [41][0][][] */ 0,-20,-125,22,10,43,127,48, 
  /* [42][0][][] */ -104,-24,-81,-6,-49,60,-39,127, 
  /* [43][0][][] */ 1,-69,-71,23,127,-13,53,-14, 
  /* [44][0][][] */ -66,-106,-127,-74,53,-23,73,43, 
  /* [45][0][][] */ -112,63,52,-61,-8,-113,52,127, 
  /* [46][0][][] */ -13,-15,-71,-37,-12,-71,127,-102, 
  /* [47][0][][] */ 75,-93,-12,-120,-62,70,47,127, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant15_scale = { 48, { 0.0029256823472678661, 0.0032738950103521347, 0.003638735506683588, 0.00089328794274479151, 0.0019948552362620831, 0.0021412626374512911, 0.0023145405575633049, 0.0030433181673288345, 0.0024139932356774807, 0.0013755573891103268, 0.0019719116389751434, 0.0021820401307195425, 0.0021619831677526236, 0.00082760007353499532, 0.0024154302664101124, 0.0022614409681409597, 0.0017120722914114594, 0.0021275719627737999, 0.0033674105070531368, 0.00095824751770123839, 0.0014008788857609034, 0.0029449060093611479, 0.0029329617973417044, 0.0024024306330829859, 0.0027033847291022539, 0.0017247006762772799, 0.0025937750469893217, 0.0018589890096336603, 0.0037510120309889317, 0.005217431578785181, 0.0036414675414562225, 0.0014464741107076406, 0.0028850587550550699, 0.001841012155637145, 0.002483706921339035, 0.0015222225338220596, 0.005027534905821085, 0.0030762418173253536, 0.001511868555098772, 0.0017736192094162107, 0.0017005709232762456, 0.0024079810827970505, 0.0021487446501851082, 0.0034445067867636681, 0.0023294065613299608, 0.00084003346273675561, 0.0023258887231349945, 0.0025694966316223145, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[8] = { -3603, -4692, 39420, -4880, 36049, -10348, -1673, 28581, };
const TfArray<1, int> tensor_dimension16 = { 1, { 8 } };
const TfArray<8, float> quant16_scale = { 8, { 2.7863830837304704e-05, 2.6932730179396458e-05, 2.092132308462169e-05, 2.3273320039152168e-05, 3.2320502214133739e-05, 2.0541279809549451e-05, 1.8041171642835252e-05, 2.268122261739336e-05, } };
const TfArray<8, int> quant16_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[8*1*1*48] = { 
  /* [0][0][][] */ 24,38,-29,-9,6,-6,-14,-45,28,12,61,-47,1,-18,36,31,-80,21,18,4,21,-6,45,-9,43,16,-1,8,3,-53,10,-127,-29,-36,-53,23,-5,93,4,-19,9,-54,36,8,21,73,31,-34, 
  /* [1][0][][] */ 51,-62,39,-57,34,-9,24,3,-59,11,-27,24,-3,14,47,1,106,7,-127,-18,-16,54,-23,-39,47,-58,53,-45,-10,19,3,103,-8,-34,44,0,3,51,3,-62,-32,69,28,8,-35,-36,18,33, 
  /* [2][0][][] */ -26,-64,-21,7,14,38,53,-7,-74,56,-49,-65,-52,-48,-62,-70,26,73,81,-99,127,29,-45,-6,47,-24,54,-39,-49,23,-67,-102,-10,0,-64,-87,57,-41,11,2,9,-3,-63,3,-22,7,18,-82, 
  /* [3][0][][] */ -22,33,9,39,30,-36,27,-40,-13,16,30,40,19,-27,75,50,-44,29,127,-16,-51,-8,-16,14,-4,-123,-5,62,-22,-44,-42,58,-36,-90,39,26,25,-16,-44,1,-16,-90,8,15,71,-45,19,22, 
  /* [4][0][][] */ 9,21,-22,3,4,24,10,-8,65,-21,-36,-38,-61,0,-63,-5,-17,-16,-54,20,19,-18,46,-2,-13,-70,-39,9,-42,-4,-2,-55,-10,-11,-22,-32,44,-127,-28,24,31,31,-57,44,-28,-29,-19,-37, 
  /* [5][0][][] */ 40,-42,-8,-32,33,58,127,34,-37,-49,32,-17,18,45,-31,-25,22,0,6,68,-27,-19,15,-1,-24,-9,-29,105,-84,60,74,-19,64,62,-14,48,18,-45,-21,31,42,-22,19,0,-19,-25,3,9, 
  /* [6][0][][] */ 37,8,58,-34,105,-38,84,-127,-14,-57,42,-70,-39,65,69,-13,-39,30,-23,76,-77,-40,14,19,125,26,-26,-8,-51,36,-5,-35,-1,52,-75,2,66,79,-94,-69,-50,-36,-48,41,-5,23,2,11, 
  /* [7][0][][] */ 91,-11,1,-43,-109,66,-32,32,-61,14,44,-16,-15,127,73,-48,26,-70,-52,-2,38,-124,18,57,-88,-66,41,40,43,18,-96,-68,-13,-3,10,-15,-103,-98,-6,33,38,-38,88,87,-70,-16,48,29, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant17_scale = { 8, { 0.002525565680116415, 0.0024411710910499096, 0.0018962997710332274, 0.0021094838157296181, 0.0029295163694769144, 0.0018618527101352811, 0.0016352439997717738, 0.0020558163523674011, } };
const TfArray<8, int> quant17_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int32_t tensor_data18[48] = { -19403, -4039, 2447, -1759, -4697, -815, -3192, -18823, -15375, -11599, -556, 14031, 3031, 26360, -408, 24471, -12470, -5000, -2528, 12249, -8505, -17821, 10006, -6451, -8828, 27599, -1235, -132, 27576, 81, 5355, -7934, -10608, 26817, -3346, 158, -10988, 9135, -13881, -627, -2908, 18027, -851, 30466, -3664, -1214, -15560, -48, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 5.7683024351717904e-05, 8.3953775174450129e-05, 9.8619850177783519e-05, 9.6064257377292961e-05, 0.00019452531705610454, 0.00010133430623682216, 0.0001522588572697714, 6.1310405726544559e-05, 4.5815071644028649e-05, 9.3439550255425274e-05, 8.3620980149134994e-05, 9.2662718088831753e-05, 8.5027437307871878e-05, 5.3235857194522396e-05, 6.7561137257143855e-05, 6.1758502852171659e-05, 8.0753568909130991e-05, 9.9182339909020811e-05, 0.00012379561667330563, 0.00010922332876361907, 0.0001095306288334541, 9.1128822532482445e-05, 9.9605014838743955e-05, 7.6314878242556006e-05, 5.6150496675400063e-05, 9.8585056548472494e-05, 0.00012084576883353293, 0.00011785575043177232, 6.389911868609488e-05, 0.00014484685380011797, 0.00011020026431651786, 7.0939524448476732e-05, 0.00012391182826831937, 4.4209904444869608e-05, 0.00011549205373739824, 0.00010972809104714543, 7.9804129200056195e-05, 4.2830048187170178e-05, 6.4572981500532478e-05, 7.0837180828675628e-05, 0.00013794998812954873, 6.5597589127719402e-05, 5.9015645092586055e-05, 5.5852102377684787e-05, 7.3159520979970694e-05, 5.879765740246512e-05, 6.3735533331055194e-05, 7.441221532644704e-05, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[1*3*3*48] = { 
  /* [0][0][][] */ 78,11,-24,69,-18,9,-8,-21,9,12,49,-61,64,-71,20,-16,32,15,127,14,40,53,-24,-115,41,-54,-43,-52,-99,26,0,-5,41,-39,11,-7,26,122,29,52,-69,-24,92,-90,-100,-127,-47,37, 65,73,-45,-1,0,-127,-33,54,127,5,31,5,-72,-83,95,-127,127,71,-92,3,127,127,-127,95,8,-75,-127,-102,-127,14,-77,101,66,-127,-43,127,127,35,63,127,53,15,104,-127,65,-16,19,-57, 111,-14,31,83,-20,-11,-17,-27,-1,18,-52,-54,76,-59,0,-10,33,13,124,21,37,22,-18,33,6,-60,22,-52,-92,-15,-2,-1,43,-36,-1,-4,25,127,28,36,-74,-44,82,-78,-127,84,-28,-59, 
  /* [0][1][][] */ 56,-32,-127,39,-22,4,-45,113,102,49,95,43,119,-90,47,-80,76,-16,79,13,28,38,-83,-19,127,-87,-71,-15,-76,-20,25,86,61,-103,-60,11,4,73,91,-20,-62,8,-18,-60,-31,-102,65,64, 53,126,87,-32,127,-29,127,21,73,127,13,-85,-23,-45,94,-106,20,-10,-94,-127,-41,79,80,23,-6,-14,59,127,-41,127,127,87,-34,-55,111,12,-9,-107,127,-59,127,33,71,-62,85,7,127,67, 59,-90,31,59,-27,-1,-51,127,103,41,-127,57,127,-93,32,-79,57,-22,88,19,22,48,-80,111,100,-89,-76,-14,-57,-66,25,127,65,-105,-23,27,10,70,64,-49,-59,8,34,-24,-57,89,84,-127, 
  /* [0][2][][] */ 114,-20,-34,127,-11,23,-17,70,54,-15,40,-29,27,-127,-29,-44,-19,46,95,44,16,5,55,-127,55,-32,21,-4,-27,-24,-18,32,10,-49,-58,-108,9,93,-3,-45,-13,-125,-127,-77,97,-81,40,17, 11,-127,65,13,-26,51,-48,48,107,78,32,-127,-24,-96,-127,-6,-57,127,-72,-94,28,26,-41,54,75,-127,50,39,-72,-58,-71,-12,127,-44,127,6,99,120,57,-30,28,-84,-102,-79,1,25,34,77, 127,-26,-4,101,-5,26,-16,62,41,-5,-70,-29,-27,-113,-14,-13,-6,52,81,50,24,11,54,28,38,-30,-14,-3,-28,-46,-38,32,-8,-50,-7,-61,12,85,-6,-50,-6,-127,-71,-37,92,84,60,-80, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0051245051436126232, 0.0074583739042282104, 0.0087612941861152649, 0.0085342573001980782, 0.017281444743275642, 0.0090024434030056, 0.013526532799005508, 0.0054467581212520599, 0.0040701674297451973, 0.0083010811358690262, 0.0074288086034357548, 0.00823206827044487, 0.0075537571683526039, 0.0047294232062995434, 0.0060020671226084232, 0.0054865670390427113, 0.0071740704588592052, 0.008811265230178833, 0.010997884906828403, 0.0097032971680164337, 0.0097305970266461372, 0.0080957980826497078, 0.0088488152250647545, 0.006779741495847702, 0.0049883569590747356, 0.0087582031264901161, 0.010735823772847652, 0.0104701928794384, 0.005676737055182457, 0.012868057005107403, 0.0097900871187448502, 0.0063022002577781677, 0.011008209548890591, 0.0039275661110877991, 0.010260204784572124, 0.0097481394186615944, 0.0070897229015827179, 0.0038049810100346804, 0.0057366024702787399, 0.0062931077554821968, 0.012255345471203327, 0.0058276276104152203, 0.0052428939379751682, 0.0049618477933108807, 0.0064994227141141891, 0.005223528016358614, 0.0056622042320668697, 0.0066107106395065784, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 3 };
const ALIGN(16) int32_t tensor_data20[48] = { 1859, 1945, 2106, -2115, 6515, 5310, 9346, 7267, 5261, -1970, 17605, 7412, -3237, 10419, 12605, 2920, 13387, 517, 50759, 14131, 6408, 21644, 13708, 5115, 3862, 24916, 524, 7804, 6681, -2834, 2300, 13266, 191, 5204, 1601, 13216, 3185, 8941, 1155, 3396, -1344, 14735, 11475, 7651, 4769, 10679, 1390, 4990, };
const TfArray<1, int> tensor_dimension20 = { 1, { 48 } };
const TfArray<48, float> quant20_scale = { 48, { 8.5907486209180206e-05, 0.00011385008110664785, 0.0001019685878418386, 0.00012034852261422202, 9.6426891104783863e-05, 8.7146800069604069e-05, 7.0742411480750889e-05, 8.041480032261461e-05, 7.6911506766919047e-05, 0.00012247297854628414, 4.653786527342163e-05, 4.9627426051301882e-05, 5.5669748689979315e-05, 6.0705475334543735e-05, 6.40725193079561e-05, 9.8720622190739959e-05, 4.99654961458873e-05, 8.1372418208047748e-05, 1.9718154362635687e-05, 5.6935521570267156e-05, 7.3898489063140005e-05, 4.0468650695402175e-05, 6.08990085311234e-05, 0.0001014723238768056, 7.3713606980163604e-05, 3.7845034967176616e-05, 0.0001014936133287847, 8.5942825535312295e-05, 7.3262141086161137e-05, 0.00010031679994426668, 7.6712633017450571e-05, 3.9461392589146271e-05, 8.9752349595073611e-05, 0.00010335713886888698, 0.00010192079207627103, 5.1448958402033895e-05, 9.0387737145647407e-05, 7.0220499765127897e-05, 0.00010485982784302905, 7.6526222983375192e-05, 7.4656280048657209e-05, 4.8766189138405025e-05, 6.8732908403035253e-05, 9.8495525890029967e-05, 9.0534995251800865e-05, 6.3043786212801933e-05, 7.6915188401471823e-05, 7.440873741870746e-05, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[48*1*1*8] = { 
  /* [0][0][][] */ -92,-113,47,47,1,-127,-40,-86, 
  /* [1][0][][] */ 34,-50,-110,37,58,-127,7,-30, 
  /* [2][0][][] */ -5,29,-17,26,-109,1,127,30, 
  /* [3][0][][] */ 49,127,-47,-58,58,-2,25,65, 
  /* [4][0][][] */ 26,59,16,-18,-15,26,90,-127, 
  /* [5][0][][] */ -34,-53,33,-127,31,32,-94,28, 
  /* [6][0][][] */ 2,98,120,63,-39,127,76,-2, 
  /* [7][0][][] */ 65,-19,-45,70,-69,-127,119,3, 
  /* [8][0][][] */ -25,44,127,40,-123,105,76,123, 
  /* [9][0][][] */ 20,-3,-22,12,43,127,23,-45, 
  /* [10][0][][] */ -127,85,63,-79,90,1,-79,-111, 
  /* [11][0][][] */ 127,-29,115,-100,17,-35,4,83, 
  /* [12][0][][] */ 121,-78,41,-127,122,66,36,-40, 
  /* [13][0][][] */ -22,80,-104,-87,44,-53,119,127, 
  /* [14][0][][] */ -3,-84,-19,3,12,-29,1,127, 
  /* [15][0][][] */ -35,-23,-16,-3,-1,127,65,58, 
  /* [16][0][][] */ 118,6,-80,-127,85,-23,50,85, 
  /* [17][0][][] */ 64,114,127,69,-67,58,-57,-56, 
  /* [18][0][][] */ -53,127,-4,35,55,55,-64,-40, 
  /* [19][0][][] */ 50,11,-70,12,52,127,34,-91, 
  /* [20][0][][] */ -23,29,-127,-9,3,11,108,15, 
  /* [21][0][][] */ -112,-50,107,-31,-24,-78,32,127, 
  /* [22][0][][] */ 122,13,-127,-26,60,-29,-45,-30, 
  /* [23][0][][] */ 43,127,39,13,-12,4,-53,-61, 
  /* [24][0][][] */ -127,-122,-45,-112,61,111,-118,51, 
  /* [25][0][][] */ 16,-61,21,-105,-127,-53,-41,-92, 
  /* [26][0][][] */ 27,94,127,-8,-57,-21,-20,-22, 
  /* [27][0][][] */ -56,-47,-20,64,71,-5,-37,127, 
  /* [28][0][][] */ -36,30,-127,30,-70,-73,-27,8, 
  /* [29][0][][] */ -127,-70,-19,-67,-35,85,57,36, 
  /* [30][0][][] */ -59,76,-73,-52,-19,127,9,-4, 
  /* [31][0][][] */ 96,-86,124,-59,105,58,53,127, 
  /* [32][0][][] */ -3,33,-68,-40,49,127,-45,-107, 
  /* [33][0][][] */ 27,-31,-17,47,-91,-31,0,127, 
  /* [34][0][][] */ -47,9,-127,12,-7,-13,-33,59, 
  /* [35][0][][] */ -89,89,127,-8,64,-126,-64,-100, 
  /* [36][0][][] */ 92,-74,-106,26,-116,-45,-42,127, 
  /* [37][0][][] */ -63,-48,19,14,127,-55,-92,78, 
  /* [38][0][][] */ -7,-9,48,109,80,-127,60,-52, 
  /* [39][0][][] */ 126,37,-26,80,-127,-12,54,-97, 
  /* [40][0][][] */ -6,-127,-9,-50,109,44,-61,65, 
  /* [41][0][][] */ 14,-4,48,-89,76,-127,24,69, 
  /* [42][0][][] */ -86,-36,68,-57,61,-2,13,-127, 
  /* [43][0][][] */ 23,22,1,127,6,27,-21,2, 
  /* [44][0][][] */ -45,7,-53,13,15,127,-56,23, 
  /* [45][0][][] */ -61,23,78,115,59,127,-109,-24, 
  /* [46][0][][] */ -127,-83,37,-126,6,-115,-30,-113, 
  /* [47][0][][] */ -14,-62,-93,46,-127,73,38,97, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant21_scale = { 48, { 0.0025967222172766924, 0.003441341919824481, 0.0030822006519883871, 0.0036377701908349991, 0.0029146918095648289, 0.0026341830380260944, 0.0021383280400186777, 0.0024306951090693474, 0.0023248011711984873, 0.0037019858136773109, 0.0014066982548683882, 0.0015000862767919898, 0.0016827273648232222, 0.001834942027926445, 0.0019367175409570336, 0.0029840243514627218, 0.0015103050973266363, 0.0024596408475190401, 0.00059601990506052971, 0.0017209878424182534, 0.0022337266709655523, 0.0012232443550601602, 0.0018407920142635703, 0.0030672000721096992, 0.0022281382698565722, 0.0011439403751865029, 0.0030678436160087585, 0.0025977904442697763, 0.0022144918330013752, 0.003032271983101964, 0.002318789716809988, 0.0011927980231121182, 0.0027129407972097397, 0.0031241723336279392, 0.0030807559378445148, 0.0015551457181572914, 0.0027321465313434601, 0.0021225523669272661, 0.0031695938669145107, 0.0023131552152335644, 0.00225663254968822, 0.0014740537153556943, 0.0020775869488716125, 0.0029772203415632248, 0.0027365977875888348, 0.0019056220771744847, 0.0023249124642461538, 0.0022491500712931156, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[8] = { -23723, -14143, 19020, -8034, -32740, 4159, 19744, 16014, };
const TfArray<1, int> tensor_dimension22 = { 1, { 8 } };
const TfArray<8, float> quant22_scale = { 8, { 3.3644835639279336e-05, 4.0613722376292571e-05, 5.9352089010644704e-05, 4.6306602598633617e-05, 3.1458763260161504e-05, 4.2161533201579005e-05, 5.2370800403878093e-05, 2.6850033464143053e-05, } };
const TfArray<8, int> quant22_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[8*1*1*48] = { 
  /* [0][0][][] */ 127,46,18,-32,37,-56,21,-38,-41,113,19,-61,-48,-20,15,-96,43,82,17,-26,56,28,29,56,21,-26,-5,-96,46,-65,-7,18,29,-30,33,86,-8,-7,-21,-34,-1,7,-64,-41,7,7,7,64, 
  /* [1][0][][] */ -14,85,16,-1,-55,47,-80,-5,69,-13,-56,-35,34,17,-1,-8,-21,127,40,14,-8,35,63,-12,-98,-14,-12,103,7,-43,-2,2,-22,-58,-47,14,19,5,-6,-22,28,47,74,60,10,-9,7,0, 
  /* [2][0][][] */ 45,-85,76,-7,11,-14,-18,14,-106,-32,13,25,-36,13,-31,28,44,13,-32,44,43,-40,9,20,-54,19,-20,-25,-51,11,-8,26,25,-46,-8,-20,33,-14,17,-6,44,19,-38,-47,-19,-127,35,-35, 
  /* [3][0][][] */ -28,-76,-19,3,-1,11,-29,25,-2,127,50,73,-4,45,-5,-91,22,28,30,0,21,15,16,-4,-42,4,17,7,19,54,21,-2,12,-16,19,44,-14,-20,12,25,-12,37,9,9,-15,-56,0,8, 
  /* [4][0][][] */ 21,101,-15,4,-6,-24,21,16,-81,53,12,-67,32,-36,64,-6,49,14,-33,40,-72,24,-64,7,56,127,16,-20,-2,-47,-2,-38,29,53,11,24,-26,27,13,47,15,69,-32,-28,28,56,-7,-5, 
  /* [5][0][][] */ -58,22,-21,18,-3,-45,-13,-24,27,-43,-1,-40,38,-16,6,24,4,-3,-10,-37,15,-44,21,-35,23,40,36,-75,36,-17,13,-72,33,-17,25,56,8,45,-67,12,46,60,12,-18,127,53,63,-97, 
  /* [6][0][][] */ -41,-127,-3,-2,31,-29,-17,-39,-18,-48,-7,19,52,-8,10,26,-3,-75,24,8,8,20,-25,-21,-80,-15,41,18,91,-14,-42,-52,-41,31,-29,10,-14,27,8,-12,-31,22,-4,37,19,48,-19,45, 
  /* [7][0][][] */ -25,-55,85,-22,71,-4,37,-64,104,0,-34,24,55,56,-47,-18,-14,-85,-107,37,27,-4,-44,-93,-54,70,-9,22,-89,-71,6,32,43,-36,-97,104,44,37,-31,-18,-13,57,-127,-76,38,-96,-19,53, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant23_scale = { 8, { 0.0027735689654946327, 0.0033480608835816383, 0.0048927897587418556, 0.0038173629436641932, 0.0025933561846613884, 0.0034756571985781193, 0.0043172752484679222, 0.002213427796959877, } };
const TfArray<8, int> quant23_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int32_t tensor_data24[48] = { 2648, 47956, 953, -1686, 6410, 40, -327, 16522, -7848, 14080, -9121, 18906, 4993, -4715, 4986, -4200, -13066, 32389, -551, 12936, -913, -3005, -3744, -6387, -279, -6084, 1005, -2432, -1066, 4711, 1369, 3354, -210, -559, -3891, -3647, -2522, 7000, -4244, -12946, -4583, -10239, 1499, -1319, 6986, 3570, -704, 12643, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 9.5603441877756268e-05, 5.4428292060038075e-05, 0.00013350813242141157, 0.00026062331744469702, 0.00011677402653731406, 9.1616406280081719e-05, 5.9816098655574024e-05, 5.8459529100218788e-05, 8.8152613898273557e-05, 3.7458528822753578e-05, 4.4216598325874656e-05, 9.1235378931742162e-05, 0.00020767917158082128, 0.0001626246958039701, 0.00011903436097782105, 4.9238493375014514e-05, 3.3429023460485041e-05, 0.00010671131167327985, 9.0547226136550307e-05, 6.7228058469481766e-05, 7.016460585873574e-05, 0.00014665236813016236, 0.00013274719822220504, 7.2817783802747726e-05, 8.2282182120252401e-05, 6.7331064201425761e-05, 0.00017508781456854194, 0.00010086728434544057, 9.6042836958076805e-05, 6.9112742494326085e-05, 0.00010354986443417147, 8.1184931332245469e-05, 5.7829758588923141e-05, 0.00013821778702549636, 6.2743369198869914e-05, 0.00020275670976843685, 0.0001245002931682393, 0.00012997232261113822, 6.9840192736592144e-05, 4.2455765651538968e-05, 0.0001326943893218413, 4.2405117710586637e-05, 0.00012518226867541671, 0.00015417129907291383, 0.00021146904327906668, 8.8188942754641175e-05, 0.00013770903751719743, 2.931731978605967e-05, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[1*3*3*48] = { 
  /* [0][0][][] */ 33,-45,-52,-29,-64,28,-81,7,-32,52,127,-4,-9,6,-20,49,35,-56,6,115,-44,-15,39,-3,-59,116,-12,-40,-39,-79,-1,-29,40,-29,-90,-43,20,-66,119,-27,-41,87,-30,-9,-37,86,3,-18, 104,-127,127,8,-68,-15,-73,-99,-96,45,54,-25,-39,17,-41,86,102,-78,41,87,12,-47,-71,127,-5,9,-31,7,11,-36,-127,-113,94,-50,5,12,46,-26,19,90,-14,115,-63,-127,-56,-22,51,127, 17,-25,-15,-61,-86,-35,-61,6,-28,37,77,0,-8,9,-4,42,16,-62,8,118,21,-7,38,15,62,127,-12,32,32,-51,26,-12,12,-23,57,-47,16,-65,127,1,-34,54,-44,-2,-33,46,-9,-35, 
  /* [0][1][][] */ 21,-17,70,-44,-127,46,-65,-34,20,90,43,-127,-51,-44,-39,90,125,-127,39,-127,-71,-44,-97,-101,-127,27,-53,-127,-91,-60,39,127,-55,-58,-127,-54,16,-75,9,44,-9,28,-62,11,-71,109,70,76, -127,47,-97,127,-101,92,-13,-127,127,-105,-3,-2,127,127,127,-92,120,7,43,119,-17,127,127,7,-1,16,127,33,-28,117,91,-58,127,127,42,127,11,127,-12,127,127,-45,127,25,127,-127,-127,2, 44,-34,59,-23,-95,-127,-98,-31,-6,127,36,-112,-61,-33,-57,127,127,-112,32,-124,82,-49,-117,-96,127,11,-59,108,127,-76,25,116,-42,-65,120,-57,13,-93,14,25,-25,79,-79,10,-79,83,73,112, 
  /* [0][2][][] */ 30,-57,-75,24,-23,16,127,38,-1,76,114,1,-40,-8,-25,102,42,-15,-29,-104,-127,-34,24,1,-79,53,-40,-55,-55,-127,-12,42,-68,-27,-51,-12,7,-41,72,11,-2,54,-54,6,-15,81,21,53, 78,-116,8,-74,39,40,112,-53,70,112,47,20,-66,-25,-30,66,-9,-94,-127,-23,56,2,-25,106,45,20,-30,34,15,-43,-111,-27,-124,-39,15,-17,17,33,-69,105,-42,127,71,92,-12,-8,48,117, 2,-51,-61,6,-57,-30,123,31,-4,73,71,0,-43,-13,-12,104,44,-29,-18,-53,84,-33,17,-16,44,64,-37,31,50,-93,1,45,-46,-29,48,-14,-127,-37,70,20,8,56,-64,-9,-11,41,11,15, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0086789978668093681, 0.0049410671927034855, 0.012120031751692295, 0.023659704253077507, 0.010600889101624489, 0.0083170495927333832, 0.0054301787167787552, 0.0053070276044309139, 0.0080026024952530861, 0.0034005311317741871, 0.0040140370838344097, 0.0082824593409895897, 0.018853370100259781, 0.014763268642127514, 0.010806085541844368, 0.0044699306599795818, 0.0030347276479005814, 0.009687383659183979, 0.0082199880853295326, 0.0061030457727611065, 0.006369628943502903, 0.013313282281160355, 0.012050953693687916, 0.006610487587749958, 0.0074696773663163185, 0.0061123962514102459, 0.015894686803221703, 0.0091568557545542717, 0.0087188864126801491, 0.0062741395086050034, 0.0094003835693001747, 0.0073700672946870327, 0.0052498565055429935, 0.012547580525279045, 0.0056959199719130993, 0.018406502902507782, 0.011302289552986622, 0.011799046769738197, 0.0063401786610484123, 0.0038541865069419146, 0.012046159245073795, 0.0038495885673910379, 0.011364199221134186, 0.013995859771966934, 0.019197419285774231, 0.0080059003084897995, 0.012501395307481289, 0.0026614621747285128, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 3 };
const ALIGN(16) int32_t tensor_data26[48] = { 14796, 30691, 22472, -766, -9113, 14046, 6002, 4789, 5574, 3889, 6196, 22399, 31896, -522, 5117, -3406, 5328, 49390, 7286, 14326, 27706, 5530, 7752, 8776, 32653, 9295, 5468, 31653, 28276, 3871, 5600, 10429, 6800, 4068, 16129, 13218, 2260, 11709, 2345, 585, 1908, 13231, 8927, 27188, 14311, 20838, 2899, 2155, };
const TfArray<1, int> tensor_dimension26 = { 1, { 48 } };
const TfArray<48, float> quant26_scale = { 48, { 5.1627179345814511e-05, 3.1098010367713869e-05, 4.147939762333408e-05, 9.6485353424213827e-05, 5.2689098083646968e-05, 5.6127206335077062e-05, 7.5550880865193903e-05, 0.00010543988173594698, 5.4736203310312703e-05, 0.00010185355495195836, 0.00010051758727058768, 3.9489346818299964e-05, 2.9649396310560405e-05, 0.00010611252946546301, 7.9132776590995491e-05, 9.8315707873553038e-05, 9.6720941655803472e-05, 2.0830246285186149e-05, 6.6964639700017869e-05, 4.805403295904398e-05, 3.4756903914967552e-05, 6.8978893978055567e-05, 5.9895031881751493e-05, 6.7875414970330894e-05, 2.9526298021664843e-05, 7.3214170697610825e-05, 7.4275099905207753e-05, 2.9755114155705087e-05, 3.3176929719047621e-05, 7.1164467954076827e-05, 9.254164615413174e-05, 7.2234455728903413e-05, 7.8621313150506467e-05, 9.7226882644463331e-05, 4.8165653424803168e-05, 5.6616940128151327e-05, 8.269563113572076e-05, 5.6748598581179976e-05, 0.00012133548443671316, 9.3915565230417997e-05, 0.00010253996879328042, 5.940657138125971e-05, 6.8482091592159122e-05, 3.3715296012815088e-05, 6.3561543356627226e-05, 4.5302796934265643e-05, 9.068789950106293e-05, 8.948918548412621e-05, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[48*1*1*8] = { 
  /* [0][0][][] */ -95,-87,-127,58,-8,80,35,2, 
  /* [1][0][][] */ 35,64,-101,-85,70,22,-127,-52, 
  /* [2][0][][] */ 10,10,-127,-11,49,-31,-26,-68, 
  /* [3][0][][] */ -127,-43,62,-1,33,41,-3,-126, 
  /* [4][0][][] */ -99,-54,38,57,3,-104,-36,-127, 
  /* [5][0][][] */ 46,-19,114,10,-32,-30,-9,-127, 
  /* [6][0][][] */ 45,62,127,40,-77,51,-18,-101, 
  /* [7][0][][] */ 49,-11,-51,17,-79,13,-60,127, 
  /* [8][0][][] */ -127,61,-30,99,-92,-84,-43,-124, 
  /* [9][0][][] */ -83,12,46,-127,-4,27,26,-56, 
  /* [10][0][][] */ -27,21,52,31,-14,-127,37,53, 
  /* [11][0][][] */ -30,-85,57,127,-117,-72,36,27, 
  /* [12][0][][] */ -94,-40,-80,8,-50,27,81,127, 
  /* [13][0][][] */ 36,46,28,127,-13,-55,8,71, 
  /* [14][0][][] */ 75,48,-55,-24,118,-72,-77,-127, 
  /* [15][0][][] */ 89,-9,-57,127,8,-6,-25,62, 
  /* [16][0][][] */ -127,31,-31,-21,-36,-37,17,54, 
  /* [17][0][][] */ 70,127,34,41,-40,-2,-86,-51, 
  /* [18][0][][] */ -84,-99,92,-16,74,15,-127,9, 
  /* [19][0][][] */ -19,-86,127,-43,48,11,107,106, 
  /* [20][0][][] */ 8,-127,-62,-50,5,6,42,-61, 
  /* [21][0][][] */ 80,60,-124,4,101,-127,81,70, 
  /* [22][0][][] */ 94,118,43,64,-97,53,-127,-86, 
  /* [23][0][][] */ 108,-24,34,-47,-35,-52,-71,-127, 
  /* [24][0][][] */ -33,40,127,79,-68,-10,-7,-44, 
  /* [25][0][][] */ -69,-56,3,46,127,-51,-66,92, 
  /* [26][0][][] */ -1,-39,-127,75,19,58,119,32, 
  /* [27][0][][] */ 74,-71,127,37,-28,14,-67,-102, 
  /* [28][0][][] */ -65,25,111,9,-9,-41,-127,6, 
  /* [29][0][][] */ -100,-115,84,58,-57,-80,-51,-127, 
  /* [30][0][][] */ -36,-32,42,97,53,29,-127,2, 
  /* [31][0][][] */ 21,-64,-127,-16,-34,1,79,16, 
  /* [32][0][][] */ -57,-91,-38,125,66,17,-83,127, 
  /* [33][0][][] */ -24,-49,-127,-42,65,-19,43,18, 
  /* [34][0][][] */ 78,-10,-72,-72,3,-127,90,95, 
  /* [35][0][][] */ 127,43,-37,59,-19,32,64,125, 
  /* [36][0][][] */ 50,-37,-78,-1,121,-127,-11,-119, 
  /* [37][0][][] */ -32,-59,-53,-102,91,10,127,64, 
  /* [38][0][][] */ 15,-7,-48,-22,34,127,-41,8, 
  /* [39][0][][] */ 78,35,-20,-16,-118,54,127,-7, 
  /* [40][0][][] */ -16,16,127,-14,-57,54,-69,-49, 
  /* [41][0][][] */ -45,-52,-53,-127,-51,-28,-12,-108, 
  /* [42][0][][] */ -33,127,-41,-1,-8,71,58,-42, 
  /* [43][0][][] */ 30,-41,120,20,-55,-61,-127,-69, 
  /* [44][0][][] */ 2,13,-21,-17,-9,127,12,36, 
  /* [45][0][][] */ -25,37,127,55,5,-38,-56,-9, 
  /* [46][0][][] */ 38,26,-127,-3,94,-76,70,31, 
  /* [47][0][][] */ -127,-26,60,-48,50,107,-20,36, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant27_scale = { 48, { 0.0016611885512247682, 0.0010006291558966041, 0.0013346672058105469, 0.0031045733485370874, 0.00169535749591887, 0.0018059842986986041, 0.0024309726431965828, 0.0033926998730748892, 0.001761226449161768, 0.0032773041166365147, 0.003234317060559988, 0.0012706340057775378, 0.00095401762519031763, 0.0034143435768783092, 0.0025462259072810411, 0.0031634680926799774, 0.0031121538486331701, 0.00067024712916463614, 0.0021546962670981884, 0.0015462167793884873, 0.0011183599708601832, 0.0022195081692188978, 0.0019272202625870705, 0.00218400196172297, 0.000950056710280478, 0.002355785109102726, 0.002389922272413969, 0.00095741928089410067, 0.0010675217490643263, 0.0022898325696587563, 0.0029776780866086483, 0.002324261236935854, 0.0025297687388956547, 0.0031284333672374487, 0.0015498083084821701, 0.001821742276661098, 0.0026608665939420462, 0.0018259786302223802, 0.0039041668642312288, 0.0030218863394111395, 0.0032993904314935207, 0.0019115031464025378, 0.0022035229485481977, 0.0010848445817828178, 0.0020451962482184172, 0.001457691309042275, 0.002918030833825469, 0.0028794603422284126, } };
const TfArray<48, int> quant27_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[8] = { -6475, -12837, 3064, 3958, -13027, -11712, -8343, -13105, };
const TfArray<1, int> tensor_dimension28 = { 1, { 8 } };
const TfArray<8, float> quant28_scale = { 8, { 8.1822348874993622e-05, 0.00011814400932053104, 0.00010909701813943684, 9.7887226729653776e-05, 8.7107837316580117e-05, 0.00012862216681241989, 0.00013464903167914599, 6.9806512328796089e-05, } };
const TfArray<8, int> quant28_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[8*1*1*48] = { 
  /* [0][0][][] */ -43,29,-31,-29,30,-10,19,-85,-20,40,-4,-127,-8,-65,-25,51,-5,-14,-20,1,22,-34,-38,-79,108,33,-4,7,-27,42,2,74,95,9,-32,-70,-17,16,89,-21,-28,4,99,39,-6,-25,-14,78, 
  /* [1][0][][] */ 33,-1,-21,53,-38,1,-8,-53,20,37,-16,-28,6,-7,7,-36,-27,-11,24,9,9,4,14,127,12,13,14,38,6,9,13,-114,17,-28,25,26,4,-10,26,-22,7,-25,56,-13,59,8,9,35, 
  /* [2][0][][] */ 16,-41,3,-40,-127,27,10,-28,-63,-30,0,45,-6,-6,-28,96,-8,6,68,-17,-29,-18,8,-18,81,28,-10,-8,-6,8,19,15,-27,-52,34,-63,21,-42,-32,17,-27,-8,26,1,8,8,13,22, 
  /* [3][0][][] */ -29,-94,-27,18,-1,-8,-52,-32,12,-7,-26,-36,-20,66,5,-36,53,0,16,3,5,22,-8,-69,-89,3,-5,-57,15,-28,4,53,11,-9,44,24,-50,-66,32,4,38,4,46,-22,20,127,-11,39, 
  /* [4][0][][] */ -7,-30,-1,21,94,-4,14,18,-39,61,-4,2,-10,64,-4,18,13,-10,-67,-13,34,5,5,-2,127,-49,-7,19,-6,-41,7,14,4,25,81,-50,19,-118,3,-41,2,1,-21,-5,-20,-38,54,-27, 
  /* [5][0][][] */ 18,-1,19,15,-20,-46,2,9,-8,127,-10,22,7,17,14,30,40,-6,25,22,5,-7,-27,-16,21,19,-1,-2,27,-1,18,21,11,-13,-15,-1,-53,23,-30,-75,-3,-9,-2,-11,1,8,3,-5, 
  /* [6][0][][] */ 2,-22,-14,7,43,6,-70,34,-4,-31,9,12,12,-55,15,-2,-25,-25,-21,33,8,16,-14,-15,59,16,15,23,6,59,5,21,11,-41,21,-24,19,-29,-7,4,-5,0,-26,-8,-32,127,3,-17, 
  /* [7][0][][] */ 49,-61,32,-45,-18,21,-34,16,6,-75,-9,-61,53,127,-11,23,37,39,-29,-30,-46,-38,-52,83,124,44,36,6,-62,-74,5,-66,32,-18,-56,-41,109,86,65,24,50,-10,-45,-59,-21,49,-10,-29, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant29_scale = { 8, { 0.0043901768513023853, 0.0063390149734914303, 0.0058535989373922348, 0.0052521377801895142, 0.0046737696975469589, 0.0069012199528515339, 0.0072245919145643711, 0.0037454671692103148, } };
const TfArray<8, int> quant29_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int32_t tensor_data30[48] = { -961, 2709, 23804, 1943, 639, 5591, 30, -13412, -656, -1060, 16816, 988, 13695, -1824, 948, -2100, 235, -8592, 2155, 25319, -448, 20555, 25716, -1494, -2166, -1899, 22014, 26206, 1404, -822, 2022, -338, -5995, 1088, -1540, -1838, -11938, 916, -1223, -192, 25128, 16982, 23187, -6335, 33512, 1240, 13617, -1064, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 8.6915417341515422e-05, 4.2465140722924843e-05, 5.2406219765543938e-05, 7.447472307831049e-05, 6.5971253206953406e-05, 8.3067752711940557e-05, 0.0001298917195526883, 6.1053026001900434e-05, 0.00011100988922407851, 7.1595502959098667e-05, 6.2702238210476935e-05, 6.2392588006332517e-05, 0.00012269442959222943, 5.8710647863335907e-05, 0.00011035893840016797, 6.6239837906323373e-05, 4.6134086005622521e-05, 9.4079907285049558e-05, 0.0001221454149344936, 5.650920866173692e-05, 0.0001146269278251566, 7.5486736022867262e-05, 9.6733303507789969e-05, 9.8274278570897877e-05, 9.4099057605490088e-05, 4.9237358325626701e-05, 5.3204996220301837e-05, 5.6761364248814061e-05, 9.0761866886168718e-05, 0.00015323418483603746, 0.00012185661034891382, 0.00012696642079390585, 5.1712577260332182e-05, 6.4947882492560893e-05, 6.8963643570896238e-05, 0.0003216933982912451, 8.1407386460341513e-05, 7.3314535256940871e-05, 6.1785256548319012e-05, 0.00014796975301578641, 5.464813148137182e-05, 5.9034784499090165e-05, 6.8617999204434454e-05, 9.8952245025429875e-05, 5.2435640100156888e-05, 6.5083011577371508e-05, 6.6964996221940964e-05, 9.2067639343440533e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[1*3*3*48] = { 
  /* [0][0][][] */ 125,127,-67,127,71,83,95,127,26,84,-110,56,-82,116,97,110,86,104,54,-76,-52,-49,-99,93,33,101,-127,-71,127,83,-127,95,127,122,99,89,82,98,80,56,-56,-73,-100,124,-68,80,-101,125, 127,112,-65,121,70,94,90,124,-13,87,-127,64,-127,112,127,114,79,127,63,-122,-76,-40,-112,121,41,118,-98,-82,119,84,-112,127,125,127,115,127,78,113,86,53,-58,-120,-104,127,-106,74,-127,119, 56,40,9,27,24,32,11,46,37,26,-48,26,-53,33,72,63,51,27,18,5,18,-13,11,40,21,45,-24,-9,16,18,-18,45,51,43,30,46,19,35,-5,-3,5,-127,-27,6,-26,36,-16,36, 
  /* [0][1][][] */ -12,99,-104,74,117,-76,126,111,127,117,-68,112,-25,127,-84,114,111,79,108,-127,-24,-66,-127,98,109,106,-87,-98,44,123,45,93,90,93,113,73,126,119,121,121,-119,-117,-102,73,-127,127,-101,117, -12,103,-127,66,127,-70,127,116,123,127,-75,127,-48,125,-120,127,104,78,127,-123,-59,-59,-104,127,127,127,-112,-127,16,127,55,108,75,93,127,92,127,127,127,127,-127,-90,-127,68,-119,116,-80,127, 37,31,-83,36,41,-71,20,25,58,31,-68,28,-9,26,-22,65,46,23,39,-45,-28,-64,-29,44,47,47,-34,-26,9,-1,44,33,71,38,17,4,57,27,12,17,-69,95,-26,1,-65,32,-53,14, 
  /* [0][2][][] */ -26,40,-48,-69,52,-127,52,45,97,66,32,61,-47,36,-7,44,123,68,65,-77,118,-127,-103,11,88,87,-38,-35,-5,51,125,-7,58,32,26,54,-90,26,19,41,-45,-44,-22,90,-83,84,-35,13, -23,17,-36,-104,51,-87,43,19,96,78,73,62,-57,35,-6,49,127,51,63,-54,127,-50,-91,3,107,126,6,-73,-8,42,126,-4,42,30,24,51,-68,32,31,46,-79,-37,-26,86,-112,73,-22,0, -13,57,-59,-2,28,12,27,16,45,22,38,31,-49,11,-1,23,56,21,38,-18,37,-56,7,6,46,32,-60,-9,-11,1,72,-24,53,17,10,-19,18,2,14,-35,-26,-94,5,79,-28,32,7,16, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0042090108618140221, 0.0020564387086778879, 0.0025378505233675241, 0.0036065513268113136, 0.0031947577372193336, 0.0040226816199719906, 0.0062902034260332584, 0.0029565852601081133, 0.0053758220747113228, 0.0034671206958591938, 0.0030364508274942636, 0.0030214556027203798, 0.0059416634030640125, 0.0028431520331650972, 0.0053442986682057381, 0.0032077643554657698, 0.0022341129370033741, 0.004555962048470974, 0.0059150769375264645, 0.0027365440037101507, 0.0055509824305772781, 0.003655559616163373, 0.0046844566240906715, 0.004759080708026886, 0.0045568891800940037, 0.0023843937087804079, 0.0025765325408428907, 0.0027487550396472216, 0.0043952809646725655, 0.0074205971322953701, 0.0059010908007621765, 0.0061485408805310726, 0.0025042598135769367, 0.0031451995018869638, 0.0033396687358617783, 0.015578489750623703, 0.0039422758854925632, 0.0035503674298524857, 0.0029920446686446667, 0.0071656596846878529, 0.0026464185211807489, 0.0028588487766683102, 0.0033229305408895016, 0.0047919121570885181, 0.0025392752140760422, 0.0031517434399574995, 0.0032428812701255083, 0.0044585149735212326, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 3 };
const ALIGN(16) int32_t tensor_data32[48] = { 3029, 2226, 3218, 3000, 2245, 4661, -3682, -787, -2492, 2123, 1466, 531, 8717, 2901, 2010, 1585, 24, -131, -2437, 3452, 2443, 6151, 11137, 1560, 8852, -762, 830, 4434, -2133, -2882, 2382, -1336, 1095, -954, 95, -8077, 937, 7, 135, -1998, 3989, 558, 2220, -2463, 9220, 3607, 216, -2100, };
const TfArray<1, int> tensor_dimension32 = { 1, { 48 } };
const TfArray<48, float> quant32_scale = { 48, { 0.00010774609836516902, 0.00018489135254640132, 0.00016424315981566906, 0.00010405838838778436, 0.00017587460752110928, 9.6524789114482701e-05, 0.00014023183030076325, 0.00017331731214653701, 0.00010419674799777567, 0.00020079941896256059, 0.0001435813755961135, 0.00019935044110752642, 8.7687403720337898e-05, 0.00017660677258390933, 0.00015175300359260291, 0.00012927688658237457, 0.00017790963465813547, 0.00013858788588549942, 0.00017022677639033645, 0.00017943057173397392, 0.00013864280481357127, 0.00011652242392301559, 7.7071839768905193e-05, 0.00014358150656335056, 7.132130122045055e-05, 0.00017950772598851472, 0.00015764025738462806, 0.00014297179586719722, 0.00011556971003301442, 0.00017324335931334645, 9.9736535048577935e-05, 0.00014121728600002825, 0.00022736976097803563, 0.00022214050113689154, 0.00027807752485387027, 6.5698826801963151e-05, 0.0001506418630015105, 0.00025465546059422195, 0.00019100093049928546, 0.00019984481332357973, 0.00012406488531269133, 0.00012626065290533006, 0.00016892640269361436, 0.00013412488624453545, 7.4315510573796928e-05, 0.00014925708819646388, 0.00022602696844842285, 0.00016683321155142039, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[48*1*1*8] = { 
  /* [0][0][][] */ -127,26,101,8,59,-113,32,121, 
  /* [1][0][][] */ 61,53,62,127,3,-8,108,23, 
  /* [2][0][][] */ 36,-29,32,-120,-53,51,-51,-127, 
  /* [3][0][][] */ 73,14,127,7,-95,-97,-11,81, 
  /* [4][0][][] */ 127,62,101,27,-43,-8,11,-95, 
  /* [5][0][][] */ 92,85,127,79,-83,-127,-21,20, 
  /* [6][0][][] */ -8,127,-43,98,-16,13,80,-9, 
  /* [7][0][][] */ 3,21,112,-9,44,-84,127,-9, 
  /* [8][0][][] */ 127,-38,11,7,-40,-114,0,45, 
  /* [9][0][][] */ 5,18,30,9,-48,-10,-20,127, 
  /* [10][0][][] */ -15,75,-86,-127,117,26,-53,-73, 
  /* [11][0][][] */ -60,-57,42,16,-15,-56,127,57, 
  /* [12][0][][] */ 61,54,94,91,56,20,-26,-127, 
  /* [13][0][][] */ -8,127,-34,-98,23,-60,18,-22, 
  /* [14][0][][] */ 127,10,91,-5,22,-84,27,-15, 
  /* [15][0][][] */ -127,19,-17,24,47,81,-3,-11, 
  /* [16][0][][] */ 2,31,-30,-127,33,-30,9,115, 
  /* [17][0][][] */ -57,93,-127,56,122,-53,-33,-56, 
  /* [18][0][][] */ -127,-71,-96,-25,44,2,-12,91, 
  /* [19][0][][] */ -28,127,-14,-90,-6,-37,42,7, 
  /* [20][0][][] */ 127,24,85,54,-94,-53,-2,1, 
  /* [21][0][][] */ 29,100,111,65,-96,-50,127,-76, 
  /* [22][0][][] */ -68,-33,-4,-11,127,18,-125,-20, 
  /* [23][0][][] */ -13,-22,-49,83,-44,-127,-33,-2, 
  /* [24][0][][] */ -127,96,108,88,42,21,-64,-17, 
  /* [25][0][][] */ -81,-100,-44,-20,103,-17,-127,72, 
  /* [26][0][][] */ 31,84,3,-127,-62,106,26,-75, 
  /* [27][0][][] */ -50,6,-48,-70,39,22,127,55, 
  /* [28][0][][] */ -112,54,-43,-99,-86,98,127,127, 
  /* [29][0][][] */ 16,-127,24,108,-11,52,-26,9, 
  /* [30][0][][] */ 61,89,-109,9,-45,124,73,-127, 
  /* [31][0][][] */ 8,18,57,-77,49,127,38,3, 
  /* [32][0][][] */ 14,20,-3,53,36,4,-127,27, 
  /* [33][0][][] */ 97,127,38,17,39,-27,76,-11, 
  /* [34][0][][] */ -63,11,22,-19,-127,24,19,-46, 
  /* [35][0][][] */ 121,-127,-126,-71,-75,-14,60,13, 
  /* [36][0][][] */ -44,60,20,34,49,1,22,-127, 
  /* [37][0][][] */ 68,-5,-16,28,127,-29,-8,48, 
  /* [38][0][][] */ 74,64,-37,-27,13,66,-127,-55, 
  /* [39][0][][] */ 1,-17,-30,-16,49,12,23,-127, 
  /* [40][0][][] */ 77,-54,-25,96,36,93,-97,-127, 
  /* [41][0][][] */ -33,-5,-9,118,-99,127,47,-21, 
  /* [42][0][][] */ -2,22,104,-7,43,-89,127,-7, 
  /* [43][0][][] */ 40,-6,-53,98,-8,53,127,-41, 
  /* [44][0][][] */ -53,97,127,-69,87,54,67,-34, 
  /* [45][0][][] */ -6,-127,39,-83,13,-28,-70,9, 
  /* [46][0][][] */ -3,-76,-34,-28,43,62,-127,-44, 
  /* [47][0][][] */ -7,-31,-97,9,-36,99,-127,10, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant33_scale = { 48, { 0.0013336049159988761, 0.0022884542122483253, 0.0020328855607658625, 0.0012879610294476151, 0.0021768512669950724, 0.0011947154998779297, 0.0017356902826577425, 0.0021451988723129034, 0.0012896734988316894, 0.0024853530339896679, 0.0017771485727280378, 0.0024674185551702976, 0.0010853325948119164, 0.0021859135013073683, 0.0018782911356538534, 0.0016000976320356131, 0.0022020393516868353, 0.0017153427470475435, 0.0021069464273750782, 0.0022208644077181816, 0.0017160223796963692, 0.001442232052795589, 0.00095394061645492911, 0.0017771500861272216, 0.00088276452152058482, 0.0022218194790184498, 0.001951159443706274, 0.0017696035793051124, 0.0014304399956017733, 0.0021442836150527, 0.0012344681890681386, 0.0017478874651715159, 0.0028142218943685293, 0.0027494977694004774, 0.0034418466966599226, 0.00081317353760823607, 0.0018645381787791848, 0.0031519448384642601, 0.0023640741128474474, 0.002473537577316165, 0.0015355872455984354, 0.0015627649845555425, 0.0020908513106405735, 0.0016601027455180883, 0.00091982475714758039, 0.0018473985837772489, 0.0027976017445325851, 0.0020649433135986328, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[8] = { 10229, -3658, -12218, 13274, 5837, -1715, 20841, -14936, };
const TfArray<1, int> tensor_dimension34 = { 1, { 8 } };
const TfArray<8, float> quant34_scale = { 8, { 0.00010307957563782111, 6.0467329603852704e-05, 0.00013686619058717042, 7.036014721961692e-05, 7.280928548425436e-05, 0.00010416369332233444, 7.1305388701148331e-05, 6.551612023031339e-05, } };
const TfArray<8, int> quant34_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[8*1*1*48] = { 
  /* [0][0][][] */ 51,-124,-21,53,15,-38,-4,-20,19,-9,-22,-35,-71,-6,16,61,2,-77,38,-37,22,10,-26,16,-93,-41,15,-127,-18,37,13,3,-16,81,44,21,-29,4,21,50,-32,-35,-27,32,28,0,58,40, 
  /* [1][0][][] */ 10,10,44,24,-6,11,12,14,-18,127,-45,-11,56,41,-56,-81,-38,87,0,106,29,72,74,22,61,25,-67,-85,-39,-59,-53,6,17,-48,46,-18,-8,-42,-4,-45,57,51,-40,45,-73,-30,-70,-61, 
  /* [2][0][][] */ 0,127,17,49,7,31,43,-40,3,43,-39,-11,51,-2,-3,-43,19,84,-33,37,2,-26,95,39,-70,4,-33,-42,-5,-8,-29,-53,-44,-49,-13,18,20,15,-1,-18,38,26,11,13,48,33,-58,-2, 
  /* [3][0][][] */ -100,-81,8,-54,63,91,68,104,46,57,32,39,3,-67,-29,-56,-80,125,-49,78,18,-47,-127,-7,90,8,-4,-39,8,-42,-36,-3,38,-64,-64,-58,-114,-62,-23,-24,47,5,-46,-49,30,68,-73,-68, 
  /* [4][0][][] */ -127,-79,37,47,40,11,14,41,-33,-65,-30,-47,57,92,51,-104,103,50,63,75,-87,70,-42,-65,-7,7,-52,14,-6,-49,-88,-41,16,-90,-11,37,12,83,-44,-83,69,20,23,8,78,5,-91,62, 
  /* [5][0][][] */ 9,-127,-5,69,18,-26,20,-2,-93,40,-16,26,60,-33,6,-46,62,39,110,50,16,68,8,38,44,-52,5,-48,15,26,-72,87,-46,13,1,-6,-16,12,-22,16,-3,-9,-39,41,-34,33,28,-9, 
  /* [6][0][][] */ -68,8,-53,40,-68,-53,15,-6,-37,-76,45,-5,-19,64,28,74,-15,-115,-14,-32,-122,26,-26,-19,-48,29,57,-127,42,13,2,42,-19,32,-16,-28,-2,-2,-7,48,-63,-27,-42,13,-5,2,64,8, 
  /* [7][0][][] */ -115,-14,-59,87,25,37,98,-109,70,59,13,-95,10,-3,107,37,88,18,-3,65,20,-57,54,-45,75,-62,-2,1,-45,6,58,35,-127,36,72,40,-65,17,37,-9,40,-19,-11,63,121,107,51,1, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant35_scale = { 8, { 0.005941467359662056, 0.0034853138495236635, 0.0078889150172472, 0.0040555321611464024, 0.0041966992430388927, 0.0060039553791284561, 0.0041100154630839825, 0.0037763239815831184, } };
const TfArray<8, int> quant35_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int32_t tensor_data36[48] = { 3217, 6766, 13911, -4101, 6249, 17992, -3887, -5422, -6367, 9113, -4, -944, -3183, -2609, -6285, -226, -1398, -1571, 30616, 2868, -6358, 531, -10413, -5501, -5976, -5190, -1451, 5967, -1515, 21275, 1796, 4163, 3355, -5797, -472, 7809, -9233, -8054, -1341, -196, 7832, 6898, -3695, 8643, -9087, -322, -342, -2540, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0001342367468168959, 8.3106380770914257e-05, 7.7343916927929968e-05, 9.9776283605024219e-05, 0.00013054907321929932, 5.8742538385558873e-05, 0.00012027502816636115, 0.00015300384256988764, 0.00011883494153153151, 9.9082513770554215e-05, 0.00015583354979753494, 0.00014620029833167791, 0.00010574115003691986, 0.0001195674849441275, 0.00014827780250925571, 0.00015465803153347224, 0.00013798291911371052, 0.00022720264678355306, 5.0586288125487044e-05, 0.00013257599493954331, 0.00010937909974018112, 0.00016858709568623453, 0.00011563531006686389, 8.5244588262867182e-05, 0.00014357773761730641, 0.00013772267266176641, 0.00017426673730369657, 0.00020103158021811396, 0.00018061674199998379, 5.73033066757489e-05, 0.0001024194061756134, 0.00013488366676028818, 0.00012915575644001365, 0.00014587547047995031, 0.00014472017937805504, 0.00011409362923586741, 0.00011451766476966441, 0.00012564842472784221, 0.00013717685942538083, 0.00013587399735115469, 0.00015453514060936868, 9.1832414909731597e-05, 0.00013283612497616559, 9.6998897788580507e-05, 8.7178566900547594e-05, 0.00016383799083996564, 0.00026880169752985239, 0.00018002731667365879, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[1*3*3*48] = { 
  /* [0][0][][] */ 40,111,-66,-68,34,22,33,75,-19,52,81,24,-57,10,-75,-127,-112,20,-81,74,17,-46,-88,-7,-12,62,-127,21,97,-61,-29,113,74,-10,77,-127,21,21,127,-125,-19,-6,26,-23,127,-6,-15,-51, 28,34,-29,-31,65,47,-85,58,127,-41,101,127,89,19,127,-43,-7,-14,-114,12,-127,13,-27,72,-52,101,23,31,127,-39,-44,-127,72,-63,-22,-90,49,77,-113,127,127,127,127,-101,-11,-110,-2,92, 39,91,-41,-58,38,13,33,63,-38,43,66,6,-91,7,-25,-91,127,27,-66,52,41,-50,-72,-16,4,12,101,22,28,-97,-18,121,76,-5,60,0,48,-67,64,17,-54,-10,-36,-105,123,-3,-5,-127, 
  /* [0][1][][] */ 60,50,-127,51,-26,36,27,-90,33,102,64,-23,125,127,-40,28,-65,42,25,-48,31,0,38,103,40,-45,69,22,0,-100,-1,11,-34,-21,66,-76,127,5,-24,-33,-62,9,26,-34,38,1,14,-39, -127,-127,-48,127,-127,-118,-95,127,101,27,-127,12,4,-30,80,67,-22,127,-127,127,36,127,127,98,127,127,-20,-127,-15,-17,-22,-98,-127,127,-127,-14,-5,127,-57,-42,-62,-12,119,91,-115,-3,1,83, 45,25,-125,19,-34,21,25,-67,0,60,4,-10,59,67,7,43,38,0,-12,-38,-8,15,10,78,-41,-29,-37,9,-3,-127,8,-13,-43,-76,29,-54,114,39,97,49,-51,-39,-42,-127,8,4,-12,-9, 
  /* [0][2][][] */ 43,66,-59,60,21,-127,47,28,11,-127,-16,-49,1,9,-17,59,-47,-86,-25,-70,113,-23,34,-77,-56,-38,91,30,36,-89,32,9,-26,89,63,32,-5,-6,25,-86,7,-97,22,22,124,1,-127,-26, -45,15,-70,46,-36,-24,127,44,23,-94,-12,-10,-127,54,16,-16,45,-48,-65,-74,4,34,46,127,-88,26,-12,-17,-11,-80,127,-49,31,76,-72,25,62,-3,68,62,-68,-119,-78,12,56,127,103,64, 42,68,-41,27,17,-118,36,-46,7,-91,-10,-58,8,3,-5,44,45,-57,-18,-65,95,-24,46,-78,-11,-67,-78,30,16,-99,18,29,-42,-70,75,53,8,-26,-25,-3,-6,-74,36,-39,111,11,31,-35, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0083528179675340652, 0.0051712552085518837, 0.0048126885667443275, 0.0062085320241749287, 0.0081233540549874306, 0.003655226668342948, 0.0074840565212070942, 0.0095205912366509438, 0.007394447922706604, 0.0061653624288737774, 0.0096966689452528954, 0.0090972445905208588, 0.0065796929411590099, 0.0074400301091372967, 0.0092265158891677856, 0.0096235228702425957, 0.0085859214887022972, 0.014137577265501022, 0.003147707786411047, 0.0082494784146547318, 0.0068060625344514847, 0.010490252636373043, 0.0071953525766730309, 0.005304303951561451, 0.0089340563863515854, 0.0085697276517748833, 0.010843665339052677, 0.012509094551205635, 0.011238791048526764, 0.0035656711552292109, 0.0063729989342391491, 0.0083930725231766701, 0.0080366553738713264, 0.009077032096683979, 0.0090051442384719849, 0.0070994221605360508, 0.0071258074603974819, 0.0078184138983488083, 0.0085357651114463806, 0.0084546953439712524, 0.009615875780582428, 0.0057142283767461777, 0.0082656648010015488, 0.0060357106849551201, 0.0054246452637016773, 0.010194741189479828, 0.016726057976484299, 0.011202114634215832, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 3 };
const ALIGN(16) int32_t tensor_data38[48] = { 4203, 3657, 1684, 4308, 2551, 553, 5115, -423, 15, 4703, -1592, 3310, 1279, 1021, 1957, 4652, 14358, 10434, 3826, 4779, 2266, 3733, -226, 42, -436, -2479, 5330, 7094, 393, 1177, 1973, 8874, 6229, 7759, 1763, -185, -238, -89, 2092, 3177, 7092, 2042, 344, 3438, 3596, 5343, 5016, 5799, };
const TfArray<1, int> tensor_dimension38 = { 1, { 48 } };
const TfArray<48, float> quant38_scale = { 48, { 0.0001500501821283251, 0.00012633560982067138, 0.00010106773697771132, 0.00012139846512582153, 0.00017898314399644732, 0.00021150370594114065, 0.00013503714581020176, 0.00012397424143273383, 0.00016538500494789332, 0.00011207021452719346, 0.00018969520169775933, 0.00015324412379413843, 0.00014724826905876398, 0.00021578535961452872, 0.00019144208636134863, 0.00013493881851900369, 6.4195482991635799e-05, 8.7987718870863318e-05, 0.00013551837764680386, 0.00012432370567694306, 0.00017930561443790793, 0.00011715318396454677, 0.00013840285828337073, 0.00015791199984960258, 0.00017641508020460606, 0.00013495326857082546, 0.00011574832751648501, 0.00011366354738129303, 0.00016877966118045151, 0.00024451999343000352, 0.0001838066236814484, 8.2963044405914843e-05, 0.00013359080185182393, 9.2915652203373611e-05, 0.00013590835442300886, 0.00024898309493437409, 0.00017976781236939132, 0.00017583406588528305, 0.00011771231947932392, 0.00012076656275894493, 0.00010352468234486878, 0.00021120297606103122, 0.00016271433560177684, 0.00015403515135403723, 0.00011110206105513498, 0.00014469744928646833, 0.0001223183935508132, 0.00011546274618012831, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[48*1*1*8] = { 
  /* [0][0][][] */ 36,3,48,-82,-30,-13,-96,-127, 
  /* [1][0][][] */ -87,4,119,-127,-42,-103,83,7, 
  /* [2][0][][] */ -56,6,-116,-48,5,106,127,-76, 
  /* [3][0][][] */ 121,-55,-127,-95,-51,56,13,105, 
  /* [4][0][][] */ 57,-71,38,67,63,37,-127,-18, 
  /* [5][0][][] */ -127,-36,-31,99,11,-62,16,26, 
  /* [6][0][][] */ 57,35,127,21,38,71,23,126, 
  /* [7][0][][] */ 9,-46,-111,92,127,76,-46,-113, 
  /* [8][0][][] */ -65,-37,-127,83,-3,17,13,-73, 
  /* [9][0][][] */ 56,48,37,110,-23,-50,-96,127, 
  /* [10][0][][] */ -77,-51,-40,-22,20,-96,127,12, 
  /* [11][0][][] */ 119,46,-59,-27,-32,-16,127,107, 
  /* [12][0][][] */ -65,127,116,21,48,107,10,-8, 
  /* [13][0][][] */ -2,48,12,-96,74,-21,127,15, 
  /* [14][0][][] */ -1,-60,51,-9,127,-35,21,100, 
  /* [15][0][][] */ -37,56,127,41,42,-43,-60,8, 
  /* [16][0][][] */ 1,81,-108,84,-127,-44,38,-103, 
  /* [17][0][][] */ -50,11,127,-7,31,-24,-18,65, 
  /* [18][0][][] */ 42,-36,-127,32,25,77,-81,-90, 
  /* [19][0][][] */ 23,91,85,-127,48,-78,45,69, 
  /* [20][0][][] */ 37,-7,10,20,-4,-31,-127,54, 
  /* [21][0][][] */ 43,-109,-34,89,-127,-55,-65,77, 
  /* [22][0][][] */ 62,55,90,-127,-101,-83,41,-12, 
  /* [23][0][][] */ -65,-9,71,21,-98,86,127,-45, 
  /* [24][0][][] */ -103,-127,-79,57,12,20,-91,34, 
  /* [25][0][][] */ -93,77,39,-109,-24,-127,121,-121, 
  /* [26][0][][] */ 85,-110,127,26,-18,-33,-31,-67, 
  /* [27][0][][] */ -127,-80,-63,-41,37,-1,-105,32, 
  /* [28][0][][] */ -127,-7,74,46,4,30,67,-86, 
  /* [29][0][][] */ 10,19,52,-127,-27,-15,37,34, 
  /* [30][0][][] */ -127,85,66,5,81,-17,14,-19, 
  /* [31][0][][] */ -100,-52,-127,-71,-28,98,5,102, 
  /* [32][0][][] */ 7,-28,-56,-71,1,-38,-9,-127, 
  /* [33][0][][] */ 58,81,127,64,-2,-69,-67,-69, 
  /* [34][0][][] */ 74,79,-75,-34,2,-91,-56,127, 
  /* [35][0][][] */ 0,12,-57,127,-15,-1,40,-21, 
  /* [36][0][][] */ -127,-27,-21,-64,21,22,-3,-80, 
  /* [37][0][][] */ -26,-16,-86,120,-127,-11,-17,26, 
  /* [38][0][][] */ 98,-127,-118,-113,-1,90,75,115, 
  /* [39][0][][] */ -69,-80,-127,-52,-18,64,54,118, 
  /* [40][0][][] */ -114,127,127,-5,81,36,52,38, 
  /* [41][0][][] */ -93,-8,-9,26,-11,-41,-58,-127, 
  /* [42][0][][] */ -114,-56,33,-85,52,-43,-127,-87, 
  /* [43][0][][] */ 63,-44,-17,42,-24,127,-39,-64, 
  /* [44][0][][] */ 29,-77,62,17,99,-127,-70,94, 
  /* [45][0][][] */ 42,75,-38,-37,-36,12,8,-127, 
  /* [46][0][][] */ 40,42,127,46,-13,-45,-76,-73, 
  /* [47][0][][] */ 39,-84,74,-127,122,-20,-47,-42, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant39_scale = { 48, { 0.0019380977610126138, 0.0016317925183102489, 0.0013054243754595518, 0.0015680227661505342, 0.0023118054959923029, 0.0027318517677485943, 0.0017441845266148448, 0.0016012924024835229, 0.0021361673716455698, 0.0014475359348580241, 0.0024501660373061895, 0.0019793517421931028, 0.0019019073806703091, 0.0027871550992131233, 0.0024727294221520424, 0.0017429144354537129, 0.00082917010877281427, 0.0011364785023033619, 0.0017504002898931503, 0.0016058061737567186, 0.002315970603376627, 0.0015131892869248986, 0.0017876570345833898, 0.0020396437030285597, 0.002278635511174798, 0.0017431011656299233, 0.0014950437471270561, 0.0014681159518659115, 0.0021800140384584665, 0.0031583011150360107, 0.0023741072509437799, 0.001071578124538064, 0.0017255030106753111, 0.0012001292780041695, 0.0017554372316226363, 0.003215947886928916, 0.0023219406139105558, 0.0022711309138685465, 0.0015204112278297544, 0.0015598608879372478, 0.0013371590757742524, 0.0027279674541205168, 0.0021016721148043871, 0.0019895690493285656, 0.0014350309502333403, 0.0018689600983634591, 0.0015799049288034439, 0.0014913550112396479, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { 3480, -6159, -16316, 3113, -10482, -11311, -10158, -7931, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 6.4807070884853601e-05, 5.8706413256004453e-05, 6.9701680331490934e-05, 5.795331162516959e-05, 5.9008740208810195e-05, 7.7206488640513271e-05, 3.2856743928277865e-05, 3.7911111576249823e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[8*1*1*48] = { 
  /* [0][0][][] */ -33,-28,12,20,-127,-6,11,-60,23,-90,-50,-27,18,-53,34,15,5,6,-20,-8,-45,13,23,71,-5,37,47,-64,-18,-17,-81,28,-36,42,65,50,-1,-5,102,-8,-104,-30,-2,2,6,18,85,-30, 
  /* [1][0][][] */ 83,14,25,-23,-4,-19,-48,-40,-74,56,45,-3,-29,-70,14,90,-14,18,-12,-13,-37,8,-28,-40,37,-24,-53,92,-65,36,95,-49,-1,-7,-26,-38,-16,14,84,-62,127,-4,10,-4,-57,66,-112,6, 
  /* [2][0][][] */ 41,-21,-53,-5,-127,71,-38,-18,43,9,32,-28,-42,31,-23,-49,-82,64,3,-63,59,-6,-53,3,-29,-120,27,8,-10,19,-44,60,56,-3,-63,32,29,24,83,17,69,43,-3,50,31,0,58,49, 
  /* [3][0][][] */ -16,-13,10,-14,95,5,-15,11,61,35,127,64,7,-19,-12,59,25,-7,82,-26,-15,89,58,0,7,-54,-68,-16,-38,-18,-20,-114,-19,-4,-27,-98,-4,-31,-6,-31,35,51,-69,-15,19,-74,6,84, 
  /* [4][0][][] */ 77,49,123,-42,-111,40,-68,43,-8,73,-11,-46,-37,-72,-17,-29,-63,17,-28,-24,43,9,-25,43,67,-28,116,13,6,-111,29,87,-50,-18,29,3,-32,-28,80,-118,127,-39,-18,26,18,20,-39,-3, 
  /* [5][0][][] */ 63,-60,-21,37,0,-15,-3,-55,-37,-43,-15,-27,-47,9,70,19,32,-34,20,-22,-39,35,-53,-75,7,-60,2,34,4,-22,-26,3,40,63,-47,27,42,-2,28,75,127,56,-60,64,-64,9,16,23, 
  /* [6][0][][] */ 9,-36,8,76,9,-78,80,8,-14,58,-56,-33,-19,-31,74,15,57,-24,-12,-40,-51,127,13,65,37,30,-13,-27,99,47,105,-81,43,16,2,68,-97,107,8,27,-10,-68,26,18,-74,-66,-21,11, 
  /* [7][0][][] */ -53,-24,-24,-26,-7,-57,26,9,-100,12,-78,37,27,92,-41,10,30,27,-35,-86,108,-55,-75,14,8,-32,-97,-11,-29,46,32,123,-45,-31,67,3,127,-55,-93,80,-57,49,79,77,74,-71,-32,15, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0042083184234797955, 0.0038121656980365515, 0.0045261555351316929, 0.0037632621824741364, 0.0038317975122481585, 0.005013488233089447, 0.0021335887722671032, 0.0024617998860776424, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int32_t tensor_data42[48] = { 14524, 353, -15653, -3020, -5641, -7090, -4416, -2397, 2429, 9449, -3706, -873, -1183, -2809, -3000, 3777, -4467, 18286, -569, -2708, -3523, -3315, -1965, 752, -3447, -1393, 1338, -6829, 14972, -3143, 20629, 359, -781, -4605, -4605, 18012, 11724, 1700, 6469, 13175, 1811, -3788, -1510, 4211, -9867, -487, -9803, -268, };
const TfArray<1, int> tensor_dimension42 = { 1, { 48 } };
const TfArray<48, float> quant42_scale = { 48, { 0.00011601029109442607, 0.00017287979426328093, 8.7839340267237276e-05, 0.00010803973418660462, 0.00031213246984407306, 0.00014544320583809167, 0.00010824643686646596, 0.00030936388066038489, 0.00018847861792892218, 0.00015320634702220559, 0.00016027825768105686, 0.00015802207053638995, 0.00012482465535867959, 0.00011743251525331289, 0.0001219981859321706, 0.00010564128751866519, 0.00012363045243546367, 7.2119131800718606e-05, 0.00016865089128259569, 0.00017801030480768532, 0.00014934146020095795, 0.00019170885207131505, 0.00014864926924929023, 0.00023156031966209412, 0.00010861537157325074, 0.00013812178804073483, 0.00012337103544268757, 0.00010329172800993547, 8.2285456301178783e-05, 0.00016562966629862785, 9.3773604021407664e-05, 0.00022157994681037962, 0.00022480101324617863, 0.0001731269876472652, 0.00013197588850744069, 8.2443781138863415e-05, 0.00011569483467610553, 0.00015199644258245826, 0.00027197875897400081, 0.00010574729822110385, 0.00023331097327172756, 0.00018088195065502077, 0.00015615565644111484, 0.00019470225379336625, 0.00010497048788238317, 0.0003825634194072336, 0.00010148240107810125, 0.00018118864682037383, } };
const TfArray<48, int> quant42_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[1*3*3*48] = { 
  /* [0][0][][] */ 11,-127,41,127,-14,41,-19,6,7,20,41,-9,-63,63,4,16,-51,-80,127,-14,-2,21,61,43,-39,38,55,127,-117,62,-36,46,-127,33,-22,-47,-27,-90,24,-51,28,-6,-59,47,-3,34,57,-64, -53,103,127,-28,14,72,-125,56,104,-20,127,-16,45,95,62,-4,-91,-71,-69,-77,127,21,127,20,82,123,112,18,-60,39,-69,26,6,127,32,-127,21,60,14,-127,127,16,-21,-127,-60,-23,-4,-93, 17,19,16,75,-11,102,1,-32,10,12,56,13,27,51,-4,11,-28,-74,-69,66,4,4,4,-26,-29,11,48,118,-91,38,-44,40,14,26,-13,-21,-21,-74,25,-63,-8,-13,-8,66,2,49,59,-13, 
  /* [0][1][][] */ -58,-76,92,127,-25,31,65,26,-7,7,-31,27,127,127,40,127,27,-30,-69,54,57,8,-17,101,81,45,32,45,58,-35,-93,-24,-6,35,18,40,-19,32,1,-8,30,-40,39,-41,0,9,52,69, 67,27,77,-46,127,94,-81,127,-127,-127,33,-32,-96,-91,86,-105,120,-33,16,57,-14,127,86,-127,127,-55,-70,-2,-54,16,73,-127,1,81,79,-29,-127,125,-127,11,-40,-125,5,-30,127,-127,-36,-17, -65,34,59,73,-29,-103,60,-65,-13,9,-21,-27,-25,91,24,117,42,-20,50,-15,65,-22,0,15,73,55,47,26,-56,-57,-95,-12,23,-5,46,51,-36,43,-3,4,21,83,87,2,-2,28,63,30, 
  /* [0][2][][] */ -76,-32,-23,-55,-9,-51,94,-18,-16,32,-43,127,114,-27,-122,-12,99,-124,-96,-40,-80,-31,-47,0,-65,-28,-47,40,-63,54,-94,54,21,-39,-53,-117,-32,-127,-4,-39,-61,95,-10,10,81,10,127,3, -127,-8,102,32,-23,127,15,2,31,-46,-6,34,-42,-20,-33,-17,-127,23,73,-127,-29,-96,-15,-20,-6,-127,-127,-7,-127,127,-127,58,50,-52,127,-74,0,26,13,124,-37,127,127,-89,88,43,71,127, -33,6,-28,38,-1,3,127,-21,-25,6,-44,-122,-92,1,-127,6,92,-127,56,80,-73,-12,-40,0,-89,-33,-45,43,-61,33,-79,37,4,-11,-46,-76,-4,-115,-3,-41,-27,-50,-6,20,33,21,117,-12, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant43_scale = { 48, { 0.00653097964823246, 0.0097325369715690613, 0.0049450523220002651, 0.006082264706492424, 0.017571981996297836, 0.0081879515200853348, 0.0060939015820622444, 0.017416121438145638, 0.010610696859657764, 0.0086249895393848419, 0.0090231141075491905, 0.0088960984721779823, 0.0070271980948746204, 0.00661104591563344, 0.0068680774420499802, 0.0059472406283020973, 0.0069599687121808529, 0.0040600588545203209, 0.0094944639131426811, 0.010021367110311985, 0.0084074093028903008, 0.010792547836899757, 0.0083684418350458145, 0.013036048039793968, 0.0061146710067987442, 0.0077757807448506355, 0.0069453641772270203, 0.0058149686083197594, 0.0046323877759277821, 0.0093243792653083801, 0.0052791307680308819, 0.012474187649786472, 0.012655522674322128, 0.0097464527934789658, 0.0074297874234616756, 0.0046413009986281395, 0.0065132207237184048, 0.0085568763315677643, 0.015311466529965401, 0.0059532085433602333, 0.013134604319930077, 0.010183030739426613, 0.0087910257279872894, 0.010961066000163555, 0.0059094768948853016, 0.021537002176046371, 0.0057131093926727772, 0.010200296528637409, } };
const TfArray<48, int> quant43_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 3 };
const ALIGN(16) int32_t tensor_data44[48] = { 6906, 2509, 850, -152, 9601, -3396, 6605, -3500, 6368, 4757, 10365, 4917, 5321, 1255, 1939, 3484, 3952, 1991, 2352, 2612, 1736, 773, -499, 9691, 971, 2786, 5999, 1129, 5922, -3377, 6216, 12157, 215, -1862, 3724, 3814, -627, 8040, 9811, 6348, 10888, 3424, 284, -1159, 5396, -2560, 2848, 68, };
const TfArray<1, int> tensor_dimension44 = { 1, { 48 } };
const TfArray<48, float> quant44_scale = { 48, { 0.00010412542906124145, 0.00012592502753250301, 0.00011122709111077711, 0.0001775661512510851, 8.3347280451562256e-05, 0.00010642988490872085, 0.00011212031677132472, 0.00014122336870059371, 0.00011719888425432146, 0.00011296629236312583, 7.2249153163284063e-05, 0.00012136290752096102, 0.00012138795136706904, 0.0001552239409647882, 0.0001393267884850502, 0.00017125012527685612, 0.00011376996553735808, 0.00015486963093280792, 0.00012019023415632546, 0.00014569261111319065, 0.00011572432413231581, 0.00012401198910083622, 0.00015969062224030495, 7.8012039011809975e-05, 0.00021704299433622509, 0.0001229348563356325, 9.0319539594929665e-05, 0.00019459745089989156, 0.00010289008059771731, 8.9015033154282719e-05, 0.00012196585157653317, 7.3687675467226654e-05, 0.00019983295351266861, 0.00013888909597881138, 0.00013388303341343999, 0.00012582402268890291, 0.00012919517757836729, 0.00010230243788100779, 8.3164450188633054e-05, 9.9691278592217714e-05, 7.945858669700101e-05, 0.00014248539810068905, 0.00014259744784794748, 0.00012569106183946133, 0.00013159634545445442, 0.00014548067701980472, 0.00015783052367623895, 0.0001358487643301487, } };
const TfArray<48, int> quant44_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const ALIGN(16) int8_t tensor_data45[48*1*1*8] = { 
  /* [0][0][][] */ -63,127,-58,41,-19,75,95,10, 
  /* [1][0][][] */ -73,2,-73,-49,59,65,127,24, 
  /* [2][0][][] */ -84,-81,-127,-2,105,15,115,76, 
  /* [3][0][][] */ 127,-93,5,54,-61,-68,-13,-16, 
  /* [4][0][][] */ 2,59,-60,71,-40,127,-55,-30, 
  /* [5][0][][] */ 8,9,79,-12,16,-127,-99,-96, 
  /* [6][0][][] */ 28,68,45,55,26,127,-49,105, 
  /* [7][0][][] */ -127,-29,40,-7,104,-73,22,17, 
  /* [8][0][][] */ 63,-79,70,-13,-34,-35,2,-127, 
  /* [9][0][][] */ -119,127,8,11,56,-76,95,89, 
  /* [10][0][][] */ 12,-126,-97,-116,-86,26,61,127, 
  /* [11][0][][] */ 12,81,49,88,-18,-14,-48,127, 
  /* [12][0][][] */ 63,-79,-127,-68,-44,-38,2,69, 
  /* [13][0][][] */ -127,-98,28,-55,-5,-16,-95,48, 
  /* [14][0][][] */ 69,38,66,-114,-115,85,-70,-127, 
  /* [15][0][][] */ 0,127,48,8,2,32,40,-52, 
  /* [16][0][][] */ -116,13,70,-42,52,127,64,-87, 
  /* [17][0][][] */ -127,-53,58,28,36,27,33,113, 
  /* [18][0][][] */ 1,13,71,-16,-53,-95,-9,127, 
  /* [19][0][][] */ -16,-9,-72,-107,41,-68,-127,-33, 
  /* [20][0][][] */ 64,79,-127,78,-104,78,85,-11, 
  /* [21][0][][] */ 79,73,43,121,-28,89,127,-66, 
  /* [22][0][][] */ 127,2,33,-102,37,-54,3,62, 
  /* [23][0][][] */ 114,-34,90,23,64,-127,75,31, 
  /* [24][0][][] */ -5,-44,-37,-2,68,-8,-127,37, 
  /* [25][0][][] */ 12,3,11,-46,-87,-127,9,80, 
  /* [26][0][][] */ -10,-24,127,22,56,-122,-109,35, 
  /* [27][0][][] */ -127,80,-18,20,3,-47,-31,33, 
  /* [28][0][][] */ -95,-109,-22,-1,-50,31,127,-79, 
  /* [29][0][][] */ -117,-68,-113,124,-16,127,-115,91, 
  /* [30][0][][] */ 33,-68,127,-55,2,9,-49,-24, 
  /* [31][0][][] */ -13,-60,63,-127,110,3,-27,67, 
  /* [32][0][][] */ 56,-18,-127,35,31,-11,-62,6, 
  /* [33][0][][] */ 49,-8,52,106,-61,-37,-127,-69, 
  /* [34][0][][] */ -2,67,127,-3,-105,15,92,47, 
  /* [35][0][][] */ 23,-127,42,-107,-40,-96,-25,-26, 
  /* [36][0][][] */ -92,-127,38,39,-87,103,-75,92, 
  /* [37][0][][] */ -38,60,58,-74,-8,-39,127,35, 
  /* [38][0][][] */ 43,100,127,34,43,-16,32,-18, 
  /* [39][0][][] */ 104,87,-27,-127,-28,-72,-87,-33, 
  /* [40][0][][] */ -73,121,127,23,81,7,-28,15, 
  /* [41][0][][] */ -58,-79,-16,-42,-60,-28,-24,127, 
  /* [42][0][][] */ 45,-63,4,86,2,76,-65,-127, 
  /* [43][0][][] */ 24,-23,-127,34,-52,94,-24,-55, 
  /* [44][0][][] */ -36,41,41,127,-51,-5,55,-40, 
  /* [45][0][][] */ -7,-45,-46,127,-22,82,-5,33, 
  /* [46][0][][] */ 51,-67,127,-73,6,12,-45,-34, 
  /* [47][0][][] */ -50,-18,63,-37,2,-127,0,53, 
};
const TfArray<4, int> tensor_dimension45 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant45_scale = { 48, { 0.0015667403349652886, 0.0018947514472529292, 0.0016735965618863702, 0.0026717782020568848, 0.0012540984898805618, 0.0016014146385714412, 0.0016870367107912898, 0.0021249405108392239, 0.0017634521936997771, 0.0016997657949104905, 0.0010871087433770299, 0.0018261068034917116, 0.0018264836398884654, 0.0023356024175882339, 0.0020964033901691437, 0.0025767430197447538, 0.0017118584364652634, 0.0023302712943404913, 0.0018084619659930468, 0.0021921875886619091, 0.0017412649467587471, 0.0018659665947780013, 0.0024028110783547163, 0.0011738209286704659, 0.0032657729461789131, 0.0018497594865038991, 0.0013590076705440879, 0.0029280423186719418, 0.0015481524169445038, 0.0013393792323768139, 0.0018351791659370065, 0.0011087536113336682, 0.0030068191699683666, 0.0020898175425827503, 0.0020144928712397814, 0.0018932317616418004, 0.0019439563620835543, 0.0015393103240057826, 0.0012513474794104695, 0.0015000210842117667, 0.0011955866357311606, 0.0021439299453049898, 0.0021456158719956875, 0.0018912311643362045, 0.0019800858572125435, 0.0021889987401664257, 0.0023748227395117283, 0.0020440707448869944, } };
const TfArray<48, int> quant45_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const ALIGN(16) int32_t tensor_data46[8] = { 17984, -10064, -9498, -13347, -5785, 13775, 8870, 1912, };
const TfArray<1, int> tensor_dimension46 = { 1, { 8 } };
const TfArray<8, float> quant46_scale = { 8, { 5.4713542340323329e-05, 6.9581677962560207e-05, 8.0889789387583733e-05, 9.5640913059469312e-05, 6.8876644945703447e-05, 0.00018241269572172314, 5.9545029216678813e-05, 5.9366862842580304e-05, } };
const TfArray<8, int> quant46_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const ALIGN(16) int8_t tensor_data47[8*1*1*48] = { 
  /* [0][0][][] */ 0,63,32,-35,103,-127,-78,41,16,93,-14,8,26,-72,-16,96,0,-1,-9,-34,-23,11,-25,-24,-109,19,-110,11,38,-36,-53,-6,23,37,-29,8,-40,55,8,29,-36,-24,9,-55,-10,-17,-67,-15, 
  /* [1][0][][] */ -29,16,1,38,-19,-31,-46,20,11,-48,-71,23,7,-81,-35,107,68,24,22,105,0,10,71,68,61,39,-123,15,27,-18,52,118,-65,29,30,127,-97,-30,-35,-38,-108,-29,-13,126,47,-76,19,30, 
  /* [2][0][][] */ 2,13,57,56,42,-17,-48,24,4,98,-93,-11,-58,23,-33,59,72,-2,-44,127,16,-8,-54,-35,124,-68,-110,-27,34,-46,1,63,20,-61,49,25,-5,57,23,25,79,-14,14,57,76,43,-23,26, 
  /* [3][0][][] */ 5,2,17,-30,-38,114,88,-109,23,-112,-42,23,41,40,33,-21,-9,23,-11,9,-3,-5,-32,14,58,23,-36,22,-31,-15,5,9,-16,-4,39,-47,-68,-38,-23,7,4,76,-16,60,-31,127,-19,6, 
  /* [4][0][][] */ 17,-53,87,-71,-22,28,-127,11,-5,75,-91,-28,-56,-6,-50,45,107,33,27,71,87,-41,-14,22,71,33,-79,-31,-10,-81,57,22,84,-19,-36,-31,90,-7,14,12,-96,15,-5,-44,75,39,61,-8, 
  /* [5][0][][] */ -3,-14,-27,14,-14,-127,-15,-2,-24,-10,-6,-29,-1,7,6,4,-8,-74,1,2,-18,-25,-61,3,19,-19,109,-20,4,32,-15,28,13,4,-8,-9,1,11,-6,23,-24,-56,31,-30,12,26,24,-10, 
  /* [6][0][][] */ -19,-10,-10,-76,-24,-10,-81,-22,53,-18,5,37,20,-63,8,-58,28,83,71,-57,30,10,-3,20,-75,7,127,-51,-29,36,20,-19,89,20,8,-12,-6,-46,-58,-60,17,59,37,-69,-57,37,-40,-49, 
  /* [7][0][][] */ -70,-3,-68,-31,115,-9,-32,53,51,127,74,89,-6,-67,-69,-44,-35,-61,-50,126,73,53,-37,107,41,-108,-36,-25,47,-95,-39,28,-41,-74,-49,-33,-43,16,30,56,-76,36,-76,8,14,-6,70,5, 
};
const TfArray<4, int> tensor_dimension47 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant47_scale = { 8, { 0.0027745920233428478, 0.0035285737831145525, 0.0041020223870873451, 0.0048500699922442436, 0.0034928207751363516, 0.0092503754422068596, 0.0030196027364581823, 0.0030105677433311939, } };
const TfArray<8, int> quant47_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const ALIGN(16) int32_t tensor_data48[48] = { -100, -4427, 34, -3802, -195, 1868, 3899, 1345, 1588, -5666, 25060, -2084, -4441, 17637, -1384, -9610, -10388, 3920, -11206, -8943, 18878, -1860, -5620, -666, -6538, 1642, -6336, -3284, -4583, 9794, 39271, -2459, 2873, 12296, 24384, -7059, 30801, 876, -2907, -24, -8171, -2284, -3427, -2014, 9655, -13992, -1571, -1155, };
const TfArray<1, int> tensor_dimension48 = { 1, { 48 } };
const TfArray<48, float> quant48_scale = { 48, { 0.00021838789689354599, 0.00012551207328215241, 9.9322918686084449e-05, 0.00012175161100458354, 0.00017493710038252175, 0.00016907312965486199, 9.3411690613720566e-05, 0.00014024855045136064, 0.00012138465535826981, 0.00018595413712318987, 6.6548222093842924e-05, 0.00010266029858030379, 0.00013343023601919413, 9.4819020887371153e-05, 9.7839860245585442e-05, 0.00011547965550562367, 0.00010367017966927961, 3.0109875297057442e-05, 5.3234714869176969e-05, 0.00019966572290286422, 6.1449027271009982e-05, 8.5485982708632946e-05, 0.00016499485354870558, 0.00016181856335606426, 0.00016067127580754459, 0.00012625103408936411, 0.00014825024118181318, 0.00011694479326251894, 0.00016382799367420375, 0.00016477117605973035, 4.735202674055472e-05, 7.0635273004882038e-05, 0.00016013452841434628, 0.0001065015239873901, 4.7225759772118181e-05, 0.00011600416473811492, 5.0230220949742943e-05, 8.5967425548005849e-05, 0.00018902508600149304, 0.00011425703269196674, 0.00013586187560576946, 8.3896964497398585e-05, 0.00021547407959587872, 0.00019897836318705231, 0.00013233481149654835, 0.00012750120367854834, 0.00010854801803361624, 0.00023413845337927341, } };
const TfArray<48, int> quant48_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const ALIGN(16) int8_t tensor_data49[1*3*3*48] = { 
  /* [0][0][][] */ 17,37,-19,0,37,41,10,-7,-26,-60,-96,19,-6,29,-121,28,-32,72,-46,25,-56,-42,1,35,-43,13,-19,-38,11,-24,-97,83,28,24,-28,-36,-127,-28,-28,-25,-8,-107,73,4,68,78,-13,37, 5,-10,127,-15,-127,57,127,2,127,-51,-90,127,-23,-6,-31,127,50,100,-38,127,-19,22,127,-43,-60,127,-105,127,20,20,-112,108,-33,-127,-105,106,-53,127,-116,-46,72,23,126,48,-32,127,127,83, -37,-44,-33,1,66,12,16,-11,34,-46,-127,-23,-13,27,101,30,-31,6,-44,7,-54,44,-15,52,-29,7,-33,-18,-5,-39,-71,60,23,1,4,-42,-104,-22,31,-19,-22,99,43,6,61,87,-49,17, 
  /* [0][1][][] */ 40,127,78,35,26,69,-26,-1,-57,22,-1,117,-13,-118,21,-9,40,127,106,1,-34,-127,11,-20,25,-5,-53,-38,55,-54,-71,-54,-49,-20,-109,31,-87,13,43,-54,37,-127,127,-57,28,-60,32,7, 99,-11,22,127,-46,-127,113,-127,-113,127,0,-11,127,-36,14,43,127,-44,63,36,-127,2,3,-127,127,-100,127,-17,127,7,-95,-127,127,-65,28,127,-45,39,127,40,127,-47,85,-15,-127,-32,119,-2, -127,-47,53,19,-17,33,-49,2,67,-4,17,-3,-19,-127,29,-6,49,68,103,6,-85,117,6,23,13,-29,-43,-36,-18,-33,-77,-57,-54,-29,-127,7,-95,-34,-36,-47,-25,99,67,-63,9,-85,2,16, 
  /* [0][2][][] */ -54,22,-92,-10,-19,14,7,38,-19,-6,-38,-39,7,55,-113,-35,1,58,127,3,-46,-49,3,53,13,-33,-2,23,-9,26,-127,67,-58,10,-83,-21,-77,-113,-1,75,7,-47,33,16,-45,41,-24,51, -41,-17,12,11,24,2,-107,107,-33,7,21,-81,60,-125,-52,-8,7,101,40,8,0,10,8,52,15,5,40,72,34,-127,-118,113,-67,-33,-105,-23,-109,2,21,127,-109,66,32,127,-13,85,-84,-127, 63,-60,-81,-16,-20,21,0,31,4,-4,-54,-48,-1,53,127,-19,-2,72,81,2,-41,42,7,42,14,-21,-5,32,-31,20,-118,71,-58,0,-79,-22,-73,-113,4,47,16,54,29,10,-50,49,-7,30, 
};
const TfArray<4, int> tensor_dimension49 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant49_scale = { 48, { 0.016155412420630455, 0.00928485207259655, 0.0073474887758493423, 0.0090066688135266304, 0.012941106222569942, 0.012507314793765545, 0.0069102016277611256, 0.010374994017183781, 0.0089795226231217384, 0.013756100088357925, 0.0049229557625949383, 0.0075943740084767342, 0.0098706036806106567, 0.0070143095217645168, 0.0072377785108983517, 0.008542696014046669, 0.0076690809801220894, 0.002227401128038764, 0.0039380788803100586, 0.014770424924790859, 0.0045457389205694199, 0.0063238912262022495, 0.012205620296299458, 0.011970652267336845, 0.011885780841112137, 0.0093395169824361801, 0.010966924950480461, 0.0086510805413126945, 0.012119301594793797, 0.012189073488116264, 0.0035029025748372078, 0.005225298460572958, 0.011846074834465981, 0.007878531701862812, 0.0034935616422444582, 0.0085814967751502991, 0.003715819213539362, 0.00635950593277812, 0.01398327574133873, 0.0084522515535354614, 0.010050486773252487, 0.0062063420191407204, 0.015939859673380852, 0.014719576574862003, 0.009789569303393364, 0.0094319991767406464, 0.0080299228429794312, 0.017320571467280388, } };
const TfArray<48, int> quant49_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 3 };
const ALIGN(16) int32_t tensor_data50[48] = { -2628, -573, 4733, 2311, 1945, 18797, 4078, 3544, -585, 8651, 8492, -451, 2783, 8942, 489, 5828, -183, 1928, 2068, 18769, 1049, 6343, 3424, -1409, 12930, 2204, 7227, 1460, -1904, 7111, 7734, 6598, 352, 830, 1476, 38, 9237, 4379, -1712, -347, -3114, 19263, -10629, 18395, 6378, 26439, -921, -1136, };
const TfArray<1, int> tensor_dimension50 = { 1, { 48 } };
const TfArray<48, float> quant50_scale = { 48, { 0.00010661216947482899, 0.00012980792962480336, 0.0001406289084115997, 0.00011364451347617432, 0.00011871946480823681, 5.0831298722187057e-05, 0.00011042076221201569, 0.0001124987393268384, 0.00012079278531018645, 8.4478982898872346e-05, 8.8067754404619336e-05, 0.00013410249084699899, 0.00014626719348598272, 8.7982778495643288e-05, 0.00017986330203711987, 9.6662122814450413e-05, 0.00014938451931811869, 0.00015067386266309768, 0.00012120246537961066, 5.0216309318784624e-05, 0.00012988019443582743, 0.00011369049025233835, 0.00012498846626840532, 0.00012515192793216556, 6.6649765358306468e-05, 0.00013791580568067729, 8.5967702034395188e-05, 0.00013589223090093583, 0.00012146555673098192, 0.0001198008976643905, 9.8775228252634406e-05, 9.4733761216048151e-05, 0.00014180823927745223, 0.00017473124898970127, 0.00010535543697187677, 0.00016486388631165028, 8.2271384599152952e-05, 0.00012550604878924787, 0.000113010493805632, 0.00010860736074391752, 0.00011561301653273404, 4.6906705392757431e-05, 6.7993125412613153e-05, 5.0147238653153181e-05, 9.6693205705378205e-05, 3.7174260796746239e-05, 0.00016292641521431506, 0.00012271496234461665, } };
const TfArray<48, int> quant50_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const ALIGN(16) int8_t tensor_data51[48*1*1*8] = { 
  /* [0][0][][] */ -4,-127,-7,119,-40,109,-51,90, 
  /* [1][0][][] */ 55,99,23,2,-15,-127,-7,-51, 
  /* [2][0][][] */ 34,-31,9,-28,74,-19,14,-127, 
  /* [3][0][][] */ 127,-59,-38,-32,32,-122,69,94, 
  /* [4][0][][] */ -127,9,-107,41,-2,49,44,-52, 
  /* [5][0][][] */ 25,-21,-59,127,-82,-106,-66,27, 
  /* [6][0][][] */ -42,-5,127,27,33,-109,-64,24, 
  /* [7][0][][] */ 1,-40,80,-127,20,-52,-23,80, 
  /* [8][0][][] */ 26,98,35,26,127,-59,90,71, 
  /* [9][0][][] */ 48,-21,82,-127,44,-63,1,60, 
  /* [10][0][][] */ 54,22,53,27,99,-18,-127,-95, 
  /* [11][0][][] */ -11,122,23,27,82,-37,53,127, 
  /* [12][0][][] */ -46,53,37,105,65,-81,-127,60, 
  /* [13][0][][] */ -44,-127,-26,20,35,27,-82,-56, 
  /* [14][0][][] */ -20,58,-17,10,21,-127,-24,37, 
  /* [15][0][][] */ -73,-43,-127,8,-85,30,39,94, 
  /* [16][0][][] */ 16,-127,-80,-46,-9,22,25,-86, 
  /* [17][0][][] */ -18,-9,41,-78,11,-16,-127,-89, 
  /* [18][0][][] */ -2,-121,49,42,-45,84,-127,11, 
  /* [19][0][][] */ -104,66,-13,127,49,36,-15,-97, 
  /* [20][0][][] */ -45,120,-57,95,99,-7,78,127, 
  /* [21][0][][] */ 25,97,-47,82,4,-42,-127,55, 
  /* [22][0][][] */ -17,123,-36,-127,40,-87,-3,0, 
  /* [23][0][][] */ 64,-69,127,1,-60,-43,-74,-112, 
  /* [24][0][][] */ 112,-65,-127,-60,-97,-49,43,0, 
  /* [25][0][][] */ 31,13,-52,-51,83,-112,4,-127, 
  /* [26][0][][] */ -53,-45,-121,-97,-9,103,127,-44, 
  /* [27][0][][] */ -114,-18,-27,58,-23,-19,60,-127, 
  /* [28][0][][] */ 89,111,34,-127,-40,62,-79,-38, 
  /* [29][0][][] */ -21,22,10,25,127,-35,-22,13, 
  /* [30][0][][] */ -109,127,-43,-54,68,55,25,-34, 
  /* [31][0][][] */ -73,127,123,-7,84,87,-4,-23, 
  /* [32][0][][] */ 23,-31,-38,15,-55,127,92,-39, 
  /* [33][0][][] */ -12,127,-52,-73,17,-38,37,-28, 
  /* [34][0][][] */ -17,127,34,109,-18,125,54,-72, 
  /* [35][0][][] */ -41,127,21,-34,45,-69,3,-10, 
  /* [36][0][][] */ -17,-105,-89,-127,19,51,16,57, 
  /* [37][0][][] */ 52,-127,103,37,-3,9,-81,4, 
  /* [38][0][][] */ 62,-71,104,-101,-15,27,-124,-127, 
  /* [39][0][][] */ 24,78,55,-41,-45,-102,127,-94, 
  /* [40][0][][] */ 19,-124,127,23,-101,-74,-27,-90, 
  /* [41][0][][] */ -2,-15,-62,-35,-127,127,-100,-61, 
  /* [42][0][][] */ 105,43,124,-18,56,-8,12,-127, 
  /* [43][0][][] */ -20,126,42,98,43,-127,-75,-31, 
  /* [44][0][][] */ -7,95,127,-75,93,74,-52,-4, 
  /* [45][0][][] */ -44,-61,83,127,-5,25,94,73, 
  /* [46][0][][] */ -86,114,-8,-13,127,-23,-24,64, 
  /* [47][0][][] */ -39,97,127,53,8,58,-125,-39, 
};
const TfArray<4, int> tensor_dimension51 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant51_scale = { 48, { 0.0019094839226454496, 0.0023249329533427954, 0.002518742810934782, 0.0020354371517896652, 0.0021263323724269867, 0.00091041717678308487, 0.0019776979461312294, 0.0020149156916886568, 0.002163466764613986, 0.0015130661195144057, 0.0015773430932313204, 0.0024018511176109314, 0.0026197277475148439, 0.001575821079313755, 0.0032214529346674681, 0.0017312730196863413, 0.0026755607686936855, 0.0026986536104232073, 0.0021708044223487377, 0.00089940236648544669, 0.0023262272588908672, 0.002036260673776269, 0.0022386137861758471, 0.0022415413986891508, 0.0011937348172068596, 0.0024701496586203575, 0.0015397298848256469, 0.0024339063093066216, 0.0021755164489150047, 0.0021457015536725521, 0.0017691199900582433, 0.0016967349220067263, 0.0025398654397577047, 0.0031295348890125751, 0.0018869751365855336, 0.0029528050217777491, 0.0014735268196091056, 0.0022478839382529259, 0.0020240815356373787, 0.0019452190026640892, 0.0020706942304968834, 0.0008401254890486598, 0.001217795186676085, 0.00089816527906805277, 0.0017318297177553177, 0.00066581193823367357, 0.0029181037098169327, 0.0021978940349072218, } };
const TfArray<48, int> quant51_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const ALIGN(16) int32_t tensor_data52[8] = { -662, 10414, 2585, -1739, -25157, 16672, -1002, 10219, };
const TfArray<1, int> tensor_dimension52 = { 1, { 8 } };
const TfArray<8, float> quant52_scale = { 8, { 3.7597063055727631e-05, 5.3259558626450598e-05, 6.2574945332016796e-05, 4.8901834816206247e-05, 5.0488568376749754e-05, 7.4897769081871957e-05, 4.9102749471785501e-05, 5.9523925301618874e-05, } };
const TfArray<8, int> quant52_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const ALIGN(16) int8_t tensor_data53[8*1*1*48] = { 
  /* [0][0][][] */ -76,107,-55,8,-17,-2,31,-127,-29,57,16,92,-7,-32,23,-54,24,-1,37,0,4,55,-29,-93,-91,51,-76,-86,43,27,53,5,70,55,-78,1,-3,-42,-27,63,-1,26,61,-53,84,-14,-11,-39, 
  /* [1][0][][] */ 14,-26,-2,42,-11,-42,10,51,-46,61,-19,-13,-50,-41,-39,-127,117,21,-46,37,-41,-94,-1,-19,55,-40,31,-21,101,7,-12,30,48,-46,23,-10,-31,-58,-70,45,-48,2,-17,-37,-34,48,-31,-25, 
  /* [2][0][][] */ 1,-59,20,60,30,-16,-29,26,-53,41,43,82,-118,-21,-44,-71,46,-96,-43,114,-61,-37,-59,1,30,36,-40,127,55,-65,-37,27,-47,-37,-26,-2,-64,41,15,41,-66,74,39,-90,48,31,49,-46, 
  /* [3][0][][] */ 8,-20,-72,-65,-27,84,45,-3,61,77,-6,-23,8,3,43,-27,70,34,-19,-3,18,95,16,25,-13,-2,54,98,68,-53,-126,-53,-127,34,21,81,34,-22,-112,-24,-34,-82,-49,36,-74,8,61,50, 
  /* [4][0][][] */ 74,-11,91,-27,29,-80,-58,-98,-46,114,54,54,21,11,-86,74,66,0,35,56,-105,-77,-84,-45,108,96,-33,56,127,-18,4,21,14,21,31,38,-78,-3,103,49,-68,72,28,-90,93,-116,21,42, 
  /* [5][0][][] */ -24,-5,-54,-33,-93,42,19,127,-33,-11,76,-23,19,-60,-28,-45,-85,-23,-46,6,14,7,38,-62,43,-17,-37,-5,-29,-38,-50,-12,-2,-70,23,39,22,10,8,-6,4,-6,49,-6,-20,9,-24,-31, 
  /* [6][0][][] */ -44,-25,-80,-85,18,27,-71,50,-34,35,65,-20,-4,29,30,-27,69,-35,-98,88,40,-10,38,75,-56,73,55,-24,95,43,-43,-57,-120,-23,-90,-13,15,114,17,1,-40,-26,-39,-4,-34,-12,23,127, 
  /* [7][0][][] */ 127,-90,-30,-43,-20,-52,43,16,-28,34,13,-47,4,-52,6,68,-14,-19,57,17,-24,-36,26,-62,-42,-1,-47,-11,47,18,-84,62,12,-52,-27,-53,-49,17,13,-20,0,17,58,-58,38,-14,-56,-63, 
};
const TfArray<4, int> tensor_dimension53 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant53_scale = { 8, { 0.0021428856998682022, 0.0030355865601450205, 0.0035665272735059261, 0.0027872133068740368, 0.0028776510152965784, 0.0042688800022006035, 0.0027986648492515087, 0.0033926309552043676, } };
const TfArray<8, int> quant53_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const ALIGN(16) int32_t tensor_data54[48] = { 461, 7169, 32701, -4938, -172, -9546, -3655, -1210, 1634, -3411, 4118, 30251, 26917, 21938, -3767, 2515, 1771, 22097, 270, -12765, -5799, 17135, 15624, 6938, -691, -249, -8484, 25367, 3725, -4536, -685, 10703, -371, -506, -3157, 2812, 19692, -2612, -1643, -1291, -232, 15492, -370, -1904, 27676, -2380, 27030, -5780, };
const TfArray<1, int> tensor_dimension54 = { 1, { 48 } };
const TfArray<48, float> quant54_scale = { 48, { 5.9266960306558758e-05, 0.00028001630562357605, 4.2897285311482847e-05, 0.00017262094479519874, 0.00022179335064720362, 8.028533193282783e-05, 0.00011044889834010974, 0.00025598501088097692, 0.0001557306241011247, 0.00015361107944045216, 0.00019138975767418742, 5.348738341126591e-05, 5.4077718232292682e-05, 5.2577139285858721e-05, 0.00010101361112901941, 9.8721204267349094e-05, 0.00018749517039395869, 5.8891928347293288e-05, 0.00013763528841082007, 8.8434280769433826e-05, 0.00011828658898593858, 9.0184345026500523e-05, 7.9160345194395632e-05, 0.00014193460810929537, 0.00017025115084834397, 0.00010813747940119356, 6.7440727434586734e-05, 6.2402868934441358e-05, 0.00018622053903527558, 0.00010282259609084576, 0.0001289578212890774, 8.9974113507196307e-05, 0.00016100557695608586, 0.00014627368364017457, 9.3438138719648123e-05, 8.9788816694635898e-05, 6.5069267293438315e-05, 6.0238584410399199e-05, 0.00017666228814050555, 0.00021361060498747975, 0.0001078544300980866, 7.1160306106321514e-05, 8.9411776571068913e-05, 0.00014975227531976998, 4.8931582568911836e-05, 9.9913733720313758e-05, 5.9353333199396729e-05, 8.796810288913548e-05, } };
const TfArray<48, int> quant54_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const ALIGN(16) int8_t tensor_data55[1*3*3*48] = { 
  /* [0][0][][] */ -35,5,-102,-9,20,-26,100,-5,106,-27,-26,0,-35,-111,-71,66,32,2,-36,-107,127,41,-127,82,30,7,4,-70,29,28,35,85,13,-53,-98,-72,-116,96,-21,-3,55,40,127,-6,-100,0,23,5, 20,-127,-98,1,-3,42,7,-13,-46,7,-21,-127,-127,-25,-92,-38,121,43,26,122,-113,-127,17,-127,127,31,87,-97,-1,105,92,-90,127,-127,-96,-127,-30,110,-23,-5,54,-12,-52,-127,-47,-74,-89,94, -32,3,-66,-9,17,-26,120,-9,-40,-27,-29,-19,-66,-119,127,39,43,-6,20,-127,-54,44,-78,78,21,-13,-29,-82,25,30,30,57,17,-39,-60,-104,-106,99,-11,0,-127,26,-104,15,-127,49,-4,37, 
  /* [0][1][][] */ 89,12,38,26,-68,28,50,33,-127,16,-27,-115,-61,-110,-3,80,0,-127,-127,119,62,26,22,-41,30,42,101,-127,16,-1,74,-126,22,59,51,-59,15,124,3,6,73,-11,51,37,-119,30,-127,-14, 126,27,-127,127,127,124,127,115,60,127,127,40,-41,1,69,-127,-127,-94,-5,121,63,-102,-17,-63,-126,127,30,-68,-127,127,-127,-51,-63,74,127,89,-87,-127,127,127,-103,-123,81,35,1,121,-32,127, 94,10,-17,17,-64,47,-45,24,10,18,-34,-115,-78,-127,67,83,-3,-120,121,99,23,39,27,-23,13,25,127,-122,17,1,60,-127,15,47,39,-81,17,63,7,-12,44,-3,-88,18,-116,-7,-103,14, 
  /* [0][2][][] */ -40,-9,-72,-40,-37,-18,-11,-25,-116,-20,-30,-11,-29,-2,1,45,-20,-86,-14,-86,40,5,-106,-18,2,-33,15,-8,33,-94,10,101,-30,-22,-14,3,-61,106,-23,-10,62,-127,58,11,-26,83,5,14, 127,-36,97,-60,56,127,-30,-127,79,33,-38,-83,3,18,-89,61,-3,60,-9,77,-92,-62,0,32,9,-60,13,-95,43,-86,-51,-23,-59,70,106,122,-127,12,40,-37,-22,-40,-40,84,27,127,-102,3, -49,-17,-50,-32,-10,-15,29,-10,27,-24,-29,22,-38,0,62,32,-12,-94,28,-91,11,-10,-111,-43,3,-61,23,-1,35,-76,16,42,-27,-12,7,-10,-56,105,-28,-16,-57,-115,-66,-36,-96,95,-28,6, 
};
const TfArray<4, int> tensor_dimension55 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant55_scale = { 48, { 0.0041266824118793011, 0.019497176632285118, 0.002986883046105504, 0.012019375339150429, 0.015443187206983566, 0.0055901650339365005, 0.0076904152520000935, 0.017823908478021622, 0.010843323543667793, 0.010695742443203926, 0.013326223939657211, 0.0037242579273879528, 0.0037653623148798943, 0.0036608788650482893, 0.0070334482006728649, 0.0068738311529159546, 0.013055048882961273, 0.004100569523870945, 0.0095833688974380493, 0.0061575658619403839, 0.0082361437380313873, 0.0062794205732643604, 0.0055118333548307419, 0.0098827248439192772, 0.011854369193315506, 0.0075294743292033672, 0.0046958113089203835, 0.0043450319208204746, 0.012966297566890717, 0.0071594058535993099, 0.0089791677892208099, 0.0062647820450365543, 0.011210612021386623, 0.010184849612414837, 0.0065059778280556202, 0.0062518804334104061, 0.0045306896790862083, 0.0041943355463445187, 0.012300768867135048, 0.01487343292683363, 0.0075097656808793545, 0.0049548009410500526, 0.0062256273813545704, 0.010427058674395084, 0.0034070434048771858, 0.0069568650797009468, 0.0041326964274048805, 0.0061251064762473106, } };
const TfArray<48, int> quant55_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 3 };
const ALIGN(16) int32_t tensor_data56[48] = { 1816, 19056, 2410, 3094, 2562, 680, -1626, 26706, 7544, 1013, 5906, 6350, 3518, 534, 3155, -2614, 10729, 2426, 13619, 4157, 2789, 6240, 5336, 556, 6907, 3081, -519, 8504, 5413, 1306, 12429, 1167, 7598, 9686, 3471, -794, 1042, -217, 2865, -473, 3193, 4220, 5579, 1323, 2620, -2613, 5935, 1737, };
const TfArray<1, int> tensor_dimension56 = { 1, { 48 } };
const TfArray<48, float> quant56_scale = { 48, { 0.00015134159184526652, 5.0112292228732258e-05, 0.00012516423885244876, 0.00012666023394558579, 0.00010788871441036463, 0.00015231137513183057, 0.00016463408246636391, 3.6893296055495739e-05, 0.00010527297854423523, 0.00018622027710080147, 8.9530592958908528e-05, 8.9422472228761762e-05, 0.00011278916645096615, 0.00014719346654601395, 0.00010249843035126105, 0.00011158127017552033, 7.591244502691552e-05, 0.00012700240768026561, 6.5127205743920058e-05, 0.00011534263467183337, 0.00015756650827825069, 9.2116242740303278e-05, 9.7964883025269955e-05, 0.00013003221829421818, 9.6882475190795958e-05, 0.00011272643314441666, 0.00016136524209287018, 8.6742060375399888e-05, 9.6936215413734317e-05, 0.00012016513937851414, 6.8096000177320093e-05, 0.00011873872426804155, 9.2983209469821304e-05, 8.4449915448203683e-05, 0.00013644197315443307, 0.00014212846872396767, 0.0001300723961321637, 0.00013467355165630579, 0.0001280699361814186, 0.00013591686729341745, 0.00013928257976658642, 0.00013145766570232809, 0.00011209903459530324, 0.00021764349367003888, 0.00016557550407014787, 0.00013415828288998455, 0.00011762431677198038, 0.00010862696217373013, } };
const TfArray<48, int> quant56_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const ALIGN(16) int8_t tensor_data57[48*1*1*8] = { 
  /* [0][0][][] */ 66,-32,17,-67,-43,51,18,-127, 
  /* [1][0][][] */ 81,-69,58,12,3,-35,-127,20, 
  /* [2][0][][] */ -70,38,-108,-127,-46,-9,-73,-66, 
  /* [3][0][][] */ 34,39,104,-26,37,-37,-127,-49, 
  /* [4][0][][] */ -15,30,40,-115,77,-127,24,-30, 
  /* [5][0][][] */ 30,-9,-69,-127,-28,-42,-86,-50, 
  /* [6][0][][] */ -14,16,28,-27,9,-127,-79,1, 
  /* [7][0][][] */ -118,114,45,127,46,60,-7,93, 
  /* [8][0][][] */ -57,-12,14,-64,-29,-127,-2,-46, 
  /* [9][0][][] */ -11,15,-4,33,127,-66,25,-9, 
  /* [10][0][][] */ 106,-45,-127,79,-19,90,-109,26, 
  /* [11][0][][] */ 127,41,42,62,4,-14,-64,-125, 
  /* [12][0][][] */ -104,20,127,3,-72,-77,59,105, 
  /* [13][0][][] */ 62,78,82,-52,-15,17,-127,-13, 
  /* [14][0][][] */ 89,-54,48,-98,68,-127,9,-33, 
  /* [15][0][][] */ 84,76,29,-8,-127,24,44,-65, 
  /* [16][0][][] */ 26,57,127,65,81,-77,27,-1, 
  /* [17][0][][] */ 127,62,-60,108,96,-29,-65,7, 
  /* [18][0][][] */ 36,-26,17,-105,-33,-127,62,-48, 
  /* [19][0][][] */ -37,-4,127,0,50,-101,55,-4, 
  /* [20][0][][] */ 47,-35,-1,-33,33,-127,7,0, 
  /* [21][0][][] */ 35,-123,62,127,-67,77,-52,2, 
  /* [22][0][][] */ -31,61,-85,23,-127,10,-16,124, 
  /* [23][0][][] */ 68,-37,-54,-26,31,127,-117,-20, 
  /* [24][0][][] */ -116,44,111,-20,127,52,-56,-44, 
  /* [25][0][][] */ -71,5,-127,-9,-45,76,-39,63, 
  /* [26][0][][] */ 127,-58,-3,11,79,68,-54,24, 
  /* [27][0][][] */ -29,-127,-21,105,-45,32,-55,-44, 
  /* [28][0][][] */ -37,62,28,-18,80,-127,92,91, 
  /* [29][0][][] */ -43,-103,-72,-72,15,-127,120,30, 
  /* [30][0][][] */ -29,-39,-127,6,6,125,72,16, 
  /* [31][0][][] */ 11,-35,-20,47,-92,81,127,-68, 
  /* [32][0][][] */ 27,43,-25,-123,11,-43,-127,-85, 
  /* [33][0][][] */ -90,127,28,76,-45,51,19,38, 
  /* [34][0][][] */ 26,-8,30,14,-99,-39,127,14, 
  /* [35][0][][] */ 98,-64,1,10,32,47,-127,-40, 
  /* [36][0][][] */ -43,-6,127,-24,76,58,50,-109, 
  /* [37][0][][] */ -43,-43,124,-25,39,9,127,68, 
  /* [38][0][][] */ -8,45,-16,127,-79,-6,22,61, 
  /* [39][0][][] */ 78,-45,-67,37,-88,-82,-38,-127, 
  /* [40][0][][] */ -7,11,-43,-95,-15,-127,-68,-45, 
  /* [41][0][][] */ -59,12,-29,-32,-45,-119,-127,-82, 
  /* [42][0][][] */ 101,-127,59,17,36,26,-51,-18, 
  /* [43][0][][] */ -51,-32,-43,17,-23,-127,-50,-13, 
  /* [44][0][][] */ 55,-127,24,0,16,36,-27,4, 
  /* [45][0][][] */ -51,-10,127,96,-48,-33,26,98, 
  /* [46][0][][] */ -9,67,127,-27,-110,16,8,6, 
  /* [47][0][][] */ -62,25,-59,-127,-111,2,-51,100, 
};
const TfArray<4, int> tensor_dimension57 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant57_scale = { 48, { 0.0027069512289017439, 0.00089632684830576181, 0.0022387334611266851, 0.0022654912900179625, 0.001929737045429647, 0.0027242971118539572, 0.0029447055421769619, 0.00065988703863695264, 0.0018829511245712638, 0.0033308041747659445, 0.0016013770364224911, 0.001599443145096302, 0.0020173883531242609, 0.0026327562518417835, 0.0018333244370296597, 0.001995783532038331, 0.0013577977661043406, 0.0022716114763170481, 0.0011648890795186162, 0.0020630606450140476, 0.0028182922396808863, 0.0016476248856633902, 0.0017522358102723956, 0.0023258039727807045, 0.001732875476591289, 0.0020162663422524929, 0.0028862378094345331, 0.0015515002887696028, 0.001733836717903614, 0.0021493176463991404, 0.0012179899495095015, 0.002123804297298193, 0.0016631317557767034, 0.0015105021884664893, 0.0024404511786997318, 0.0025421618483960629, 0.0023265224881470203, 0.0024088204372674227, 0.0022907056845724583, 0.0024310587905347347, 0.0024912592489272356, 0.0023513000924140215, 0.0020050443708896637, 0.0038928512949496508, 0.0029615440871566534, 0.0023996043018996716, 0.0021038716658949852, 0.0019429416861385107, } };
const TfArray<48, int> quant57_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const ALIGN(16) int32_t tensor_data58[8] = { -8479, -2191, 12986, 8667, 1664, 17606, 4864, -7202, };
const TfArray<1, int> tensor_dimension58 = { 1, { 8 } };
const TfArray<8, float> quant58_scale = { 8, { 3.9896225644042715e-05, 4.3888929212698713e-05, 5.6054373999359086e-05, 7.0057692937552929e-05, 8.4664752648677677e-05, 3.7818852433701977e-05, 3.1618146749678999e-05, 5.3947096603224054e-05, } };
const TfArray<8, int> quant58_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const ALIGN(16) int8_t tensor_data59[8*1*1*48] = { 
  /* [0][0][][] */ 16,31,24,47,31,98,-41,-35,-22,18,-53,-28,-127,-39,-5,-25,-65,-15,-59,-30,20,-78,57,9,-39,35,42,95,6,0,-53,-14,63,0,45,19,-35,-49,76,5,25,5,-15,-5,-4,-12,-41,4, 
  /* [1][0][][] */ 44,-32,63,-52,-46,6,15,1,-3,120,-122,-53,8,-8,48,31,-56,-62,-20,-12,-25,-5,-95,-127,-36,88,-46,-16,4,-12,-4,40,-8,-34,51,-36,37,-55,72,-15,-26,-42,0,93,-25,8,51,30, 
  /* [2][0][][] */ -29,6,52,17,-15,30,-5,7,33,10,-60,-31,-3,69,11,15,59,73,-81,-34,-72,21,-11,15,-34,21,-79,4,-76,-27,-38,108,-62,18,-72,-88,31,70,17,-38,-3,-4,-34,-127,-56,-47,20,34, 
  /* [3][0][][] */ -7,21,36,-7,-3,-62,-38,10,4,-127,-32,38,17,-32,-31,-69,-12,65,15,48,29,39,1,102,-2,-29,54,-21,2,23,3,17,-8,15,33,11,-59,-7,-38,-6,20,-27,-1,19,-5,19,-4,18, 
  /* [4][0][][] */ 14,-58,40,3,-1,-74,20,60,-24,127,-29,-33,50,-43,43,3,11,23,-12,-28,24,12,-22,-33,-33,18,-18,6,15,13,7,40,-31,19,-14,10,27,31,59,-39,-58,-10,-42,-35,-29,-62,52,-4, 
  /* [5][0][][] */ -63,-55,8,44,-7,-83,-85,-71,122,-84,6,-78,1,102,-39,-35,-14,-42,-43,65,-59,28,40,-55,4,93,68,-24,-127,-32,-101,51,40,81,-5,-90,10,0,12,84,-40,-18,71,-97,-91,21,-14,127, 
  /* [6][0][][] */ -53,43,4,-66,-127,-7,62,-48,23,-88,-4,-23,-58,-39,-24,-17,-11,-68,-9,30,-62,-6,-71,-1,46,12,16,10,0,12,105,-48,-13,-31,120,76,10,122,53,-16,20,-58,95,-14,33,26,1,50, 
  /* [7][0][][] */ -40,-5,-17,-73,-41,127,10,-82,-10,70,-8,9,-94,-20,-73,-5,-70,-68,-7,-35,-39,-69,22,-9,1,37,-14,67,-46,36,-67,99,7,20,74,-75,28,-21,-37,-59,75,-47,50,-3,10,-45,4,-22, 
};
const TfArray<4, int> tensor_dimension59 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant59_scale = { 8, { 0.0025433660484850407, 0.0027978990692645311, 0.0035734407138079405, 0.0044661457650363445, 0.0053973393514752388, 0.0024109345395117998, 0.0020156423561275005, 0.0034391027875244617, } };
const TfArray<8, int> quant59_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const ALIGN(16) int32_t tensor_data60[48] = { -291, 3774, -396, 16201, -4826, 9111, 4876, -11166, -2105, 4270, -2760, -2534, -7301, 22631, 25075, -4554, 12457, 460, -1472, -3879, 1468, -1868, -11306, -3623, -1735, -2335, 218, 1770, 1072, 302, -2006, -52, -2398, 2837, 16537, 8176, -3495, -142, -1346, -7739, -665, 336, 30784, 6410, 15437, -6153, -2325, -3344, };
const TfArray<1, int> tensor_dimension60 = { 1, { 48 } };
const TfArray<48, float> quant60_scale = { 48, { 0.00010063600348075852, 0.00018200839986093342, 0.00015795300714671612, 7.7698285167571157e-05, 6.417591794161126e-05, 7.6515236287377775e-05, 0.00010163351544179022, 0.00010556496272329241, 0.00014210857625585049, 0.00014691220712848008, 0.00019836172577925026, 0.00014546712918672711, 0.00017013454635161906, 7.8605175076518208e-05, 5.3045256208861247e-05, 0.00010936781472992152, 0.00010019716864917427, 0.00014291529078036547, 0.00012088118091924116, 0.00012744231207761914, 0.00018996618746314198, 0.00012104061170248315, 0.00011880380043294281, 0.00022931511921342462, 0.00027094339020550251, 8.1166763266082853e-05, 0.00010223368008155376, 0.00016570587467867881, 0.00022333704691845924, 0.00012012542720185593, 0.00020968614262528718, 0.0001714812678983435, 0.00015653572336304933, 0.00010701464634621516, 0.0001111192541429773, 8.7258573330473155e-05, 0.00010734711395343766, 9.5997798780445009e-05, 0.00024363119155168533, 9.4942261057440192e-05, 0.00014922705304343253, 0.00037487453664653003, 4.5553246309282258e-05, 7.3210416303481907e-05, 7.9625249782111496e-05, 9.8811877251137048e-05, 0.00023606490867678076, 9.3389899120666087e-05, } };
const TfArray<48, int> quant60_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const ALIGN(16) int8_t tensor_data61[1*3*3*48] = { 
  /* [0][0][][] */ -103,-26,-25,-114,13,105,89,-1,-23,3,20,84,-54,-82,-111,-117,-10,24,36,-3,16,-4,17,8,127,120,37,-16,6,17,9,-32,-21,61,-24,-101,47,-101,2,29,33,33,-86,102,-48,19,-25,99, 20,-4,86,-127,-38,45,42,29,67,21,10,-36,-17,-127,-57,-71,-13,107,-51,46,127,91,-24,127,-1,34,31,-17,-113,52,127,50,118,109,-26,-97,2,-125,-40,127,127,-127,-127,-39,101,125,53,-8, -46,-16,-15,-108,14,87,81,3,72,4,26,-66,-29,-67,-109,-120,-28,18,46,-13,-12,-5,9,4,73,127,27,-17,11,-103,4,-37,-7,70,-25,-127,-60,-56,-6,22,10,30,-88,96,-25,-1,-37,-36, 
  /* [0][1][][] */ -82,22,103,-66,95,20,3,32,0,97,-39,61,13,-48,-90,127,-112,8,127,-62,-12,68,-9,9,50,40,75,6,5,71,-10,52,-35,22,-44,-38,127,-17,-39,117,-1,-9,-104,43,-84,70,-35,91, 15,-127,-127,-92,6,-127,-127,127,-127,-127,127,8,127,-35,34,115,89,-89,23,22,-101,19,127,-55,13,-59,68,-127,127,29,-62,-127,-47,-127,-127,2,29,127,127,17,-63,-10,-36,-80,-104,127,127,-10, 91,15,86,-51,80,-19,-9,18,44,84,-47,-62,5,-42,-127,112,-125,12,70,-50,-5,65,21,5,101,31,36,12,-13,-127,-4,38,-36,-9,-7,-45,-116,-100,-28,126,-3,-8,-92,75,-120,35,-2,-127, 
  /* [0][2][][] */ -127,21,-6,-91,56,69,-28,5,-61,12,-21,-127,18,-27,-72,-28,-14,-7,-110,35,-10,-21,31,7,3,14,-39,62,-27,44,-3,6,-20,12,6,-43,22,-16,-15,29,-38,24,9,127,-32,-19,-39,95, 75,36,-92,-111,127,-59,-36,50,16,34,-2,38,12,-28,-99,-8,-127,-127,-4,127,-27,-127,59,-6,22,-31,-127,80,12,-69,-19,122,127,-68,-40,48,-7,40,6,32,14,32,2,-25,127,59,-4,-108, 26,52,-17,-86,36,47,-25,20,40,6,-34,107,29,-18,-53,-25,-9,-11,-77,23,-12,-27,35,13,-29,39,-24,37,-32,-6,-5,9,-6,-5,18,-29,-21,-25,-14,52,-30,27,45,72,-58,10,-34,-30, 
};
const TfArray<4, int> tensor_dimension61 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant61_scale = { 48, { 0.0068281264975667, 0.012349221855401993, 0.010717069730162621, 0.0052718082442879677, 0.0043543190695345402, 0.0051915384829044342, 0.0068958071060478687, 0.0071625551208853722, 0.0096420291811227798, 0.0099679548293352127, 0.013458791188895702, 0.0098699061200022697, 0.011543584056198597, 0.005333340261131525, 0.0035991065669804811, 0.0074205775745213032, 0.0067983516491949558, 0.0096967648714780807, 0.00820175651460886, 0.0086469277739524841, 0.012889156118035316, 0.0082125738263130188, 0.008060806430876255, 0.015558970160782337, 0.018383437767624855, 0.0055071436800062656, 0.0069365282543003559, 0.01124310027807951, 0.015153359621763229, 0.0081504788249731064, 0.014227149076759815, 0.011634958907961845, 0.010620907880365849, 0.007260915357619524, 0.0075394120067358017, 0.0059204711578786373, 0.0072834733873605728, 0.0065134251490235329, 0.016530312597751617, 0.0064418073743581772, 0.010125015862286091, 0.025435138493776321, 0.0030907758045941591, 0.0049673076719045639, 0.0054025524295866489, 0.0067043597809970379, 0.016016941517591476, 0.006336479913443327, } };
const TfArray<48, int> quant61_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 3 };
const ALIGN(16) int32_t tensor_data62[48] = { 3691, 6921, 1674, -3572, 2182, 7322, 810, 4701, 932, 8173, 2516, 5633, -1087, 2996, 9580, 5124, 6557, 14540, 5028, 4954, -203, 1366, 5818, 6716, -6496, 1067, 7442, 2657, 9862, -33, 5832, 12231, 10872, 1048, 11442, 1468, 3190, 1669, 8360, -1518, 2366, -3819, 1918, -1519, 5479, -3164, -4077, 1037, };
const TfArray<1, int> tensor_dimension62 = { 1, { 48 } };
const TfArray<48, float> quant62_scale = { 48, { 8.7825210357550532e-05, 9.0276458649896085e-05, 0.00010622807167237625, 8.0068421084433794e-05, 0.0001176740406663157, 9.9761316960211843e-05, 0.00015827117022126913, 0.00011966149031650275, 0.00012086173228453845, 8.5660045442637056e-05, 0.00011069745960412547, 8.8857836090028286e-05, 0.0001809717359719798, 0.00015337960212491453, 7.6707721746060997e-05, 8.7192172941286117e-05, 0.00010452220885781571, 5.8226385590387508e-05, 9.9936230981256813e-05, 8.3238381193950772e-05, 0.00013765344920102507, 0.00013417791342362761, 9.9801152828149498e-05, 8.8681452325545251e-05, 0.00010053985170088708, 9.5818541012704372e-05, 9.4205825007520616e-05, 0.00011945856385864317, 7.5042233220301569e-05, 0.00015418075781781226, 8.7387510575354099e-05, 6.5537264163140208e-05, 7.1394380938727409e-05, 0.0001071993974619545, 6.767136073904112e-05, 0.00013243623834569007, 0.00011027323489543051, 0.00015522104513365775, 7.8988668974488974e-05, 0.00010568877769401297, 0.00010591281898086891, 0.00010299340647179633, 0.00010654455400072038, 0.00010017835302278399, 8.9164233941119164e-05, 9.7071242635138333e-05, 0.00010058997577289119, 0.00011476022336864844, } };
const TfArray<48, int> quant62_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const ALIGN(16) int8_t tensor_data63[48*1*1*8] = { 
  /* [0][0][][] */ -50,-127,-35,63,-124,118,25,40, 
  /* [1][0][][] */ 57,-17,-122,-8,-14,127,48,57, 
  /* [2][0][][] */ -70,-121,-127,-19,-93,-12,18,28, 
  /* [3][0][][] */ -98,69,109,-31,56,-121,51,127, 
  /* [4][0][][] */ -39,-90,99,-31,-1,0,127,33, 
  /* [5][0][][] */ 23,-8,127,-8,-34,-53,-8,86, 
  /* [6][0][][] */ -38,-31,31,16,-51,-127,-70,-49, 
  /* [7][0][][] */ 26,42,-99,-13,127,78,-9,-28, 
  /* [8][0][][] */ 8,14,-127,7,-25,-16,-100,64, 
  /* [9][0][][] */ -33,29,23,-73,91,-127,-48,2, 
  /* [10][0][][] */ -66,-127,-95,7,-113,-18,-1,21, 
  /* [11][0][][] */ -11,-122,123,127,11,-7,-10,-10, 
  /* [12][0][][] */ -127,55,-13,14,36,-30,-23,-20, 
  /* [13][0][][] */ -29,-11,-8,2,127,-51,20,28, 
  /* [14][0][][] */ 33,70,-127,73,46,-26,-71,-93, 
  /* [15][0][][] */ -67,111,-45,-127,-51,-97,21,46, 
  /* [16][0][][] */ 127,-19,91,-3,22,-7,-20,9, 
  /* [17][0][][] */ -35,19,-127,-60,-45,96,81,55, 
  /* [18][0][][] */ -17,83,-28,-42,-24,78,127,91, 
  /* [19][0][][] */ -22,43,-21,48,-113,66,127,-126, 
  /* [20][0][][] */ 62,3,-27,-25,127,0,-85,-74, 
  /* [21][0][][] */ -39,-11,-15,-105,-16,127,59,21, 
  /* [22][0][][] */ 0,113,74,-38,127,-45,-21,36, 
  /* [23][0][][] */ -49,99,-80,-86,-45,-127,35,-25, 
  /* [24][0][][] */ 19,43,-42,61,31,32,41,127, 
  /* [25][0][][] */ 19,-127,-123,83,-104,36,-6,-62, 
  /* [26][0][][] */ 12,-28,42,51,25,33,-127,-75, 
  /* [27][0][][] */ 87,-92,-25,-73,-40,-127,62,-13, 
  /* [28][0][][] */ -40,89,-50,-127,-34,-73,-95,-36, 
  /* [29][0][][] */ 127,-80,-24,-17,47,33,34,68, 
  /* [30][0][][] */ -30,-11,127,-78,31,-110,36,-17, 
  /* [31][0][][] */ -37,-29,110,-29,127,12,-4,105, 
  /* [32][0][][] */ 71,61,-72,-127,-82,49,11,61, 
  /* [33][0][][] */ 3,-54,127,-29,102,116,42,94, 
  /* [34][0][][] */ -29,-22,72,-117,34,42,-127,-44, 
  /* [35][0][][] */ -18,-14,-36,-127,-30,-88,29,8, 
  /* [36][0][][] */ 37,-42,-52,102,26,127,20,0, 
  /* [37][0][][] */ -46,-44,-23,-10,12,81,127,-45, 
  /* [38][0][][] */ 33,103,-77,-51,-127,94,33,26, 
  /* [39][0][][] */ 75,22,-69,102,127,35,64,-77, 
  /* [40][0][][] */ -66,25,-127,26,-2,92,-57,-10, 
  /* [41][0][][] */ -11,43,-18,89,-27,93,127,72, 
  /* [42][0][][] */ -117,-27,-86,69,-84,-127,49,61, 
  /* [43][0][][] */ -55,-112,115,127,-64,7,56,49, 
  /* [44][0][][] */ 40,-75,-117,83,-81,-63,-2,-127, 
  /* [45][0][][] */ -89,8,-122,94,-4,8,-59,-127, 
  /* [46][0][][] */ -59,-12,107,9,62,-27,18,-127, 
  /* [47][0][][] */ -18,-22,-127,-13,-37,-41,-77,83, 
};
const TfArray<4, int> tensor_dimension63 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant63_scale = { 48, { 0.0019083534134551883, 0.0019616165664047003, 0.0023082289844751358, 0.0017398061463609338, 0.0025569384451955557, 0.0021677128970623016, 0.0034390729852020741, 0.0026001236401498318, 0.0026262036990374327, 0.0018613064894452691, 0.0024053442757576704, 0.0019307913025841117, 0.0039323335513472557, 0.0033327843993902206, 0.0016667814925312996, 0.0018945980118587613, 0.0022711623460054398, 0.0012652006698772311, 0.0021715136244893074, 0.0018086861819028854, 0.0029910707380622625, 0.0029155509546399117, 0.0021685785613954067, 0.0019269585609436035, 0.0021846296731382608, 0.0020820403005927801, 0.0020469976589083672, 0.0025957142934203148, 0.0016305921599268913, 0.0033501924481242895, 0.0018988425144925714, 0.0014240586897358298, 0.0015513279940932989, 0.0023293348494917154, 0.0014704305212944746, 0.0028777059633284807, 0.0023961262777447701, 0.0033727970439940691, 0.0017163441516458988, 0.0022965106181800365, 0.0023013788741081953, 0.0022379430010914803, 0.0023151058703660965, 0.0021767746657133102, 0.0019374489784240723, 0.0021092602983117104, 0.0021857188548892736, 0.002493624109774828, } };
const TfArray<48, int> quant63_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const ALIGN(16) int32_t tensor_data64[8] = { 7870, 7430, -2224, 2596, -22309, 396, -1851, 7125, };
const TfArray<1, int> tensor_dimension64 = { 1, { 8 } };
const TfArray<8, float> quant64_scale = { 8, { 0.00010558953363215551, 7.1610673330724239e-05, 8.5125517216511071e-05, 5.8793673815671355e-05, 5.8685640397015959e-05, 9.0881134383380413e-05, 5.0258731789654121e-05, 5.2639596106018871e-05, } };
const TfArray<8, int> quant64_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const ALIGN(16) int8_t tensor_data65[8*1*1*48] = { 
  /* [0][0][][] */ -29,-17,7,53,-22,-13,-29,-35,-8,-7,0,-42,25,-17,21,11,-63,23,-12,24,-43,6,19,33,-5,-34,53,11,40,21,-50,-56,-19,9,-44,-38,28,-28,14,43,2,-32,-13,-127,-8,-34,5,-10, 
  /* [1][0][][] */ -36,-9,53,14,-45,34,-29,4,-41,-27,0,8,57,-5,-58,-53,-13,-17,-14,57,9,2,-111,127,50,-60,-16,-88,-64,-45,-67,20,40,-4,-8,-78,94,22,-6,11,56,6,-24,42,-91,11,23,-22, 
  /* [2][0][][] */ -15,42,-55,-21,27,10,48,-4,-33,-45,14,55,-31,-31,-18,-11,19,34,13,9,27,66,11,32,40,-33,-27,-26,-43,2,-25,-42,15,33,43,-38,46,53,27,-19,29,66,-19,-127,28,2,24,-30, 
  /* [3][0][][] */ 32,-103,-55,31,-88,-1,-69,29,54,35,51,-11,-34,78,-16,-52,-61,-7,28,90,14,-32,24,8,-68,-61,14,127,93,77,-20,20,-34,-75,-28,65,28,-44,-44,34,-44,-81,29,46,13,-15,-31,-12, 
  /* [4][0][][] */ -52,42,64,118,92,-109,-58,80,54,-7,19,78,15,-34,127,0,-10,81,-82,-12,-15,54,60,-25,34,-18,69,-60,-62,60,24,39,17,70,4,58,10,0,50,-5,36,44,-4,114,-3,96,40,-50, 
  /* [5][0][][] */ 5,-28,-32,57,15,-17,-3,-5,-66,-22,-10,-46,8,-16,-44,-18,14,-50,-28,-40,-41,59,-55,26,15,22,-6,35,22,-6,-55,63,-23,-2,-24,-95,-16,32,53,17,77,127,-35,67,57,-39,24,-15, 
  /* [6][0][][] */ -24,4,87,15,-41,-14,-8,42,62,83,98,2,-75,47,-26,-24,-94,40,15,-116,-12,11,-36,53,-76,127,-10,-49,21,-28,-58,-60,-33,-30,65,-43,-99,-28,20,2,90,-15,-2,88,27,67,-47,62, 
  /* [7][0][][] */ -69,40,-69,24,27,96,23,-37,-84,-38,-34,-44,59,-66,1,5,-46,-100,33,64,87,89,-103,-7,123,-8,-55,-120,46,5,-24,-127,77,65,20,-30,122,-45,-2,9,-16,21,-29,-84,41,40,39,-44, 
};
const TfArray<4, int> tensor_dimension65 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant65_scale = { 8, { 0.005185490008443594, 0.0035167920868843794, 0.0041805044747889042, 0.0028873507399111986, 0.0028820452280342579, 0.0044631622731685638, 0.002468200633302331, 0.0025851246900856495, } };
const TfArray<8, int> quant65_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const ALIGN(16) int32_t tensor_data66[48] = { -1787, -123, 666, 10466, 18, -8210, -2134, 17716, -911, 38616, 13153, 1065, 902, 19952, -1436, 15300, 28247, 7968, -268, -4534, -119, 2729, -18, -11394, -2922, 20597, 454, -8000, -9134, -2797, -3659, 7853, -57, 1620, 19903, -1852, 5328, -1471, 8881, -10758, 18924, 140, 15, 14602, -12562, 8460, -616, 10888, };
const TfArray<1, int> tensor_dimension66 = { 1, { 48 } };
const TfArray<48, float> quant66_scale = { 48, { 0.00010518023918848485, 0.00025295239174738526, 9.8448210337664932e-05, 6.9732894189655781e-05, 0.00020462746033445001, 0.00010791563545353711, 0.00016850877727847546, 6.4041749283205718e-05, 8.3881757745984942e-05, 3.7657428038073704e-05, 7.8374927397817373e-05, 0.00020448824216146022, 0.00010017143358709291, 5.0317463319515809e-05, 9.6810428658500314e-05, 7.0927082560956478e-05, 5.0291855586692691e-05, 0.0001048950434778817, 0.00017947918968275189, 0.00013612334441859275, 0.00014060754620004445, 0.00010626126459101215, 0.00012914354738313705, 8.1367055827286094e-05, 9.4132512458600104e-05, 7.7091550338082016e-05, 5.7826375268632546e-05, 0.0001841817720560357, 7.5590854976326227e-05, 0.00021476582332979888, 0.00011068289313698187, 0.00010056664177682251, 0.00013446535740513355, 0.00014801589713897556, 5.6164153647841886e-05, 0.00016689600306563079, 0.0001545321720186621, 0.00032918932265602052, 9.5694500487297773e-05, 6.3337894971482456e-05, 9.2452537501230836e-05, 0.00015386003360617906, 0.00012229346612002701, 0.00011362630903022364, 8.4260791481938213e-05, 9.1100999270565808e-05, 7.9613266279920936e-05, 0.00010051674325950444, } };
const TfArray<48, int> quant66_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const ALIGN(16) int8_t tensor_data67[1*3*3*48] = { 
  /* [0][0][][] */ -30,3,52,-30,-40,5,4,3,-101,-127,-13,22,-17,-80,26,33,-127,-56,-1,-41,44,2,28,-4,-29,-85,118,-43,33,0,-7,62,35,-15,-103,-21,32,-13,-39,34,16,32,48,-68,27,-26,-104,-85, -15,37,127,-51,56,77,-6,127,-127,-86,26,127,34,-127,122,46,-2,-68,4,36,23,-35,80,32,-125,-127,45,53,-29,41,3,-21,-78,-30,-67,-127,127,45,-14,124,-51,127,-6,-31,23,-80,96,57, -18,4,30,-14,-30,12,5,-4,-78,-120,7,14,-15,-13,24,7,-112,-46,5,-56,38,-9,21,0,105,-54,107,-31,40,-14,20,53,21,-9,-110,-18,16,-48,-14,-9,17,29,43,-86,18,-31,3,-127, 
  /* [0][1][][] */ -72,35,-23,-69,0,-22,-27,-21,51,-74,-5,-6,-66,-68,5,-46,-31,-46,9,20,45,-31,54,41,-67,-14,-47,-23,58,-2,-126,34,127,52,20,19,-19,23,-127,63,-80,23,119,-63,49,-28,-127,20, 109,-127,28,-85,124,-32,127,-119,126,-73,-21,-121,-53,-73,14,-82,-27,127,-114,127,-127,-125,-127,127,-31,71,-122,127,127,127,32,-127,-55,127,81,108,-97,127,-57,15,-127,-86,-127,127,127,-102,126,-124, -73,26,9,-64,5,-33,-43,-74,43,-39,-7,-10,-57,-49,6,-65,-40,-55,2,-17,28,-35,64,29,127,-46,-21,-38,13,-5,127,35,-86,9,2,8,-18,-48,-101,44,-78,12,-119,-67,67,2,30,39, 
  /* [0][2][][] */ 76,31,-53,41,2,29,-16,-108,28,-88,-32,-4,65,-3,-36,-127,-97,-52,-1,-9,24,29,17,2,24,-72,127,-33,19,-2,-26,40,28,-74,-127,-3,-22,-66,72,127,52,-39,38,-102,20,36,-63,-11, 127,-1,-119,-127,-127,127,-24,-41,55,-81,-127,-23,127,-81,-127,-49,-56,-5,127,-109,-10,127,-12,51,-47,-116,63,43,-3,55,-20,-27,-63,-58,-59,59,-8,-61,-56,97,-98,-5,107,-72,24,127,30,-55, -48,25,-52,48,3,37,-17,-115,-4,-113,-27,1,51,42,-39,-63,-124,-56,-8,11,31,47,14,-7,30,-52,108,-23,14,4,38,33,44,-69,-127,-6,-27,-10,61,56,49,-33,45,-77,19,16,-28,-17, 
};
const TfArray<4, int> tensor_dimension67 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant67_scale = { 48, { 0.0083295563235878944, 0.02003210037946701, 0.0077964253723621368, 0.0055223684757947922, 0.016205096617341042, 0.0085461810231208801, 0.01334474328905344, 0.0050716688856482506, 0.0066428622230887413, 0.0029822110664099455, 0.0062067587859928608, 0.016194071620702744, 0.0079328930005431175, 0.0039847991429269314, 0.0076667247340083122, 0.0056169405579566956, 0.0039827711880207062, 0.0083069708198308945, 0.01421352569013834, 0.010780039243400097, 0.011135157197713852, 0.0084151662886142731, 0.010227286256849766, 0.0064437147229909897, 0.0074546518735587597, 0.0061051240190863609, 0.0045794537290930748, 0.014585938304662704, 0.0059862793423235416, 0.017007986083626747, 0.0087653286755084991, 0.0079641910269856453, 0.010648737661540508, 0.011721847578883171, 0.0044478173367679119, 0.013217022642493248, 0.012237892486155033, 0.02606954425573349, 0.0075783506035804749, 0.0050159287638962269, 0.0073216091841459274, 0.01218466367572546, 0.009684806689620018, 0.008998427540063858, 0.0066728787496685982, 0.0072145764715969563, 0.0063048265874385834, 0.0079602394253015518, } };
const TfArray<48, int> quant67_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 3 };
const ALIGN(16) int32_t tensor_data68[48] = { 794, -1092, 19384, 3452, 21968, 5251, 3094, 8441, 8485, 1932, 3537, 18920, 5362, 2581, 4403, 2457, 7136, 8971, 2341, 7945, 2740, 9594, 8437, 3103, 6101, 12148, -89, 16661, 1827, -4775, 8228, 2048, 316, 12541, 2993, 13856, 12442, -5821, -1675, -379, 9743, 13118, -2536, 27391, 2344, 8356, 1830, 61, };
const TfArray<1, int> tensor_dimension68 = { 1, { 48 } };
const TfArray<48, float> quant68_scale = { 48, { 0.00011327712127240375, 0.0001352266117464751, 4.4457410695031285e-05, 0.00011886106221936643, 4.1761606553336605e-05, 8.7135951616801322e-05, 0.00016248752945102751, 8.8757755293045193e-05, 9.40270911087282e-05, 0.00020576138922479004, 0.00015358382370322943, 5.0858987378887832e-05, 0.00010489967826288193, 0.00014805590035393834, 0.00012808122846763581, 0.00014387103146873415, 9.5587907708249986e-05, 7.5389762059785426e-05, 0.00012630726268980652, 8.4912418969906867e-05, 9.5941919425968081e-05, 7.5359224865678698e-05, 8.5358013166114688e-05, 9.1688511020038277e-05, 0.00012170834088465199, 7.3361625254619867e-05, 9.147370292339474e-05, 5.1899594836868346e-05, 0.00019583843823056668, 0.00011685366189340129, 9.5922616310417652e-05, 0.00015543172776233405, 0.00015271794109139591, 6.7256973125040531e-05, 0.00015413638902828097, 6.1606428062077612e-05, 7.000729237915948e-05, 9.0513982286211103e-05, 0.00011615642870310694, 0.00017486250726506114, 8.1620892160572112e-05, 6.2999548390507698e-05, 0.00012898455315735191, 3.6056502722203732e-05, 0.00011783362424466759, 8.1165402662009001e-05, 0.00011529844778124243, 0.00011432936298660934, } };
const TfArray<48, int> quant68_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const ALIGN(16) int8_t tensor_data69[48*1*1*8] = { 
  /* [0][0][][] */ 70,10,80,32,27,-127,-8,-23, 
  /* [1][0][][] */ 24,27,-55,127,2,47,-77,-16, 
  /* [2][0][][] */ -127,-76,-3,49,5,100,-80,72, 
  /* [3][0][][] */ -54,-10,113,-127,-91,-31,-5,55, 
  /* [4][0][][] */ -98,-52,102,-127,98,15,65,-91, 
  /* [5][0][][] */ -34,97,-94,-103,-25,-53,59,127, 
  /* [6][0][][] */ -22,-1,51,-76,-127,-24,58,22, 
  /* [7][0][][] */ -101,-22,94,36,54,34,127,-7, 
  /* [8][0][][] */ 5,-76,-33,-91,-35,-127,-38,47, 
  /* [9][0][][] */ -11,64,85,-5,4,127,-10,62, 
  /* [10][0][][] */ 29,-7,87,-34,93,127,-13,6, 
  /* [11][0][][] */ -19,74,53,26,54,-11,-127,68, 
  /* [12][0][][] */ 12,55,-10,-127,94,-37,-38,-58, 
  /* [13][0][][] */ 47,66,19,-72,127,83,-56,12, 
  /* [14][0][][] */ 127,-39,17,-5,-10,-81,15,28, 
  /* [15][0][][] */ -127,-54,-15,-22,87,-8,40,-21, 
  /* [16][0][][] */ -127,24,9,-10,20,123,-57,-65, 
  /* [17][0][][] */ 90,52,14,127,-21,-95,18,-21, 
  /* [18][0][][] */ -77,-26,39,-33,-123,-76,127,35, 
  /* [19][0][][] */ 42,120,13,127,-46,-89,-103,89, 
  /* [20][0][][] */ 90,-80,-123,-6,-114,127,15,-124, 
  /* [21][0][][] */ -34,-66,92,127,-22,95,-33,101, 
  /* [22][0][][] */ -46,-127,59,-14,64,-78,13,-95, 
  /* [23][0][][] */ 101,114,-23,22,-125,40,127,-9, 
  /* [24][0][][] */ 34,-28,15,58,69,127,-16,-49, 
  /* [25][0][][] */ -45,-127,-76,-16,27,11,71,-69, 
  /* [26][0][][] */ -101,-12,26,14,-127,94,-120,53, 
  /* [27][0][][] */ 40,-95,61,127,-94,57,-76,-68, 
  /* [28][0][][] */ 39,20,9,19,52,127,-49,-20, 
  /* [29][0][][] */ -127,1,-47,109,38,-7,-38,-13, 
  /* [30][0][][] */ 56,59,-16,82,-21,127,12,15, 
  /* [31][0][][] */ 127,-73,-64,19,-90,-90,-36,48, 
  /* [32][0][][] */ 69,-9,17,72,72,28,-127,-8, 
  /* [33][0][][] */ 82,-27,16,-127,17,-82,33,66, 
  /* [34][0][][] */ -127,0,59,-11,-49,-34,36,33, 
  /* [35][0][][] */ -93,-11,127,8,123,-68,51,4, 
  /* [36][0][][] */ -16,88,127,1,21,-90,-69,23, 
  /* [37][0][][] */ -126,74,107,-12,-16,117,-93,-127, 
  /* [38][0][][] */ 42,110,-50,-127,44,-45,19,-46, 
  /* [39][0][][] */ 32,-19,-117,59,127,-32,-18,15, 
  /* [40][0][][] */ 27,67,116,-41,0,-79,-127,83, 
  /* [41][0][][] */ -53,29,127,-58,87,-105,7,-36, 
  /* [42][0][][] */ 34,-127,10,-70,20,-127,0,-19, 
  /* [43][0][][] */ -127,6,-118,36,1,37,12,42, 
  /* [44][0][][] */ -38,-89,45,127,-61,75,66,12, 
  /* [45][0][][] */ 73,85,127,0,-58,-40,-118,-41, 
  /* [46][0][][] */ -84,127,81,-99,-22,39,-41,111, 
  /* [47][0][][] */ 43,-40,-32,127,31,115,65,-106, 
};
const TfArray<4, int> tensor_dimension69 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant69_scale = { 48, { 0.0026049457956105471, 0.0031097012106329203, 0.0010223524877801538, 0.002733355388045311, 0.00096035923343151808, 0.0020037977956235409, 0.0037365993484854698, 0.002041093073785305, 0.0021622679196298122, 0.004731734748929739, 0.0035318478476256132, 0.0011695645516738296, 0.0024122963659465313, 0.0034047265071421862, 0.0029453844763338566, 0.0033084901515394449, 0.0021981608588248491, 0.0017336797900497913, 0.0029045897535979748, 0.00195266492664814, 0.0022063017822802067, 0.0017329775728285313, 0.0019629118032753468, 0.0021084893960505724, 0.0027988320216536522, 0.0016870402032509446, 0.0021035496611148119, 0.0011934946523979306, 0.004503544420003891, 0.0026871927548199892, 0.0022058577742427588, 0.0035743424668908119, 0.003511935705319047, 0.001546656247228384, 0.0035445548128336668, 0.001416715094819665, 0.0016099032945930958, 0.0020814796444028616, 0.0026711591053754091, 0.0040211770683526993, 0.0018769721500575542, 0.001448751543648541, 0.0029661576263606548, 0.00082916335668414831, 0.0027097281999886036, 0.0018664976814761758, 0.0026514288038015366, 0.0026291434187442064, } };
const TfArray<48, int> quant69_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const ALIGN(16) int32_t tensor_data70[8] = { -1575, -18785, -616, -5204, -7123, -7464, -3985, -7081, };
const TfArray<1, int> tensor_dimension70 = { 1, { 8 } };
const TfArray<8, float> quant70_scale = { 8, { 8.6933679995127022e-05, 9.675544424680993e-05, 8.2667829701676965e-05, 0.00010487318650120869, 7.0927701017353684e-05, 8.9140528871212155e-05, 9.3223367002792656e-05, 0.00011833599273813888, } };
const TfArray<8, int> quant70_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const ALIGN(16) int8_t tensor_data71[8*1*1*48] = { 
  /* [0][0][][] */ -12,-43,37,70,-34,117,-101,70,-56,-69,50,-81,31,16,17,4,-29,-20,105,-80,-11,-61,8,25,-63,6,24,72,3,121,35,59,-75,3,0,34,-28,49,-1,107,-127,24,-5,-37,-89,44,2,16, 
  /* [1][0][][] */ 62,93,21,64,3,-47,-30,23,3,-57,7,-44,-35,-5,8,28,60,-5,93,64,14,121,-23,-80,36,-34,48,127,-30,-48,29,-30,-40,-29,-74,30,-62,12,-26,-6,2,-20,-65,-65,-10,18,87,104, 
  /* [2][0][][] */ 71,17,-44,-24,13,36,-48,67,-32,9,-5,58,-61,-53,88,42,49,-74,32,33,-115,-35,88,-94,71,5,-93,112,127,-21,-51,-35,-107,-22,74,13,-64,-24,-28,-31,16,-81,-63,25,-2,-83,5,4, 
  /* [3][0][][] */ 30,22,23,-20,-53,13,-21,55,6,26,-38,42,22,-38,-20,-2,-59,33,-4,-5,-73,58,42,-6,-127,-2,-10,52,-35,-6,62,5,-53,41,11,8,20,-37,-9,-30,4,79,43,43,-9,39,29,-52, 
  /* [4][0][][] */ -97,43,99,-20,-103,71,12,-120,-63,35,-85,14,-20,19,120,43,0,-86,95,-62,-15,127,15,-74,-33,-72,95,59,46,-19,-36,-8,38,-82,-102,14,98,65,-23,47,-12,66,-69,-118,9,113,-69,-20, 
  /* [5][0][][] */ -127,16,58,-52,41,49,46,-10,-16,8,75,-32,-23,20,25,35,-15,-23,-20,-17,26,54,94,-6,-17,59,19,-40,60,31,-15,87,13,23,-22,48,-111,49,-17,-30,69,-31,-6,-3,-50,27,67,36, 
  /* [6][0][][] */ 82,40,77,-2,-127,-18,-3,-15,-87,-43,-31,-65,58,-18,48,-7,-37,34,31,21,-52,38,59,-22,-72,43,-67,-41,14,15,-51,-19,-5,-12,22,-15,-25,-5,-31,43,-38,110,-27,-69,82,18,-26,121, 
  /* [7][0][][] */ 4,-17,78,59,43,-54,29,54,72,-46,-62,78,-98,4,55,23,4,28,-41,67,-13,58,16,-86,33,11,-23,-31,127,23,-45,-39,78,-5,-45,29,-20,-101,-13,31,-21,-53,-41,-64,11,-17,9,-43, 
};
const TfArray<4, int> tensor_dimension71 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant71_scale = { 8, { 0.004359981045126915, 0.0048525715246796608, 0.0041460362263023853, 0.0052597005851566792, 0.0035572338383644819, 0.0044706612825393677, 0.0046754274517297745, 0.0059349001385271549, } };
const TfArray<8, int> quant71_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const ALIGN(16) int32_t tensor_data72[48] = { 49217, -12972, 58730, 33186, 31831, -11951, -20859, 1879, -1603, -10, -31377, 35209, 34933, -1504, 34772, -16827, 28679, -7341, 39601, 27511, 36079, 55396, 18736, 32177, 1701, -2246, -9427, 52, 543, 34373, 34043, 24569, 39234, 1457, -244, 10900, 28, 36403, -585, -3457, 27492, 1685, -7277, 40996, -90, 27449, -8491, -3303, };
const TfArray<1, int> tensor_dimension72 = { 1, { 48 } };
const TfArray<48, float> quant72_scale = { 48, { 3.8970745663391426e-05, 6.3748295360710472e-05, 3.3094707760028541e-05, 5.1623839681269601e-05, 9.5428928034380078e-05, 6.7994646087754518e-05, 5.3697956900577992e-05, 4.8706133384257555e-05, 9.3663737061433494e-05, 9.8021984740626067e-05, 5.8566696679918095e-05, 9.747103467816487e-05, 6.2698585679754615e-05, 0.00016851924010552466, 4.9023645260604098e-05, 8.511977648595348e-05, 7.7813034295104444e-05, 0.00010769679647637531, 3.7222675018711016e-05, 5.78748804400675e-05, 7.6428834290709347e-05, 3.4197222703369334e-05, 6.6321917984168977e-05, 5.6359844165854156e-05, 5.0568247388582677e-05, 0.0001602011761860922, 6.4769599703140557e-05, 5.7897072110790759e-05, 5.5826407333370298e-05, 5.9350553783588111e-05, 7.4660449172370136e-05, 5.4914904467295855e-05, 5.3639032557839528e-05, 0.0001043403462972492, 9.992382547352463e-05, 5.9073001466458663e-05, 8.3073522546328604e-05, 4.8851576138986275e-05, 0.0001026237296173349, 0.00012578837049659342, 5.5906853958731517e-05, 5.5821539717726409e-05, 9.8136340966448188e-05, 4.9114052671939135e-05, 9.8725933639798313e-05, 5.7081648265011609e-05, 6.9840425567235798e-05, 5.5007199989631772e-05, } };
const TfArray<48, int> quant72_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const ALIGN(16) int8_t tensor_data73[1*3*3*48] = { 
  /* [0][0][][] */ -49,56,-110,-34,-84,78,73,56,92,79,76,-56,-92,119,-55,-66,-33,107,-37,-77,-90,-50,-90,-44,88,97,62,90,61,-67,-60,-97,-78,-91,79,37,70,-105,127,55,-75,75,90,-42,62,-83,76,70, -75,72,-124,-55,-92,96,95,83,111,87,79,-83,-110,114,-88,55,-88,119,-63,-99,-71,-77,-103,-62,116,104,76,104,76,-87,-80,-108,-98,-127,104,52,88,-113,-4,72,-83,83,109,-75,86,-93,92,87, -27,29,-71,-28,-32,31,36,39,47,41,43,-28,-52,39,-49,81,-20,24,-30,-14,-5,-38,-49,-33,52,38,20,33,14,-39,-10,-51,-26,-78,30,59,32,-31,-23,28,-20,28,52,-33,54,-35,42,27, 
  /* [0][1][][] */ -96,103,-127,-80,-96,100,110,86,112,102,118,-93,-105,127,-85,-58,-66,118,-82,-107,-127,-90,-115,-113,96,127,100,101,105,-110,-95,-127,-106,32,104,-83,90,-93,115,102,-111,109,112,-74,96,-108,107,96, -127,127,-127,-127,-127,127,127,127,127,127,127,-127,-127,116,-127,81,-127,127,-127,-127,-113,-127,-127,-127,127,127,127,127,127,-127,-127,-113,-127,41,127,-84,127,-127,-109,127,-127,127,127,-127,127,-127,127,127, -37,39,-51,-59,-30,32,52,62,53,40,62,-38,-56,61,-58,127,-71,34,-68,-30,8,-68,-63,-36,48,27,46,53,33,-23,-27,-79,-32,33,41,-44,58,-61,-61,45,-55,41,76,-48,82,-42,51,46, 
  /* [0][2][][] */ -42,48,-21,-40,-30,30,31,40,19,42,79,-40,-56,23,-14,12,-41,75,-50,-44,-80,-48,-47,-64,22,58,50,39,46,-58,-55,-87,-41,15,45,-127,37,-43,70,68,-48,36,43,-34,58,-68,38,40, -66,60,-33,-70,-56,39,56,63,42,58,89,-43,-75,-4,-35,87,-70,100,-78,-51,-83,-66,-62,-59,30,65,61,54,53,-82,-62,-96,-54,12,61,-105,62,-69,-73,85,-59,41,54,-58,82,-92,48,58, -26,33,-22,-24,-2,9,47,37,31,29,32,-15,-16,-3,-8,124,-48,48,-39,-23,4,-34,-2,19,11,40,32,36,28,-26,-7,-29,-2,9,27,-104,27,-34,-83,45,-43,12,45,-6,53,3,24,23, 
};
const TfArray<4, int> tensor_dimension73 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant73_scale = { 48, { 0.0023744604550302029, 0.0038841394707560539, 0.0020164377056062222, 0.0031454048585146666, 0.0058144186623394489, 0.0041428664699196815, 0.003271779278293252, 0.0029676309786736965, 0.0057068667374551296, 0.0059724114835262299, 0.00356842833571136, 0.0059388424269855022, 0.0038201815914362669, 0.01026776060461998, 0.0029869766440242529, 0.0051862890832126141, 0.0047410940751433372, 0.0065618911758065224, 0.0022679518442600965, 0.0035262764431536198, 0.0046567558310925961, 0.002083613071590662, 0.0040409485809504986, 0.0034339663106948137, 0.0030810881871730089, 0.0097609469667077065, 0.0039463667199015617, 0.0035276284907013178, 0.0034014643169939518, 0.0036161881871521473, 0.0045490092597901821, 0.0033459269907325506, 0.0032681890297681093, 0.0063573848456144333, 0.0060882894322276115, 0.0035992769990116358, 0.0050616119988262653, 0.0029764927458018064, 0.006252792663872242, 0.0076641985215246677, 0.0034063658677041531, 0.0034011676907539368, 0.0059793791733682156, 0.0029924851842224598, 0.0060153026133775711, 0.0034779452253133059, 0.004255328793078661, 0.0033515505492687225, } };
const TfArray<48, int> quant73_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant73 = { (TfLiteFloatArray*)&quant73_scale, (TfLiteIntArray*)&quant73_zero, 3 };
const ALIGN(16) int32_t tensor_data74[48] = { 1979, 716, 6186, 4413, 10101, 439, 2725, 1113, -2664, -2599, 1722, 10874, 4426, -6642, 760, 7691, 7774, -5108, -329, 5091, 8877, 885, -73, 1316, 824, -5097, 1035, 67, 2904, 7608, 11149, 68, 5140, 3256, -3121, 3622, -1536, 3760, 9206, -3255, 1810, 324, -2062, 3334, -2894, 3981, 648, 2243, };
const TfArray<1, int> tensor_dimension74 = { 1, { 48 } };
const TfArray<48, float> quant74_scale = { 48, { 0.00014419203216675669, 0.0001709917705738917, 0.00010820001625688747, 0.0001478227786719799, 8.6327745520975441e-05, 0.00014219229342415929, 0.00013589844456873834, 0.0001685185416135937, 0.00013694366498384625, 0.00018671840371098369, 0.00015940985758788884, 8.5049105109646916e-05, 0.00015345924475695938, 0.00010794548143167049, 0.00014968105824664235, 9.4354945758823305e-05, 9.7603951871860772e-05, 0.00011445444397395477, 0.00015228574920911342, 0.00012225925456732512, 9.528554801363498e-05, 0.00013840643805451691, 0.00014953035861253738, 0.00014963991998229176, 0.00017431739252060652, 0.0001243650185642764, 0.000125102698802948, 0.00015424039156641811, 0.0001464901288272813, 0.00010383168410044163, 7.778692088322714e-05, 0.00021720821678172797, 0.00013797900464851409, 0.00015568791422992945, 0.00015349086606875062, 0.00014872755855321884, 0.00019493796571623534, 0.00012069056538166478, 8.8046603195834905e-05, 0.0001462959626223892, 0.00014847915736027062, 0.0001741105952532962, 0.00016772311937529594, 0.00018105143681168556, 0.00017687819490674883, 0.00013559008948504925, 0.00018798292148858309, 0.00018173576972912997, } };
const TfArray<48, int> quant74_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant74 = { (TfLiteFloatArray*)&quant74_scale, (TfLiteIntArray*)&quant74_zero, 0 };
const ALIGN(16) int8_t tensor_data75[48*1*1*8] = { 
  /* [0][0][][] */ -26,-127,37,-30,66,-49,2,-73, 
  /* [1][0][][] */ -45,-58,42,-45,-78,91,-127,92, 
  /* [2][0][][] */ -118,1,-36,-99,-2,-127,20,-99, 
  /* [3][0][][] */ -54,-21,36,-44,122,-84,-127,35, 
  /* [4][0][][] */ 70,-12,-98,-65,18,-57,-127,123, 
  /* [5][0][][] */ 49,-49,-113,-8,106,-94,-18,-127, 
  /* [6][0][][] */ 54,-30,127,81,-35,20,-68,23, 
  /* [7][0][][] */ -47,-27,-127,45,16,116,-34,39, 
  /* [8][0][][] */ 55,-1,-83,-31,-60,127,-72,-83, 
  /* [9][0][][] */ -75,-43,23,-13,57,-36,-127,23, 
  /* [10][0][][] */ 65,21,85,-117,127,13,-19,-53, 
  /* [11][0][][] */ 38,-8,54,-127,1,37,61,25, 
  /* [12][0][][] */ 16,-37,-42,127,-87,-12,9,87, 
  /* [13][0][][] */ 53,-127,33,-46,-83,35,72,-4, 
  /* [14][0][][] */ -39,110,1,44,45,102,-127,-18, 
  /* [15][0][][] */ -23,-22,-17,-102,127,-32,-122,-108, 
  /* [16][0][][] */ 62,-8,-13,64,121,71,-127,-31, 
  /* [17][0][][] */ 127,-55,76,81,47,39,-16,-33, 
  /* [18][0][][] */ 67,9,113,108,127,-108,11,54, 
  /* [19][0][][] */ 47,-52,-94,-14,122,-127,-20,-64, 
  /* [20][0][][] */ -49,4,-81,76,127,-47,-86,24, 
  /* [21][0][][] */ -32,47,-60,-85,127,-8,85,8, 
  /* [22][0][][] */ 48,3,40,-89,-127,-40,118,92, 
  /* [23][0][][] */ -76,-35,-32,-78,24,82,-127,-79, 
  /* [24][0][][] */ -27,-26,55,-65,7,-40,87,127, 
  /* [25][0][][] */ 127,-45,-6,74,72,82,-3,25, 
  /* [26][0][][] */ 40,-33,-48,-95,-103,-127,-8,-105, 
  /* [27][0][][] */ -66,-20,-107,-127,-67,81,-43,-29, 
  /* [28][0][][] */ -3,-127,-51,80,71,-50,27,82, 
  /* [29][0][][] */ -127,-51,45,-34,-38,-71,-115,102, 
  /* [30][0][][] */ 0,-123,21,-54,110,-35,4,127, 
  /* [31][0][][] */ -3,20,1,42,-32,51,-11,127, 
  /* [32][0][][] */ -95,11,-18,-127,42,37,-24,-43, 
  /* [33][0][][] */ 30,50,14,-4,-97,-11,24,127, 
  /* [34][0][][] */ -32,2,-36,-31,127,17,-77,86, 
  /* [35][0][][] */ -59,8,48,-127,-64,-44,37,82, 
  /* [36][0][][] */ -7,-1,-57,16,28,-127,6,69, 
  /* [37][0][][] */ 94,7,-90,-9,-70,80,-63,-127, 
  /* [38][0][][] */ 25,46,13,127,72,72,-111,-46, 
  /* [39][0][][] */ 99,-11,-127,-43,-7,56,64,52, 
  /* [40][0][][] */ 53,-27,-127,-69,-32,48,99,69, 
  /* [41][0][][] */ 59,10,-120,-38,-12,14,-127,102, 
  /* [42][0][][] */ 78,12,7,-10,34,44,-127,-22, 
  /* [43][0][][] */ 44,-56,-25,11,-69,-7,46,127, 
  /* [44][0][][] */ 72,-58,-2,-19,-2,20,-91,127, 
  /* [45][0][][] */ -58,29,53,-10,127,-71,78,49, 
  /* [46][0][][] */ -61,25,54,-113,-1,127,-22,-82, 
  /* [47][0][][] */ 17,-30,59,-127,17,67,-12,83, 
};
const TfArray<4, int> tensor_dimension75 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant75_scale = { 48, { 0.002347797155380249, 0.0027841620612889528, 0.0017617595149204135, 0.0024069144856184721, 0.0014056257205083966, 0.0023152364883571863, 0.0022127572447061539, 0.0027438916731625795, 0.0022297760006040335, 0.0030402299016714096, 0.0025955801829695702, 0.0013848063535988331, 0.0024986898060888052, 0.0017576150130480528, 0.0024371717590838671, 0.0015363279962912202, 0.0015892297960817814, 0.0018635967280715704, 0.0024795823264867067, 0.001990678021684289, 0.0015514804981648922, 0.0022535934112966061, 0.0024347179569303989, 0.0024365019053220749, 0.0028383112512528896, 0.0020249651279300451, 0.0020369761623442173, 0.0025114088784903288, 0.0023852156009525061, 0.0016906324308365583, 0.0012665602844208479, 0.0035366781521588564, 0.0022466338705271482, 0.0025349778588861227, 0.0024992045946419239, 0.0024216463789343834, 0.003174064215272665, 0.0019651360344141722, 0.0014336128951981664, 0.0023820542264729738, 0.002417601877823472, 0.0028349440544843674, 0.002730940468609333, 0.0029479577206075191, 0.0028800072614103556, 0.0022077364847064018, 0.003060819348320365, 0.0029591002967208624, } };
const TfArray<48, int> quant75_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant75 = { (TfLiteFloatArray*)&quant75_scale, (TfLiteIntArray*)&quant75_zero, 0 };
const ALIGN(16) int32_t tensor_data76[8] = { 4971, 20343, -999, 10176, 1564, -17739, -91, -1432, };
const TfArray<1, int> tensor_dimension76 = { 1, { 8 } };
const TfArray<8, float> quant76_scale = { 8, { 0.00010356999700888991, 0.00025148494751192629, 0.00010858960740733892, 9.7364274552091956e-05, 8.2143465988337994e-05, 0.00010829112579813227, 0.00010888520773733035, 7.4195821071043611e-05, } };
const TfArray<8, int> quant76_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant76 = { (TfLiteFloatArray*)&quant76_scale, (TfLiteIntArray*)&quant76_zero, 0 };
const ALIGN(16) int8_t tensor_data77[8*1*1*48] = { 
  /* [0][0][][] */ -102,1,-54,3,71,39,63,110,56,-97,-68,8,-127,-13,-10,-42,-11,2,20,-105,65,-72,120,-29,-76,-79,-77,7,-49,48,-125,70,-44,113,-38,17,50,25,-88,89,-53,-53,-60,56,-57,-8,-31,-71, 
  /* [1][0][][] */ 1,-29,-11,-56,57,-59,21,34,-2,-44,-36,-8,10,-68,-64,-30,-19,-71,50,11,5,-32,-11,-30,0,-36,-48,-1,-127,31,-114,59,-63,52,9,-63,-100,-29,-32,-25,-55,-81,-32,17,46,-50,-98,-38, 
  /* [2][0][][] */ -49,10,35,12,-32,-28,15,-81,127,-97,-89,76,-30,35,1,25,-11,-69,76,-20,-49,37,65,61,-31,-26,12,21,-21,31,-84,36,26,96,-51,34,-45,-40,5,74,-52,-16,-24,62,4,28,-59,31, 
  /* [3][0][][] */ 127,64,-11,-56,37,49,-69,-70,33,0,-35,-34,-15,0,-23,36,32,0,-41,63,-82,55,-33,19,-60,-58,-40,-25,-6,7,21,-11,-60,-5,-14,-55,-27,32,38,-73,-87,-18,-1,-42,74,-8,-71,39, 
  /* [4][0][][] */ -17,-45,-8,52,40,13,17,-30,-21,-50,52,77,-6,-92,-53,-106,109,-15,71,98,-60,-12,83,-62,-56,-22,17,10,22,-127,63,-21,-47,-59,-94,30,30,-81,-53,3,78,19,-49,94,69,57,-25,38, 
  /* [5][0][][] */ 44,-29,109,-11,44,47,88,-66,127,9,41,13,8,12,11,81,63,-6,55,35,13,-1,32,16,-92,-1,-66,-67,-5,44,14,-26,68,-65,-34,67,-39,29,-19,69,103,5,-19,16,-41,80,17,70, 
  /* [6][0][][] */ 77,0,73,15,8,36,-58,-40,-127,40,15,20,17,59,19,5,-77,-7,25,7,-36,-58,-12,97,-70,-5,10,35,65,-109,38,-69,36,25,-94,-44,-9,-8,82,-19,9,42,35,-34,-7,22,3,42, 
  /* [7][0][][] */ 11,-24,93,-46,39,-45,0,-61,-97,48,127,-10,41,20,26,-90,73,91,-41,116,39,-72,-13,-37,67,17,-45,-115,-38,6,64,-56,25,-123,-30,-53,80,95,62,7,34,-13,5,-127,-104,8,31,59, 
};
const TfArray<4, int> tensor_dimension77 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant77_scale = { 8, { 0.00440172478556633, 0.010688110254704952, 0.0046150581911206245, 0.0041379816830158234, 0.0034910973627120256, 0.0046023726463317871, 0.0046276212669909, 0.0031533222645521164, } };
const TfArray<8, int> quant77_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant77 = { (TfLiteFloatArray*)&quant77_scale, (TfLiteIntArray*)&quant77_zero, 0 };
const ALIGN(16) int32_t tensor_data78[48] = { -7277, -65, -5572, 788, -3954, 26285, 9983, -5376, -5709, -3369, 23459, 11528, -10913, -3354, -3818, -7975, 14025, -23239, -6556, -9603, 25253, -3526, -2660, -1366, 561, 4253, 26382, -643, 1275, 1279, -268, -11866, -8900, -730, -5491, -8503, 11111, 20843, 47, 3377, 21881, -5655, 421, -5945, 13294, 27319, 1272, -1744, };
const TfArray<1, int> tensor_dimension78 = { 1, { 48 } };
const TfArray<48, float> quant78_scale = { 48, { 0.00012009734928142279, 0.00010754293907666579, 5.9721984143834561e-05, 0.00010711180220823735, 0.00012813987268600613, 5.783279993920587e-05, 0.00015036595868878067, 0.00018864305457100272, 0.00025660704704932868, 0.00012130473623983562, 0.00010360213491367176, 7.1429058152716607e-05, 0.00015261194494087249, 0.00017465141718275845, 0.0001272151421289891, 4.5446875446941704e-05, 7.6267097028903663e-05, 5.824619802297093e-05, 0.00015157494635786861, 0.00011470261233625934, 6.497940921690315e-05, 0.00016761026927269995, 0.00010200315591646358, 0.00017466771532781422, 0.00044611739576794207, 0.00014748625108040869, 4.6516681322827935e-05, 0.00023997070093173534, 0.00023600652639288455, 8.0795471149031073e-05, 0.00014411343727260828, 9.4966402684804052e-05, 8.9229368313681334e-05, 0.00023551775666419417, 0.00014278898015618324, 8.1685131590347737e-05, 0.00016079041233751923, 5.9993661125190556e-05, 0.00018884918245021254, 0.00017854709585662931, 7.8559896792285144e-05, 0.00013657181989401579, 9.0224362793378532e-05, 9.3512477178592235e-05, 0.00014313652354758233, 4.880617416347377e-05, 0.00021597789600491524, 0.00027672885335050523, } };
const TfArray<48, int> quant78_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant78 = { (TfLiteFloatArray*)&quant78_scale, (TfLiteIntArray*)&quant78_zero, 0 };
const ALIGN(16) int8_t tensor_data79[1*3*3*48] = { 
  /* [0][0][][] */ 43,13,114,-126,-17,-11,-26,51,-94,-68,-20,-71,12,-44,110,72,-117,119,57,66,-4,-3,15,79,13,-48,-124,77,-45,88,-24,47,-35,-61,-42,54,-14,-123,32,32,-12,-51,-107,30,-22,-65,12,-14, -12,85,124,-127,22,36,-11,127,21,-71,-126,-79,67,6,-28,127,-51,91,-127,-32,-95,101,53,-24,76,-118,-25,98,-127,56,-127,79,23,4,127,110,-49,-127,-17,27,-127,127,1,75,32,-66,5,42, 25,-98,124,-121,-13,16,17,36,-84,-65,-31,-58,-4,50,-62,36,-127,108,52,43,6,-4,16,-49,15,-51,-88,67,-27,48,-19,32,-35,-45,-66,42,-5,-87,-12,22,-9,-28,65,6,-12,-52,6,-43, 
  /* [0][1][][] */ 62,43,-4,86,70,-117,-127,-10,59,-60,-95,-99,31,-24,127,48,-88,127,39,-54,-119,-2,34,68,13,-15,-120,120,38,77,-15,44,90,0,52,89,-34,-48,127,-6,-107,33,-114,85,8,-125,23,8, 127,89,51,91,127,-61,13,-104,127,11,127,61,127,-75,-55,67,-33,32,73,127,-8,127,127,-127,-127,127,27,-83,108,-127,52,127,127,16,125,-127,103,-42,-103,127,-49,113,17,-14,30,-127,113,127, 26,-127,-69,92,26,-5,-23,-6,49,-66,-117,-105,9,127,-59,13,-101,58,38,25,-127,-10,-22,25,10,-33,-37,127,20,16,-19,38,73,7,43,69,-46,2,-8,-32,-101,-38,107,78,-15,-104,16,-6, 
  /* [0][2][][] */ 46,74,100,25,21,-100,29,-25,-61,71,-32,-59,27,-23,87,114,-25,35,16,33,19,-5,21,103,9,28,-127,-42,10,65,23,6,-18,12,-61,60,-15,-72,10,-52,-45,-39,-127,-11,-127,-50,-45,-11, -82,-23,28,29,36,-127,-40,5,14,127,-79,-127,-5,-34,-73,52,-59,70,14,4,-79,-51,25,-38,-10,7,-25,18,1,20,82,77,39,127,-79,94,-127,43,-12,-96,-31,46,35,127,-75,36,-127,-21, 47,-67,127,17,-11,-9,77,-22,-40,79,-52,-51,27,72,-13,20,-31,50,17,15,-1,3,18,-24,5,15,-91,1,9,34,29,-21,-23,4,-62,39,1,-69,-20,-78,-40,4,76,-31,-83,-27,-38,-34, 
};
const TfArray<4, int> tensor_dimension79 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant79_scale = { 48, { 0.0074593476019799709, 0.0066795824095606804, 0.0037093828432261944, 0.0066528045572340488, 0.0079588759690523148, 0.0035920438822358847, 0.0093393567949533463, 0.011716779321432114, 0.015938080847263336, 0.0075343395583331585, 0.0064348159357905388, 0.0044365189969539642, 0.0094788568094372749, 0.010847746394574642, 0.007901439443230629, 0.0028227437287569046, 0.0047370134852826595, 0.0036177204456180334, 0.0094144474714994431, 0.0071242759004235268, 0.0040359259583055973, 0.010410415008664131, 0.0063355020247399807, 0.010848758742213249, 0.027708727866411209, 0.009160495363175869, 0.0028891903348267078, 0.014904782176017761, 0.014658564701676369, 0.0050182747654616833, 0.0089510073885321617, 0.005898443516343832, 0.0055421111173927784, 0.014628206379711628, 0.0088687436655163765, 0.0050735324621200562, 0.0099868280813097954, 0.0037262567784637213, 0.011729582212865353, 0.011089710518717766, 0.004879421554505825, 0.0084825912490487099, 0.005603911355137825, 0.0058081387542188168, 0.0088903298601508141, 0.0030313925817608833, 0.013414569199085236, 0.017187861725687981, } };
const TfArray<48, int> quant79_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant79 = { (TfLiteFloatArray*)&quant79_scale, (TfLiteIntArray*)&quant79_zero, 3 };
const ALIGN(16) int32_t tensor_data80[48] = { 1446, -263, 865, 4270, 1477, 5847, 8080, 8227, 29903, 1557, 11791, -650, 725, 5974, 1829, 4336, -87, -39, -587, 3044, 4665, -1542, -306, 12197, 19102, 4556, -1009, -6683, 11289, 5254, 5558, 166, 3649, 15042, 5720, 988, 9810, 3186, 6464, 16259, 4300, 1505, 4071, -274, 16747, 1443, 10097, -2482, };
const TfArray<1, int> tensor_dimension80 = { 1, { 48 } };
const TfArray<48, float> quant80_scale = { 48, { 0.00011796738544944674, 0.00016177535871975124, 0.00019730588246602565, 0.00010315984400222078, 0.000142523946124129, 0.00010989921429427341, 0.0001017883259919472, 9.3551316240336746e-05, 3.2169507903745398e-05, 0.00017057289369404316, 7.1107060648500919e-05, 0.00014792811998631805, 0.00025165468105114996, 0.00010783461038954556, 0.00012587656965479255, 0.00013693538494408131, 0.00011932528286706656, 0.00018204022489953786, 0.00024037608818616718, 0.00013713976659346372, 0.00013056056923232973, 0.00018228490080218762, 0.00023023050744086504, 6.3249550294131041e-05, 4.9381524149794132e-05, 0.00015054014511406422, 0.00023193789820652455, 8.312110003316775e-05, 7.935473695397377e-05, 0.00013067758118268102, 9.8456053819973022e-05, 0.0001360651949653402, 0.00012220289499964565, 5.9881404013140127e-05, 0.00013054446026217192, 0.00016129414143506438, 7.8329838288482279e-05, 0.00019013993733096868, 0.00011508208262966946, 5.6278466217918321e-05, 0.00012484374747145921, 0.00015250412980094552, 0.00013099917850922793, 0.00019089144188910723, 5.5641903600189835e-05, 0.00022660165268462151, 9.0298737632110715e-05, 0.00010239039693260565, } };
const TfArray<48, int> quant80_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant80 = { (TfLiteFloatArray*)&quant80_scale, (TfLiteIntArray*)&quant80_zero, 0 };
const ALIGN(16) int8_t tensor_data81[48*1*1*8] = { 
  /* [0][0][][] */ -42,-37,-127,120,126,-93,-54,-45, 
  /* [1][0][][] */ -16,-11,127,33,-71,-38,27,32, 
  /* [2][0][][] */ 22,127,42,1,-50,64,-22,98, 
  /* [3][0][][] */ 50,46,79,-86,-99,-67,83,127, 
  /* [4][0][][] */ -19,47,-19,51,-5,-127,119,0, 
  /* [5][0][][] */ -127,-8,119,35,-39,-87,-37,-20, 
  /* [6][0][][] */ -40,5,-36,6,8,-25,-73,-127, 
  /* [7][0][][] */ -22,97,127,1,-93,-54,33,52, 
  /* [8][0][][] */ -5,88,125,113,-5,-18,-95,-127, 
  /* [9][0][][] */ -6,11,6,-90,16,-8,6,127, 
  /* [10][0][][] */ 127,-31,112,-19,43,67,42,-113, 
  /* [11][0][][] */ 127,-77,-53,89,77,-96,113,-6, 
  /* [12][0][][] */ -127,70,-6,19,-35,19,52,-46, 
  /* [13][0][][] */ -7,15,-83,13,127,-44,-95,-66, 
  /* [14][0][][] */ 4,-77,-89,-24,120,-92,-127,-44, 
  /* [15][0][][] */ 33,-33,90,-8,127,-17,-58,-63, 
  /* [16][0][][] */ -49,-15,-94,106,127,-8,-101,-39, 
  /* [17][0][][] */ 120,37,-99,30,-71,30,-90,127, 
  /* [18][0][][] */ 71,127,65,-33,54,6,4,8, 
  /* [19][0][][] */ -58,36,-32,-46,25,-105,69,-127, 
  /* [20][0][][] */ -72,97,53,-15,-127,102,71,-62, 
  /* [21][0][][] */ 28,-49,24,-45,-1,-26,53,127, 
  /* [22][0][][] */ 127,-38,22,-5,79,-70,-53,81, 
  /* [23][0][][] */ -120,60,-98,32,127,57,-110,-75, 
  /* [24][0][][] */ -102,34,-21,-65,26,-26,-127,92, 
  /* [25][0][][] */ -46,-16,47,-13,-13,127,-17,-12, 
  /* [26][0][][] */ 127,-25,-20,13,60,26,21,-10, 
  /* [27][0][][] */ -36,-95,-7,127,122,63,-63,-86, 
  /* [28][0][][] */ -58,71,-49,127,49,0,-70,-36, 
  /* [29][0][][] */ 28,58,-17,-32,-99,47,-127,0, 
  /* [30][0][][] */ 85,11,64,-102,-127,-47,79,20, 
  /* [31][0][][] */ 76,17,-20,-127,54,77,-53,-62, 
  /* [32][0][][] */ 28,-54,-33,-35,-41,-93,80,-127, 
  /* [33][0][][] */ -127,46,-101,79,59,25,-77,-66, 
  /* [34][0][][] */ -4,53,-41,-16,37,7,-127,-9, 
  /* [35][0][][] */ 127,54,15,98,-78,-26,-79,18, 
  /* [36][0][][] */ 83,55,105,-106,-64,-25,127,63, 
  /* [37][0][][] */ -37,-46,31,-127,28,-11,31,18, 
  /* [38][0][][] */ 40,-40,28,-10,-42,-5,75,127, 
  /* [39][0][][] */ 113,21,57,127,48,-78,-28,-99, 
  /* [40][0][][] */ -93,39,-66,8,-11,-127,38,28, 
  /* [41][0][][] */ -39,-127,-34,-116,120,-73,-28,-14, 
  /* [42][0][][] */ -48,-127,-28,57,25,83,-80,24, 
  /* [43][0][][] */ -54,-127,-64,99,-7,-39,5,16, 
  /* [44][0][][] */ 11,117,-93,92,62,-127,-63,-118, 
  /* [45][0][][] */ 29,127,17,-28,-13,44,-55,68, 
  /* [46][0][][] */ -30,-13,22,-39,-127,30,11,-33, 
  /* [47][0][][] */ -75,-3,-84,72,97,50,-127,81, 
};
const TfArray<4, int> tensor_dimension81 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant81_scale = { 48, { 0.0023602743167430162, 0.0032367778476327658, 0.0039476673118770123, 0.0020640071015805006, 0.002851598197594285, 0.0021988474763929844, 0.0020365659147500992, 0.001871761167421937, 0.00064364279387518764, 0.0034127975814044476, 0.0014226996572688222, 0.0029597242828458548, 0.0050350702367722988, 0.0021575391292572021, 0.0025185199920088053, 0.0027397831436246634, 0.002387442858889699, 0.0036422342527657747, 0.0048094098456203938, 0.0027438723482191563, 0.002612236887216568, 0.003647129749879241, 0.0046064183115959167, 0.0012654877500608563, 0.00098801834974437952, 0.0030119852162897587, 0.0046405796892940998, 0.00166307482868433, 0.0015877180267125368, 0.0026145779993385077, 0.0019698943942785263, 0.0027223725337535143, 0.0024450176861137152, 0.0011980984127148986, 0.002611914649605751, 0.0032271496020257473, 0.0015672119334340096, 0.0038042920641601086, 0.0023025455884635448, 0.0011260113678872585, 0.0024978555738925934, 0.0030512805096805096, 0.002621012507006526, 0.0038193282671272755, 0.0011132750660181046, 0.0045338128693401814, 0.001806683954782784, 0.0020486121065914631, } };
const TfArray<48, int> quant81_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant81 = { (TfLiteFloatArray*)&quant81_scale, (TfLiteIntArray*)&quant81_zero, 0 };
const ALIGN(16) int32_t tensor_data82[8] = { -7396, 9953, -13513, 16186, -2988, -9403, 3230, -6630, };
const TfArray<1, int> tensor_dimension82 = { 1, { 8 } };
const TfArray<8, float> quant82_scale = { 8, { 6.676085467915982e-05, 7.5689706136472523e-05, 3.9765629480825737e-05, 7.6570679084397852e-05, 6.3591818616259843e-05, 7.730624929536134e-05, 6.6760374465957284e-05, 6.5589825680945069e-05, } };
const TfArray<8, int> quant82_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant82 = { (TfLiteFloatArray*)&quant82_scale, (TfLiteIntArray*)&quant82_zero, 0 };
const ALIGN(16) int8_t tensor_data83[8*1*1*48] = { 
  /* [0][0][][] */ 45,-33,-20,-51,69,-9,42,-74,-4,-94,55,-23,-37,35,32,23,-36,113,36,-31,49,-46,-70,100,20,-51,-6,61,50,-13,-8,57,-127,7,-37,-39,25,27,70,-16,44,-3,10,-21,-53,-15,-59,-36, 
  /* [1][0][][] */ 52,-41,23,-39,78,12,-45,26,-24,-20,-7,54,-34,54,-106,-127,-42,-22,51,-15,17,-52,67,-3,-93,58,29,-1,75,-32,7,1,-29,-44,-74,-70,-17,19,-23,-36,3,-53,-54,-2,35,-97,-19,15, 
  /* [2][0][][] */ 108,-116,81,-45,81,27,-13,-45,-40,-59,-25,-100,-34,-76,61,-23,40,75,25,-98,2,123,-52,78,-29,6,-32,-57,-55,87,-13,-45,110,-34,127,94,55,-94,-7,118,8,-42,-61,-55,52,53,-83,-1, 
  /* [3][0][][] */ 70,13,43,1,-27,20,21,16,46,-34,-22,-65,59,-51,-71,-77,35,-58,24,58,-46,66,41,-16,-27,-6,-53,-48,-11,51,-1,68,-60,-64,19,-56,-127,10,25,-52,-5,-1,12,24,117,-10,36,-2, 
  /* [4][0][][] */ -95,-80,27,-1,94,65,29,-41,-12,18,32,-23,-127,-18,-60,-2,31,10,99,-71,-23,37,-59,71,9,-20,-86,17,47,24,29,-26,14,-38,-3,34,67,-64,30,71,-5,-93,-37,-65,2,-65,-127,-9, 
  /* [5][0][][] */ 53,-6,51,-14,59,54,67,-99,-107,57,-36,-53,-57,-2,-112,-38,53,127,-20,37,-58,27,-73,-29,4,-62,-92,-25,-37,33,-87,-49,88,-16,-12,48,56,-25,2,79,102,-78,-52,-6,11,-21,-37,31, 
  /* [6][0][][] */ -26,3,15,3,-30,110,-11,-71,-3,52,32,1,2,-6,53,55,40,-127,58,24,-18,76,43,-24,51,57,-14,-32,-27,62,11,-35,-1,-16,-22,-33,-7,-24,-4,-30,-33,-63,-80,-34,103,43,16,-19, 
  /* [7][0][][] */ -26,42,8,8,-37,48,-57,40,-13,-13,-53,14,29,-9,-118,-38,28,-30,127,37,21,0,80,-19,-50,108,57,26,57,-34,-8,-14,-35,54,2,25,18,35,-12,37,-55,1,-8,41,-40,3,28,62, 
};
const TfArray<4, int> tensor_dimension83 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant83_scale = { 8, { 0.003862032201141119, 0.0043785553425550461, 0.0023003921378403902, 0.0044295182451605797, 0.0036787074059247971, 0.0044720703735947609, 0.0038620042614638805, 0.0037942896597087383, } };
const TfArray<8, int> quant83_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant83 = { (TfLiteFloatArray*)&quant83_scale, (TfLiteIntArray*)&quant83_zero, 0 };
const ALIGN(16) int32_t tensor_data84[48] = { -1881, -1805, -2090, -433, 38055, -6229, -14069, -333, 0, 5987, 21091, -910, -668, 19140, 21037, 12755, -3288, 11795, 16730, -2021, -78, -1446, -225, -9418, 20176, -2401, 15595, 24988, 28897, -1488, -398, -2698, 25429, -24598, 13733, 18859, 16142, 20750, 20, 19728, 14118, -4824, -2965, -57, -849, 2418, -123, -44, };
const TfArray<1, int> tensor_dimension84 = { 1, { 48 } };
const TfArray<48, float> quant84_scale = { 48, { 7.6145646744407713e-05, 0.00015848960902076215, 0.00019190549210179597, 0.00039893342182040215, 7.3371920734643936e-05, 0.00017752483836375177, 6.6799526393879205e-05, 0.00027627122472040355, 0.00018413421639706939, 4.5629793021362275e-05, 4.7919565986376256e-05, 0.00018033946980722249, 0.00016473067807964981, 6.2316474213730544e-05, 9.5644754765089601e-05, 7.8725017374381423e-05, 0.00016585938283242285, 0.00019704323494806886, 8.8358647190034389e-05, 0.00016417262668255717, 0.00021542982722166926, 0.00034019906888715923, 0.00028416907298378646, 9.7518459369894117e-05, 5.438302832772024e-05, 0.00027485931059345603, 6.0077880334574729e-05, 4.5635366404894739e-05, 5.0332153477938846e-05, 0.00017790135461837053, 0.00021112209651619196, 0.00012259124196134508, 9.5543276984244585e-05, 4.5874683564761654e-05, 8.3964361692778766e-05, 6.7574866989161819e-05, 8.7779029854573309e-05, 7.4347932240925729e-05, 0.00017278894665651023, 5.4536816605832428e-05, 7.0520640292670578e-05, 0.00014315405860543251, 0.0001302904129261151, 0.00029398465994745493, 0.00085975584806874394, 0.00013061160279903561, 0.00021107980865053833, 0.00022815288684796542, } };
const TfArray<48, int> quant84_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant84 = { (TfLiteFloatArray*)&quant84_scale, (TfLiteIntArray*)&quant84_zero, 0 };
const ALIGN(16) int8_t tensor_data85[1*3*3*48] = { 
  /* [0][0][][] */ 1,-22,21,-24,-103,6,-30,11,-6,66,-50,-94,-42,-127,-19,-120,-98,-24,-5,-1,7,38,-10,28,-127,2,-80,-111,-41,24,11,-37,-13,69,-30,-51,-37,-17,-13,-80,126,4,97,19,28,34,15,19, 46,-12,33,-127,-114,66,50,127,-75,-75,-116,33,26,-47,-127,41,103,-18,-12,-4,-79,2,11,-21,-31,-1,-76,-127,-127,67,88,-29,-3,127,-40,-87,-110,-67,-14,-127,-127,51,127,52,34,36,18,44, -2,32,4,-8,-41,0,-52,6,3,90,-46,-92,36,-87,-5,-95,56,-22,-15,9,3,34,0,34,-111,-3,-90,-105,-36,22,14,-41,-4,37,-7,-38,-13,-45,-15,-92,126,-8,75,-127,12,35,-16,32, 
  /* [0][1][][] */ 32,-111,-27,34,-107,2,111,-25,3,30,-108,28,-78,-9,-66,-30,82,-39,-30,-93,81,25,127,8,-76,-32,-108,-21,-50,117,2,-18,-31,51,-11,-127,12,-69,7,-110,-82,24,-88,105,8,26,127,26, 127,13,127,59,127,127,127,-60,-80,-83,-26,127,-51,1,-113,-127,18,127,127,-19,-127,127,-95,127,-74,-74,107,103,-80,76,-127,-90,-127,41,127,40,95,-1,-127,6,-100,127,-110,17,127,-127,-48,86, 40,127,-42,16,-68,2,112,-22,5,80,-127,16,127,30,-49,-37,-78,-82,-50,127,59,14,-30,8,-74,127,-127,-59,-42,91,-15,-10,-49,30,-88,-120,12,-127,5,-106,-79,1,-61,-53,1,20,-84,-38, 
  /* [0][2][][] */ -8,-37,10,-2,-71,15,-61,19,12,127,-54,13,-8,-63,11,-107,-127,0,-41,12,28,-7,6,4,-120,8,-84,-110,28,127,-12,69,-12,45,-76,-43,-29,16,50,-58,109,-52,0,1,21,28,6,-34, -3,-28,15,65,-74,-26,84,-71,127,96,-118,-27,-21,-37,-102,21,31,-56,-36,-46,-36,36,4,23,-29,0,72,-87,-18,-49,38,127,-32,1,-107,-72,-127,-46,67,-127,-104,-40,8,-70,-16,12,-14,-127, 6,47,13,-8,-40,2,-66,18,1,82,-40,4,18,-35,18,-87,25,2,-42,25,11,9,-12,6,-121,-4,-97,-91,38,83,-3,57,-7,52,-26,-4,-17,-4,49,-56,105,-45,-6,-76,9,24,0,-9, 
};
const TfArray<4, int> tensor_dimension85 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant85_scale = { 48, { 0.0053727212361991405, 0.011182785965502262, 0.013540560379624367, 0.028148137032985687, 0.0051770112477242947, 0.012525882571935654, 0.0047132731415331364, 0.019493278115987778, 0.012992230243980885, 0.003219568869099021, 0.0033811316825449467, 0.012724478729069233, 0.011623146012425423, 0.0043969559483230114, 0.0067485487088561058, 0.0055547174997627735, 0.011702786199748516, 0.013903071172535419, 0.0062344521284103394, 0.011583771556615829, 0.015200401656329632, 0.024003930389881134, 0.020050538703799248, 0.0068807546049356461, 0.0038371838163584471, 0.019393656402826309, 0.0042390041053295135, 0.0032199621200561523, 0.0035513602197170258, 0.012552449479699135, 0.01489645428955555, 0.0086498521268367767, 0.006741388700902462, 0.0032368479296565056, 0.0059243980795145035, 0.0047679799608886242, 0.0061935549601912498, 0.0052458769641816616, 0.012191725894808769, 0.0038480348885059357, 0.0049758292734622955, 0.010100732557475567, 0.00919309351593256, 0.020743111148476601, 0.060663066804409027, 0.009215756319463253, 0.014893470332026482, 0.016098121181130409, } };
const TfArray<48, int> quant85_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant85 = { (TfLiteFloatArray*)&quant85_scale, (TfLiteIntArray*)&quant85_zero, 3 };
const ALIGN(16) int32_t tensor_data86[48] = { 10, 12558, -1262, -5454, 7304, -2923, 2844, 12975, 10882, -321, 2423, 8220, 8247, 2370, 9620, -511, -495, 19095, 1630, 7832, -807, -5566, 13333, 2974, -1175, 8657, 9406, 370, 6235, -5109, 921, 5618, 11945, 4759, 691, 1921, 2246, 9672, 6394, 2152, 4675, 432, 9397, -6319, 1314, 2919, 7469, -2995, };
const TfArray<1, int> tensor_dimension86 = { 1, { 48 } };
const TfArray<48, float> quant86_scale = { 48, { 0.00016614633204881102, 7.1400769229512662e-05, 0.0001857240276876837, 8.2349761214572936e-05, 0.00013188496814109385, 0.0001229561457876116, 0.00014571458450518548, 7.1547430707141757e-05, 8.0084100773092359e-05, 0.00018494340474717319, 0.00017902249237522483, 9.877100819721818e-05, 8.8393942860420793e-05, 0.00014590017963200808, 8.2243102951906621e-05, 0.00010928323899861425, 0.00015249660646077245, 5.061243791715242e-05, 0.00015101446479093283, 9.1434456408023834e-05, 0.00014960812404751778, 9.8291828180663288e-05, 6.4461164583917707e-05, 0.00017884699627757072, 0.00011116125097032636, 9.0327077487017959e-05, 7.6118914876133204e-05, 0.00018199125770479441, 0.00010092909360537305, 5.2144674555165693e-05, 0.00011953390639973804, 8.5325329564511776e-05, 7.3250717832706869e-05, 0.00010202041448792443, 0.00011937702220166102, 0.00017861482047010213, 0.00012144793436164036, 8.2587714132387191e-05, 0.00012140078615630046, 0.00014072810881771147, 0.00012059883738402277, 0.00022162235109135509, 7.540406659245491e-05, 9.0357061708346009e-05, 1.9634482669061981e-05, 0.00013497174950316548, 9.9016011517960578e-05, 0.00011987907782895491, } };
const TfArray<48, int> quant86_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant86 = { (TfLiteFloatArray*)&quant86_scale, (TfLiteIntArray*)&quant86_zero, 0 };
const ALIGN(16) int8_t tensor_data87[48*1*1*8] = { 
  /* [0][0][][] */ -23,22,27,61,44,-127,55,-27, 
  /* [1][0][][] */ -1,82,127,75,14,34,76,-112, 
  /* [2][0][][] */ 47,24,39,31,127,77,-37,-9, 
  /* [3][0][][] */ -71,-123,-83,127,69,118,-115,-108, 
  /* [4][0][][] */ 9,-127,45,-40,24,82,37,-38, 
  /* [5][0][][] */ -9,51,-31,83,-111,64,127,81, 
  /* [6][0][][] */ -93,4,-127,89,0,58,7,-59, 
  /* [7][0][][] */ 49,6,127,41,31,-38,3,9, 
  /* [8][0][][] */ 66,19,19,-65,-31,127,-67,10, 
  /* [9][0][][] */ 127,-25,-12,-91,83,56,-15,-7, 
  /* [10][0][][] */ -53,-127,-89,67,-106,42,2,31, 
  /* [11][0][][] */ -119,-2,-127,36,-56,-62,72,66, 
  /* [12][0][][] */ -80,-2,-127,-96,-45,71,-25,-13, 
  /* [13][0][][] */ -119,-127,76,59,-97,28,-13,45, 
  /* [14][0][][] */ -93,108,12,127,24,118,12,99, 
  /* [15][0][][] */ -15,-90,-109,-37,103,-49,-127,-104, 
  /* [16][0][][] */ -53,-127,-22,81,68,45,-46,-23, 
  /* [17][0][][] */ 107,23,65,24,-8,95,-127,-101, 
  /* [18][0][][] */ -23,115,66,9,35,-2,-97,127, 
  /* [19][0][][] */ 14,29,-26,-82,127,-102,-23,47, 
  /* [20][0][][] */ -72,-33,-127,-25,25,35,-54,-27, 
  /* [21][0][][] */ -29,109,38,127,-68,50,64,24, 
  /* [22][0][][] */ 101,-43,50,37,122,2,-100,-127, 
  /* [23][0][][] */ -127,59,55,46,-32,42,31,-25, 
  /* [24][0][][] */ -125,-9,-9,125,89,127,-51,-35, 
  /* [25][0][][] */ 23,-54,-22,42,72,26,-89,-127, 
  /* [26][0][][] */ -127,24,-126,-105,-105,84,-15,-18, 
  /* [27][0][][] */ 72,-127,13,-82,-4,-64,-34,-38, 
  /* [28][0][][] */ -96,10,-127,92,-98,72,-119,21, 
  /* [29][0][][] */ 90,29,-127,11,-97,-19,-64,-82, 
  /* [30][0][][] */ -8,28,103,23,-127,88,101,-25, 
  /* [31][0][][] */ -88,105,-93,-127,-19,-27,28,106, 
  /* [32][0][][] */ -63,-25,127,-122,100,120,63,-123, 
  /* [33][0][][] */ -100,79,-4,115,127,-24,37,35, 
  /* [34][0][][] */ 5,113,127,89,101,-45,-89,-77, 
  /* [35][0][][] */ 33,-15,-127,-38,-24,-32,-48,110, 
  /* [36][0][][] */ 51,81,22,-41,-89,-17,91,127, 
  /* [37][0][][] */ 17,-127,98,-109,120,16,-25,87, 
  /* [38][0][][] */ -47,-65,-40,6,-52,-66,127,23, 
  /* [39][0][][] */ -105,-106,52,-46,-83,-22,-127,24, 
  /* [40][0][][] */ 103,-42,33,10,2,-127,61,27, 
  /* [41][0][][] */ -1,15,-33,49,-19,-127,-17,104, 
  /* [42][0][][] */ 10,54,-110,-127,-63,23,85,76, 
  /* [43][0][][] */ -51,-57,-62,-59,91,-15,-59,127, 
  /* [44][0][][] */ -81,6,38,127,27,121,-5,19, 
  /* [45][0][][] */ -8,-127,23,-37,-111,27,90,81, 
  /* [46][0][][] */ -117,32,-127,-39,-93,31,15,-26, 
  /* [47][0][][] */ 18,22,57,-127,-78,-42,55,8, 
};
const TfArray<4, int> tensor_dimension87 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant87_scale = { 48, { 0.0041092578321695328, 0.0017659382428973913, 0.0045934682711958885, 0.0020367370452731848, 0.0032618797849863768, 0.0030410450417548418, 0.0036039240658283234, 0.0017695656279101968, 0.001980700995773077, 0.0045741614885628223, 0.0044277207925915718, 0.0024428798351436853, 0.0021862264256924391, 0.0036085145547986031, 0.0020340990740805864, 0.0027028764598071575, 0.0037716624792665243, 0.0012517854338511825, 0.0037350049242377281, 0.0022614267654716969, 0.0037002221215516329, 0.0024310285225510597, 0.0015943027101457119, 0.0044233803637325764, 0.0027493247762322426, 0.0022340381983667612, 0.0018826310988515615, 0.0045011467300355434, 0.0024962553288787603, 0.0012896818807348609, 0.0029564036522060633, 0.0021103310864418745, 0.001811692607589066, 0.0025232466869056225, 0.0029525235295295715, 0.0044176378287374973, 0.0030037430115044117, 0.0020426223054528236, 0.0030025767628103495, 0.0034805950708687305, 0.0029827423859387636, 0.0054813330061733723, 0.0018649508710950613, 0.0022347797639667988, 0.00048561498988419771, 0.0033382242545485497, 0.002448939485475421, 0.0029649408534169197, } };
const TfArray<48, int> quant87_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant87 = { (TfLiteFloatArray*)&quant87_scale, (TfLiteIntArray*)&quant87_zero, 0 };
const ALIGN(16) int32_t tensor_data88[8] = { 7446, -11914, -21651, 3198, 393, 5942, -4102, 26870, };
const TfArray<1, int> tensor_dimension88 = { 1, { 8 } };
const TfArray<8, float> quant88_scale = { 8, { 0.00013389810919761658, 9.4483686552848667e-05, 9.1235502623021603e-05, 0.00013265134475659579, 0.0001132781762862578, 0.00011006050044670701, 0.00011727953824447468, 9.7363641543779522e-05, } };
const TfArray<8, int> quant88_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant88 = { (TfLiteFloatArray*)&quant88_scale, (TfLiteIntArray*)&quant88_zero, 0 };
const ALIGN(16) int8_t tensor_data89[8*1*1*48] = { 
  /* [0][0][][] */ -17,-42,127,7,-19,25,2,29,48,-6,-34,17,-30,13,60,66,40,-40,13,-71,-11,32,8,-39,-25,-46,18,-11,-90,55,-49,49,25,14,-2,40,17,-43,1,-35,-95,-56,48,-67,68,-31,-83,38, 
  /* [1][0][][] */ -16,32,17,36,-58,-24,73,78,26,-74,22,39,1,-127,27,75,103,-25,45,46,46,-47,-77,-45,32,-9,-33,-44,-26,52,-88,102,-13,41,-22,52,63,123,58,41,-25,84,76,-9,-42,43,35,91, 
  /* [2][0][][] */ 29,-8,-1,-31,22,24,-28,36,119,-11,47,-5,-12,71,52,-22,-97,110,97,47,4,73,17,127,14,87,15,21,0,-101,28,28,-21,-16,-28,-86,-25,17,2,-23,106,16,-30,25,-45,21,-72,-68, 
  /* [3][0][][] */ -49,47,77,15,1,35,7,71,-63,47,-1,32,-2,-11,-89,-14,17,-18,37,45,10,9,-24,-127,-18,2,23,18,-44,-20,-24,-17,2,-8,4,74,-61,-16,-28,76,26,-2,-21,29,-21,52,-48,65, 
  /* [4][0][][] */ -43,50,-24,-19,-15,-51,16,-74,50,-14,-26,87,16,67,-27,27,3,17,33,-12,-97,49,-34,86,62,-9,13,0,13,9,-44,-79,-43,53,86,9,60,35,8,23,-127,-37,13,32,-37,35,21,-68, 
  /* [5][0][][] */ 30,35,35,-42,34,-29,-26,46,81,72,-4,-81,26,16,115,-16,-61,-4,7,-11,-4,13,24,-6,-28,-37,66,-35,-16,44,2,-127,-41,72,31,-69,95,26,50,-75,-88,-28,62,41,-50,14,50,14, 
  /* [6][0][][] */ 41,-11,22,7,29,52,24,48,-20,-4,-84,-10,-18,24,-28,3,-21,-63,3,26,18,42,5,39,-46,-40,127,14,26,8,-32,53,4,-54,81,-16,33,3,-65,15,-34,8,-37,51,-19,23,16,-1, 
  /* [7][0][][] */ -43,-9,-86,0,51,-75,-17,30,-7,0,43,46,22,-2,-51,14,29,12,37,-80,-51,-61,11,10,-63,37,-20,-34,21,-27,10,-10,-127,-47,-6,-4,-67,18,7,-76,-93,-68,-28,-28,-104,59,-26,29, 
};
const TfArray<4, int> tensor_dimension89 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant89_scale = { 8, { 0.0063601736910641193, 0.0044879843480885029, 0.0043336953967809677, 0.006300952285528183, 0.0053807245567440987, 0.0052278847433626652, 0.0055707897990942001, 0.0046247825957834721, } };
const TfArray<8, int> quant89_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant89 = { (TfLiteFloatArray*)&quant89_scale, (TfLiteIntArray*)&quant89_zero, 0 };
const ALIGN(16) int32_t tensor_data90[48] = { 12248, -4444, 8107, 443, 7338, 10382, 14605, 12542, 34963, -525, -8626, 22464, 1, -2140, 12704, 24786, -263, 23602, 27052, -1007, 22944, -10524, -677, 3193, 23489, 169, 211, -336, 16152, 13216, 20303, -7709, -9719, 10285, 22343, 14643, 18947, -1884, 15263, -289, 41682, -6402, 26446, 25090, 22678, -23346, -7050, 12347, };
const TfArray<1, int> tensor_dimension90 = { 1, { 48 } };
const TfArray<48, float> quant90_scale = { 48, { 9.869210043689236e-05, 0.00011220318992855027, 9.6558178483974189e-05, 9.3072092568036169e-05, 0.00010174111957894638, 0.000100624245533254, 9.8621268989518285e-05, 7.9662182542961091e-05, 5.6223485444206744e-05, 0.00011875145719386637, 0.00011606272892095149, 7.9580859164707363e-05, 0.00015293592878151685, 9.107086225412786e-05, 8.9636581833474338e-05, 6.5434185671620071e-05, 9.8666256235446781e-05, 0.00010909545380854979, 8.7108906882349402e-05, 0.00025515910238027573, 9.1115311079192907e-05, 0.00014317125896923244, 0.00019229532335884869, 7.3104958573821932e-05, 0.00010951930016744882, 0.00048788194544613361, 0.00010077869956148788, 0.00051364157116040587, 9.275393676944077e-05, 0.00012832017091568559, 9.2470581876114011e-05, 3.6722292861668393e-05, 0.00011502840789034963, 7.9917888797353953e-05, 0.0001333129039267078, 0.00010102435044245794, 0.00011051896581193432, 0.00011179134889971465, 0.00010246313468087465, 8.4937120846007019e-05, 5.5673252063570544e-05, 7.826380169717595e-05, 5.7299188483739272e-05, 0.0001008515027933754, 7.245037704706192e-05, 5.8205099776387215e-05, 6.8047054810449481e-05, 0.00010777970601338893, } };
const TfArray<48, int> quant90_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant90 = { (TfLiteFloatArray*)&quant90_scale, (TfLiteIntArray*)&quant90_zero, 0 };
const ALIGN(16) int8_t tensor_data91[1*3*3*48] = { 
  /* [0][0][][] */ -89,78,-82,120,73,-68,12,-119,-77,80,87,-65,78,51,-112,-95,56,-58,-98,74,-89,78,81,88,-102,74,71,67,-39,-52,-65,96,72,-59,-59,-74,-78,78,-66,99,-37,51,-97,-52,-87,95,58,-62, -122,115,-99,-77,-43,-94,-63,-118,-116,105,95,-93,127,78,-127,-106,93,-68,-90,83,-87,98,107,127,-90,89,94,98,-63,-83,-86,119,92,-73,-86,-94,-71,112,-115,111,-57,86,-104,-81,-111,117,82,-91, -52,55,-63,-24,-90,-38,-71,-47,-46,41,28,-32,50,33,-45,-49,29,-46,-50,50,-34,61,37,43,-53,34,33,24,-33,-34,-45,49,34,-49,-46,-39,-35,59,-62,29,-1,29,-37,-44,-47,32,33,-24, 
  /* [0][1][][] */ -106,96,-108,127,68,-103,5,-123,-93,93,102,-94,-9,91,-112,-116,64,-102,-112,102,-124,105,108,83,-127,102,100,87,-77,-93,-104,100,101,-123,-83,-100,-127,90,-96,105,-89,86,-127,-80,-108,104,106,-92, -127,127,-127,-126,-105,-127,-112,-127,-127,127,127,-127,-4,127,-99,-127,127,-127,-127,127,-127,127,127,120,-111,127,127,127,-127,-127,-127,127,127,-127,-127,-127,-110,127,-127,127,-127,127,-121,-127,-127,127,127,-127, -74,64,-84,-95,-127,-67,-127,-44,-48,49,45,-52,2,55,-62,-57,44,-66,-74,63,-52,66,41,32,-58,46,40,41,-69,-72,-80,54,45,-100,-49,-47,-77,50,-80,32,-31,60,-45,-62,-55,34,65,-56, 
  /* [0][2][][] */ -78,37,-39,59,67,-66,3,-69,-34,22,39,-41,-82,48,-59,-73,15,-50,-40,44,-59,60,40,-12,-28,28,28,38,-50,-48,-69,22,39,-36,-38,-51,-61,16,-46,32,-54,39,-70,-30,-48,29,52,-23, -95,39,-72,-46,-76,-74,-71,-60,-32,32,60,-58,-116,67,-85,-64,44,-56,-76,50,-52,78,41,-15,-24,54,35,40,-68,-75,-79,33,49,-56,-54,-56,-61,29,-64,34,-71,62,-64,-62,-61,19,67,-49, -46,24,-14,-61,-110,-38,-84,-13,-10,24,30,-33,-65,22,-2,-20,18,-23,-50,27,-19,21,11,-14,-9,16,15,38,-57,-37,-52,12,8,-45,-7,-7,-15,3,-27,6,-28,29,-24,-26,0,14,29,-22, 
};
const TfArray<4, int> tensor_dimension91 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant91_scale = { 48, { 0.0041944142431020737, 0.0047686356119811535, 0.0041037225164473057, 0.0039555639959871769, 0.0043239975348114967, 0.0042765303514897823, 0.0041914037428796291, 0.0033856427762657404, 0.0023894980549812317, 0.0050469366833567619, 0.0049326657317578793, 0.0033821864053606987, 0.0064997770823538303, 0.0038705114275217056, 0.0038095545023679733, 0.0027809529565274715, 0.0041933157481253147, 0.0046365568414330482, 0.0037021285388618708, 0.010844261385500431, 0.0038724006153643131, 0.0060847783461213112, 0.0081725511699914932, 0.0031069607939571142, 0.0046545700170099735, 0.020734982565045357, 0.0042830947786569595, 0.021829767152667046, 0.0039420421235263348, 0.0054536070674657822, 0.0039299996569752693, 0.0015606974484398961, 0.0048887073062360287, 0.0033965101465582848, 0.0056657982058823109, 0.004293534904718399, 0.004697056021541357, 0.0047511323355138302, 0.0043546832166612148, 0.0036098277196288109, 0.002366113243624568, 0.0033262115903198719, 0.0024352155160158873, 0.0042861886322498322, 0.0030791410245001316, 0.0024737166240811348, 0.0028919996693730354, 0.0045806374400854111, } };
const TfArray<48, int> quant91_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant91 = { (TfLiteFloatArray*)&quant91_scale, (TfLiteIntArray*)&quant91_zero, 3 };
const ALIGN(16) int32_t tensor_data92[48] = { 376, -1137, 1790, 4207, 7887, 1301, 5616, 5715, 6323, -1288, -110, 3121, 4916, -423, 3201, 2066, -649, 4265, 6520, -3529, 6583, -1431, -2584, 3720, 8604, -5761, -349, -7106, -14, 386, 1912, 1248, 1914, 1275, 8557, 2374, 6980, -2482, 625, 1266, 2351, 1152, 4299, 6784, -145, 949, 1136, 2195, };
const TfArray<1, int> tensor_dimension92 = { 1, { 48 } };
const TfArray<48, float> quant92_scale = { 48, { 0.00019611856259871274, 0.00017119525000452995, 0.00018311117310076952, 0.00013199759996496141, 9.0658642875496298e-05, 0.00016819000302348286, 0.0001174780263681896, 0.00010690456838347018, 0.00011223199544474483, 0.00024865611339919269, 0.00024382171977777034, 0.00013795429549645633, 0.00014544413716066629, 0.00014359582564793527, 0.00018294205074198544, 0.00022537726908922195, 0.00024026463506743312, 0.00017057756485883147, 0.00012888089986518025, 0.00013133385800756514, 0.00011694510612869635, 0.00016787502681836486, 0.00010554369509918615, 0.00016371793753933161, 8.7017120677046478e-05, 9.7139069112017751e-05, 0.00013608964218292385, 9.553632844472304e-05, 0.00016636283544357866, 0.00015837258251849562, 0.00015937806165311486, 0.00037011443055234849, 0.0001816999283619225, 0.0001469613634981215, 9.8842188890557736e-05, 0.00016772787785157561, 0.00011500927212182432, 0.00013087906700093299, 0.00018293637549504638, 0.00012514033005572855, 0.00011329631524858996, 0.00014079251559451222, 0.00013517306069843471, 0.00011285730579402298, 0.00017116781964432448, 0.00031536683673039079, 0.00013508310075849295, 0.00012901957961730659, } };
const TfArray<48, int> quant92_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant92 = { (TfLiteFloatArray*)&quant92_scale, (TfLiteIntArray*)&quant92_zero, 0 };
const ALIGN(16) int8_t tensor_data93[48*1*1*8] = { 
  /* [0][0][][] */ -89,-6,0,-9,127,-15,88,67, 
  /* [1][0][][] */ -93,59,-127,-41,38,-29,12,0, 
  /* [2][0][][] */ -24,-23,-105,0,-17,127,-45,-49, 
  /* [3][0][][] */ 51,33,-6,-100,74,81,-93,-127, 
  /* [4][0][][] */ 25,-88,-120,-127,55,-103,51,-25, 
  /* [5][0][][] */ 33,12,-113,127,-47,-22,-66,-107, 
  /* [6][0][][] */ -30,-81,-62,127,-110,21,-5,-26, 
  /* [7][0][][] */ -35,-28,-110,-127,-7,-83,-38,-55, 
  /* [8][0][][] */ 127,-39,-89,-102,50,44,-78,-77, 
  /* [9][0][][] */ 11,127,-51,19,41,20,30,-38, 
  /* [10][0][][] */ -25,-46,69,-65,6,34,47,127, 
  /* [11][0][][] */ 51,-77,-27,65,-46,96,127,83, 
  /* [12][0][][] */ -33,-12,-127,-22,68,54,78,0, 
  /* [13][0][][] */ -3,97,-34,-127,88,-97,-124,1, 
  /* [14][0][][] */ 49,23,-32,-55,-13,15,-127,-85, 
  /* [15][0][][] */ 1,127,57,-23,-13,-18,-32,-111, 
  /* [16][0][][] */ 6,6,12,-28,-27,-16,-11,-127, 
  /* [17][0][][] */ -36,38,-1,96,2,-57,22,-127, 
  /* [18][0][][] */ -4,-127,-60,-5,77,3,94,82, 
  /* [19][0][][] */ 0,13,-71,77,23,-54,109,127, 
  /* [20][0][][] */ -127,10,7,-80,21,-84,-6,-18, 
  /* [21][0][][] */ -26,59,127,9,22,-97,-46,33, 
  /* [22][0][][] */ 34,39,127,112,86,41,121,30, 
  /* [23][0][][] */ 71,-127,66,-44,-62,-39,-62,-2, 
  /* [24][0][][] */ -93,-49,73,94,116,127,62,82, 
  /* [25][0][][] */ -26,53,107,-46,45,-55,10,127, 
  /* [26][0][][] */ -22,-42,70,127,36,90,-98,97, 
  /* [27][0][][] */ -6,101,127,96,34,-38,50,78, 
  /* [28][0][][] */ -32,21,84,41,11,-89,28,127, 
  /* [29][0][][] */ 59,62,68,-127,35,16,-2,95, 
  /* [30][0][][] */ -44,7,52,-32,-127,-12,112,-111, 
  /* [31][0][][] */ 121,-13,127,103,-73,-52,-35,2, 
  /* [32][0][][] */ 127,0,-5,58,-16,-115,56,-13, 
  /* [33][0][][] */ 36,-28,49,5,-77,127,-82,-91, 
  /* [34][0][][] */ -18,5,127,-42,-89,-10,124,-82, 
  /* [35][0][][] */ -9,-75,42,64,-127,41,-30,-18, 
  /* [36][0][][] */ -16,24,127,-74,34,-7,14,-112, 
  /* [37][0][][] */ -70,-11,78,126,-98,127,81,-17, 
  /* [38][0][][] */ 13,-54,-15,46,103,-35,-48,127, 
  /* [39][0][][] */ 127,100,-81,-49,29,-115,-126,107, 
  /* [40][0][][] */ -104,-111,-24,127,17,-44,-104,-46, 
  /* [41][0][][] */ 13,60,-96,-88,-119,127,-34,-65, 
  /* [42][0][][] */ 65,32,-105,127,-94,107,-51,-63, 
  /* [43][0][][] */ 46,-8,65,37,101,-119,127,-5, 
  /* [44][0][][] */ -127,50,33,-22,-30,96,-105,-9, 
  /* [45][0][][] */ -83,127,-2,25,-27,106,-94,-17, 
  /* [46][0][][] */ -32,-127,-125,103,-15,-24,53,-71, 
  /* [47][0][][] */ 0,36,-85,-62,-100,-126,-13,-127, 
};
const TfArray<4, int> tensor_dimension93 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant93_scale = { 48, { 0.003355975728482008, 0.0029294886626303196, 0.0031333935912698507, 0.0022587396670132875, 0.0015513483667746186, 0.0028780628927052021, 0.0020102809648960829, 0.0018293482717126608, 0.0019205110147595406, 0.0042549972422420979, 0.0041722711175680161, 0.0023606703616678715, 0.0024888364132493734, 0.0024572080001235008, 0.0031304997391998768, 0.0038566500879824162, 0.0041114022023975849, 0.0029189188499003649, 0.0022054065484553576, 0.0022473817225545645, 0.0020011616870760918, 0.0028726730961352587, 0.0018060610163956881, 0.0028015370480716228, 0.0014890347374603152, 0.0016622412949800491, 0.0023287625517696142, 0.0016348152421414852, 0.0028467965312302113, 0.0027100676670670509, 0.0027272733859717846, 0.0063333888538181782, 0.0031092443969100714, 0.0025147991254925728, 0.0016913849394768476, 0.0028701550327241421, 0.0019680357072502375, 0.0022395991254597902, 0.0031304026488214731, 0.0021413981448858976, 0.0019387236097827554, 0.0024092379026114941, 0.0023130779154598713, 0.0019312113290652633, 0.0029290192760527134, 0.0053965491242706776, 0.0023115384392440319, 0.0022077797912061214, } };
const TfArray<48, int> quant93_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant93 = { (TfLiteFloatArray*)&quant93_scale, (TfLiteIntArray*)&quant93_zero, 0 };
const ALIGN(16) int32_t tensor_data94[8] = { -14781, 1179, -3606, 19499, -12132, -2007, 6786, -7858, };
const TfArray<1, int> tensor_dimension94 = { 1, { 8 } };
const TfArray<8, float> quant94_scale = { 8, { 0.00015106162754818797, 0.00013532240700442344, 9.6540439699310809e-05, 0.00014329126861412078, 0.00025161579833365977, 0.0001286675687879324, 9.8277632787358016e-05, 0.00014943558198865503, } };
const TfArray<8, int> quant94_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant94 = { (TfLiteFloatArray*)&quant94_scale, (TfLiteIntArray*)&quant94_zero, 0 };
const ALIGN(16) int8_t tensor_data95[8*1*1*48] = { 
  /* [0][0][][] */ -91,25,23,3,24,-51,-15,73,-15,21,81,56,32,-26,49,68,-9,10,127,-29,-67,43,-79,-33,55,-73,1,83,-19,0,-49,48,-68,-8,-6,18,-30,13,50,20,43,-23,-93,16,46,-3,0,-29, 
  /* [1][0][][] */ -49,31,-33,89,51,0,2,28,-26,41,79,-54,-39,96,-68,22,-4,-18,-13,-28,-31,-46,47,-37,-127,43,-73,-51,-13,-27,-5,-30,25,-28,-44,13,-69,-54,-109,71,19,18,34,-25,-12,-38,50,24, 
  /* [2][0][][] */ 33,-31,40,35,29,27,56,-88,-2,-11,-22,25,-51,-65,-13,43,27,-38,27,-12,56,-109,59,23,-21,21,13,127,54,-69,9,16,-4,-98,48,-62,31,55,-76,-9,34,-11,9,42,65,18,-9,32, 
  /* [3][0][][] */ -43,21,-13,-111,64,-36,10,-26,-56,-37,36,-57,17,-5,-40,-17,13,-13,-59,-18,-18,28,26,-24,-28,-10,-18,33,11,-29,-6,10,-14,127,44,-52,50,12,-15,40,21,-29,-16,-18,50,-7,26,-45, 
  /* [4][0][][] */ -23,3,52,-37,22,24,-5,10,-12,-48,-12,14,9,31,5,72,24,13,127,53,-9,-62,-51,19,30,-24,-4,7,23,-16,29,-12,-1,9,23,-2,15,-3,32,8,26,-25,-21,1,-8,-8,74,8, 
  /* [5][0][][] */ 73,-48,46,25,28,2,7,-21,-56,18,6,-59,52,-3,-53,96,18,39,31,35,34,-4,-101,-82,35,45,-69,56,-11,24,-64,-63,15,-47,17,-127,-25,-3,5,21,22,51,22,-13,-10,-56,27,24, 
  /* [6][0][][] */ 71,-65,-21,127,6,-47,-16,25,40,48,-79,-60,6,24,-109,2,104,-52,2,-76,-31,-18,-50,-20,-6,-26,-34,-97,-29,-49,-88,-7,-60,-75,-76,18,-40,-25,21,-75,-65,-105,-52,81,-50,-32,0,-6, 
  /* [7][0][][] */ -10,-4,-19,56,48,-45,-26,35,-22,3,-16,-43,-1,-36,56,-63,-26,-29,127,13,-3,35,23,-15,-8,-7,15,31,-48,-11,-30,-71,-14,-119,-24,9,-21,-33,-15,-27,-12,16,-1,-24,-28,14,-46,15, 
};
const TfArray<4, int> tensor_dimension95 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant95_scale = { 8, { 0.0077351555228233337, 0.0069292238913476467, 0.0049433819949626923, 0.0073372721672058105, 0.012884062714874744, 0.0065884613431990147, 0.0050323354080319405, 0.007651893887668848, } };
const TfArray<8, int> quant95_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant95 = { (TfLiteFloatArray*)&quant95_scale, (TfLiteIntArray*)&quant95_zero, 0 };
const ALIGN(16) int32_t tensor_data96[48] = { -15237, -868, -3791, 25049, 23711, 8312, -22, 2960, 581, -4507, -3429, 9435, -63, 8690, -3552, -5677, -1960, 3, 4814, 911, -164, 9719, -1924, 200, 31, -33, -225, -5078, -7, 279, -2191, 49, -2, -13364, -502, 10359, -872, 558, 31, -1287, 189, -503, -132, -746, -37, -71, -11071, 5955, };
const TfArray<1, int> tensor_dimension96 = { 1, { 48 } };
const TfArray<48, float> quant96_scale = { 48, { 0.00011020994134014472, 0.00017984258010983467, 0.00012148923269705847, 6.9646404881495982e-05, 0.00019040568440686911, 0.00011797592014772817, 0.00057518132962286472, 0.00030284727108664811, 0.00018501211889088154, 0.00019173546752426773, 0.00050775037379935384, 0.00013405932986643165, 0.0004227863100823015, 0.00010036746971309185, 0.00048430555034428835, 0.00020237457647453994, 9.3352973635774106e-05, 0.0034185457043349743, 0.0002468317688908428, 0.00078347377711907029, 0.00020942646369803697, 0.00014243878831621259, 0.00016440488980151713, 0.00020407316333148628, 0.00029069048468954861, 0.00020623096497729421, 0.00023080268874764442, 0.00048623772454448044, 0.00021418753021862358, 0.0010900819906964898, 0.00047422214993275702, 5.4558189731324092e-05, 0.0002153869136236608, 0.00024840296828188002, 0.000275971251539886, 0.00010307988850399852, 0.00013308951747603714, 0.00018572312546893954, 0.0004632864729501307, 0.00030818069353699684, 0.00010989968723151833, 0.00071442039916291833, 0.00027932767989113927, 0.00066922389669343829, 0.00035606574965640903, 0.00016570501611568034, 0.00023460158263333142, 0.00012990938557777554, } };
const TfArray<48, int> quant96_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant96 = { (TfLiteFloatArray*)&quant96_scale, (TfLiteIntArray*)&quant96_zero, 0 };
const ALIGN(16) int8_t tensor_data97[1*3*3*48] = { 
  /* [0][0][][] */ 13,36,-89,-20,-78,11,99,9,48,67,8,9,-45,-1,-8,-8,100,-4,12,-117,-109,-9,16,76,-15,-16,15,-13,75,13,-19,-16,-26,1,-17,-111,-37,-2,-12,36,32,-55,-22,-40,48,27,0,-32, 116,127,127,-42,-103,74,-38,127,93,104,-33,-61,-9,-56,0,21,127,59,28,75,127,-30,-3,127,56,127,68,8,-61,16,7,127,-127,12,-36,-40,50,-38,-69,127,66,127,-127,26,-44,-44,-4,-37, 9,32,19,41,-29,-27,-95,-37,18,45,10,33,-5,27,-14,1,-5,-24,-2,41,-5,-2,9,67,-27,-48,12,-13,-44,10,-11,-9,-28,7,42,-116,5,33,-9,38,-84,-20,5,-47,39,-5,-9,0, 
  /* [0][1][][] */ 49,-40,-126,-96,-24,2,127,-45,-54,6,5,-75,27,-127,21,24,109,-9,27,127,87,-17,2,-36,-55,14,-41,-13,127,34,31,72,37,4,0,-127,-47,40,49,-40,20,31,25,51,29,104,99,127, 28,-2,118,4,36,-42,-16,-71,-127,121,127,-127,-127,-67,127,127,72,-127,-127,-71,-79,-127,127,-81,127,-66,-127,127,-46,-127,127,59,85,127,-104,-74,-45,-127,127,-5,72,-82,105,127,-127,-127,127,-39, 42,-28,-72,127,-18,1,-104,-38,-13,-3,-21,-28,37,-18,2,37,33,55,65,-79,9,-6,-4,-53,-73,25,-42,-5,-42,19,-16,14,39,13,127,-110,127,101,32,-52,-127,5,1,13,25,53,57,-98, 
  /* [0][2][][] */ 15,-68,-83,-24,-6,-42,-32,4,-1,59,-10,63,36,0,-25,3,-17,37,4,-19,40,-12,11,-39,-21,8,27,-9,87,-10,-30,1,-4,12,-5,71,-14,-18,-31,-23,29,24,-3,-3,26,48,-4,-95, 127,14,92,-27,-127,-127,16,48,30,-127,-37,-49,23,-56,6,2,11,30,67,-2,-61,-1,-21,-44,47,-62,66,2,-116,48,-33,79,33,37,-31,17,36,-9,-71,-44,42,-31,21,34,-34,-67,-13,32, 10,-80,15,-37,-44,-40,48,-13,-14,57,1,65,59,27,-22,5,10,8,-2,14,-8,-11,9,-26,-35,21,21,-4,-20,-9,-15,-8,-9,25,19,77,7,11,-21,-11,-88,8,-2,6,27,1,-17,-16, 
};
const TfArray<4, int> tensor_dimension97 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant97_scale = { 48, { 0.0054330197162926197, 0.0088657001033425331, 0.0059890546835958958, 0.0034333588555455208, 0.009386429563164711, 0.0058158589527010918, 0.028354715555906296, 0.014929462224245071, 0.0091205425560474396, 0.0094519834965467453, 0.025030570104718208, 0.006608723197132349, 0.020842097699642181, 0.0049478150904178619, 0.023874811828136444, 0.0099764596670866013, 0.0046020215377211571, 0.16852405667304993, 0.012168065644800663, 0.038622908294200897, 0.01032409630715847, 0.0070218048058450222, 0.0081046679988503456, 0.010060194879770279, 0.014330169185996056, 0.010166567750275135, 0.011377880349755287, 0.023970061913132668, 0.010558802634477615, 0.05373777449131012, 0.023377729579806328, 0.0026895550545305014, 0.010617928579449654, 0.012245521880686283, 0.01360455434769392, 0.005081529263406992, 0.0065609137527644634, 0.0091555928811430931, 0.022838633507490158, 0.015192383900284767, 0.005417725071310997, 0.035218782722949982, 0.013770016841590405, 0.032990731298923492, 0.017552973702549934, 0.0081687606871128082, 0.011565154418349266, 0.006404142826795578, } };
const TfArray<48, int> quant97_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant97 = { (TfLiteFloatArray*)&quant97_scale, (TfLiteIntArray*)&quant97_zero, 3 };
const ALIGN(16) int32_t tensor_data98[48] = { 8278, 9865, -5, 1543, 56601, 3959, -3601, 14636, 5379, -1622, 12803, -59, 513, 2044, 410, 2890, -2376, -7206, 10623, 27424, 8123, -709, 1654, 12544, 9084, 4473, 1010, 7079, -1220, -3812, 11847, 3399, 3193, 3943, 9141, 6035, 2335, 2368, 14114, 12240, 2281, 18136, 6141, -3660, 1672, 2467, 8086, -1068, };
const TfArray<1, int> tensor_dimension98 = { 1, { 48 } };
const TfArray<48, float> quant98_scale = { 48, { 9.3571172328665853e-05, 7.8165365266613662e-05, 0.00011926530714845285, 0.0001784769119694829, 2.2832513423054479e-05, 0.00013562747335527092, 0.00014877181092742831, 5.8647125115385279e-05, 9.3121350801084191e-05, 0.00018706730043049902, 6.8987887061666697e-05, 0.00011833132884930819, 9.2156376922503114e-05, 0.00019178105867467821, 0.00013394925917964429, 0.00018547463696449995, 0.00019231157784815878, 9.7738891781773418e-05, 7.9736229963600636e-05, 3.5542627301765606e-05, 9.8588338005356491e-05, 0.00016524635429959744, 0.00025388694484718144, 7.1541464421898127e-05, 8.6639265646226704e-05, 0.00013321969890967011, 0.00019111418805550784, 9.991384285967797e-05, 0.00015746445569675416, 9.2964190116617829e-05, 7.9749755968805403e-05, 0.00012913896352984011, 0.00019850449461955577, 0.00012813135981559753, 8.0075900768861175e-05, 0.00011768953845603392, 0.00020522906561382115, 0.00020632865198422223, 6.4718551584519446e-05, 7.554565672762692e-05, 0.00012202781363157555, 5.2063664043089375e-05, 0.00012666393013205379, 0.00017946791194844991, 0.00010468412074260414, 0.0001469244307372719, 0.00011025410640286282, 0.0001079645226127468, } };
const TfArray<48, int> quant98_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant98 = { (TfLiteFloatArray*)&quant98_scale, (TfLiteIntArray*)&quant98_zero, 0 };
const ALIGN(16) int8_t tensor_data99[48*1*1*8] = { 
  /* [0][0][][] */ 25,91,-127,-94,50,-23,3,-12, 
  /* [1][0][][] */ 16,49,-106,28,-127,37,-58,-85, 
  /* [2][0][][] */ -95,78,127,-40,-127,85,-30,-85, 
  /* [3][0][][] */ 73,-45,-36,14,82,52,-66,-127, 
  /* [4][0][][] */ 91,0,-7,-61,-75,-27,-34,127, 
  /* [5][0][][] */ -17,7,-102,-127,61,-63,7,-7, 
  /* [6][0][][] */ 127,13,2,49,110,51,-15,12, 
  /* [7][0][][] */ -9,82,-127,-100,82,-62,-37,79, 
  /* [8][0][][] */ -109,-123,108,127,25,17,-109,-100, 
  /* [9][0][][] */ 55,27,-7,-36,-37,36,45,127, 
  /* [10][0][][] */ 47,12,123,53,-39,-14,-127,122, 
  /* [11][0][][] */ -54,43,31,69,102,92,6,127, 
  /* [12][0][][] */ -38,73,127,-90,124,-86,-96,32, 
  /* [13][0][][] */ -34,-97,127,-15,-61,-11,-38,-8, 
  /* [14][0][][] */ -20,98,-65,-49,127,-21,-1,41, 
  /* [15][0][][] */ -127,68,-31,12,-110,-83,43,62, 
  /* [16][0][][] */ -51,-36,-19,-26,27,33,127,-64, 
  /* [17][0][][] */ -10,-18,43,29,127,-41,48,100, 
  /* [18][0][][] */ 5,22,-51,-6,-126,39,-9,-127, 
  /* [19][0][][] */ 44,25,-41,12,-127,43,-5,-92, 
  /* [20][0][][] */ 126,-47,58,-59,127,122,54,-34, 
  /* [21][0][][] */ -92,90,87,-19,127,6,66,-50, 
  /* [22][0][][] */ -45,-127,-51,-57,33,20,5,25, 
  /* [23][0][][] */ -21,-1,127,-101,-19,13,99,48, 
  /* [24][0][][] */ 39,19,-127,-12,-39,-35,25,-101, 
  /* [25][0][][] */ -21,-127,7,51,81,18,-109,-70, 
  /* [26][0][][] */ 20,-58,127,14,-63,-9,-18,-21, 
  /* [27][0][][] */ -62,-25,127,54,40,40,25,74, 
  /* [28][0][][] */ -127,57,-69,20,-10,-108,51,99, 
  /* [29][0][][] */ 9,40,127,76,94,-67,-7,93, 
  /* [30][0][][] */ -82,-58,37,-127,119,-31,24,-48, 
  /* [31][0][][] */ 72,81,88,51,-67,-127,-19,41, 
  /* [32][0][][] */ -127,40,1,-10,-94,-74,35,38, 
  /* [33][0][][] */ -37,-69,-25,127,66,-42,-104,11, 
  /* [34][0][][] */ 18,-3,-127,65,-58,67,29,-84, 
  /* [35][0][][] */ -95,6,127,29,-22,86,8,-46, 
  /* [36][0][][] */ -127,82,-15,-36,-84,-86,18,1, 
  /* [37][0][][] */ 88,-62,-8,-16,127,53,-51,-64, 
  /* [38][0][][] */ 18,-26,-10,89,-127,61,39,-92, 
  /* [39][0][][] */ -46,-20,127,-9,-2,44,53,30, 
  /* [40][0][][] */ -35,-127,74,113,-67,47,-91,2, 
  /* [41][0][][] */ 42,25,53,-23,39,-46,-97,127, 
  /* [42][0][][] */ 127,-115,34,-29,115,91,-25,-66, 
  /* [43][0][][] */ 127,-82,-21,3,108,64,-44,4, 
  /* [44][0][][] */ 58,127,-95,-63,74,-70,-25,88, 
  /* [45][0][][] */ 19,-24,-53,-127,45,-121,17,-77, 
  /* [46][0][][] */ 127,-83,13,-12,89,74,-24,-43, 
  /* [47][0][][] */ -123,-27,-127,51,-79,-107,-104,-62, 
};
const TfArray<4, int> tensor_dimension99 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant99_scale = { 48, { 0.0024387016892433167, 0.0020371873397380114, 0.0031083559151738882, 0.0046515604481101036, 0.00059507309924811125, 0.0035347952507436275, 0.0038773701526224613, 0.0015284925466403365, 0.002426978200674057, 0.0048754476010799408, 0.0017979990225285292, 0.0030840141698718071, 0.002401828533038497, 0.0049983002245426178, 0.0034910570830106735, 0.0048339385539293289, 0.0050121266394853592, 0.0025473230052739382, 0.0020781280472874641, 0.00092633086023852229, 0.0025694617070257664, 0.0043067382648587227, 0.0066169365309178829, 0.0018645517993718386, 0.0022580386139452457, 0.0034720427356660366, 0.0049809198826551437, 0.0026040077209472656, 0.0041039222851395607, 0.0024228822439908981, 0.0020784805528819561, 0.0033656882587820292, 0.005173529963940382, 0.0033394277561455965, 0.0020869807340204716, 0.0030672873836010695, 0.0053487890399992466, 0.0053774472326040268, 0.0016867293743416667, 0.001968911150470376, 0.0031803539022803307, 0.001356910914182663, 0.0033011827617883682, 0.0046773883514106274, 0.002728333231061697, 0.003829222870990634, 0.0028735012747347355, 0.0028138288762420416, } };
const TfArray<48, int> quant99_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant99 = { (TfLiteFloatArray*)&quant99_scale, (TfLiteIntArray*)&quant99_zero, 0 };
const ALIGN(16) int32_t tensor_data100[8] = { -16994, -5940, -5758, -521, 9214, 13168, -12558, 6370, };
const TfArray<1, int> tensor_dimension100 = { 1, { 8 } };
const TfArray<8, float> quant100_scale = { 8, { 0.0001506056432845071, 0.0001004166915663518, 0.00014800486678723246, 0.00013913687143940479, 0.00013357715215533972, 0.00013877777382731438, 0.00016597747162450105, 0.00010397910227766261, } };
const TfArray<8, int> quant100_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant100 = { (TfLiteFloatArray*)&quant100_scale, (TfLiteIntArray*)&quant100_zero, 0 };
const ALIGN(16) int8_t tensor_data101[8*1*1*48] = { 
  /* [0][0][][] */ 36,69,35,-33,18,6,-40,5,-18,53,-74,31,-6,38,9,31,33,89,3,20,-127,48,-32,-46,-26,71,32,-35,103,39,43,-19,-3,-31,31,34,19,25,19,41,-30,100,44,56,43,-11,79,-32, 
  /* [1][0][][] */ -60,-18,-45,-32,36,-70,60,53,-31,14,68,-77,21,9,122,-57,18,77,27,70,52,-16,-23,15,-23,39,-38,-26,60,-68,-49,-88,63,25,40,-47,-7,42,-105,-22,-38,57,-32,-80,18,-40,127,-99, 
  /* [2][0][][] */ 34,87,-29,-41,127,87,-17,-49,-57,-2,-10,39,-57,34,-12,23,10,16,-2,9,30,-31,-47,12,-47,-43,56,-50,-8,-17,-18,-23,-15,58,14,40,-19,65,60,17,-24,36,25,33,68,-31,18,-28, 
  /* [3][0][][] */ 14,-10,-44,-24,6,-13,21,16,-45,-82,23,23,-16,30,-53,2,-43,27,-48,-45,-44,-5,-25,-9,-27,9,-12,-26,39,-65,-58,68,32,-29,-27,1,-63,-74,-8,124,-15,3,3,127,-62,107,-13,68, 
  /* [4][0][][] */ -41,-67,-24,-16,-38,-12,-11,-42,-16,-38,72,-57,-34,-7,74,-58,-31,-45,73,10,24,-17,-14,88,-16,15,-49,-16,45,-22,-28,69,-51,28,2,-20,-14,-21,-71,-92,-27,-31,-1,-127,-21,29,-14,66, 
  /* [5][0][][] */ -38,-24,-49,67,20,-36,73,23,41,-29,-14,-42,29,-83,-111,-70,26,-12,-34,5,2,-67,70,79,52,-127,-34,66,-48,-64,-61,-44,-75,-3,-64,-65,-27,44,-59,59,63,-39,-107,3,69,-38,2,-46, 
  /* [6][0][][] */ 21,60,13,-12,6,-20,-52,-27,-18,36,-49,17,-6,-4,-69,10,-26,26,52,108,-61,-3,-13,11,-11,-43,46,-13,-14,31,25,127,74,12,-72,51,18,-90,27,31,-16,39,8,48,60,-17,75,121, 
  /* [7][0][][] */ -6,-18,-2,32,51,93,53,-95,26,-16,-83,-5,-127,-11,-29,16,101,10,-8,-56,-67,-9,33,-118,27,-4,-45,26,-28,5,0,-23,42,-47,36,-56,-17,25,-19,20,35,42,-5,16,-23,-65,15,-28, 
};
const TfArray<4, int> tensor_dimension101 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant101_scale = { 8, { 0.0070832832716405392, 0.0047227968461811543, 0.0069609633646905422, 0.0065438835881650448, 0.006282399408519268, 0.0065269949845969677, 0.0078062508255243301, 0.0048903441056609154, } };
const TfArray<8, int> quant101_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant101 = { (TfLiteFloatArray*)&quant101_scale, (TfLiteIntArray*)&quant101_zero, 0 };
const ALIGN(16) int32_t tensor_data102[48] = { -2115, -5799, 143, 36, 2516, 12354, 15664, 50, 15, 2727, -11729, -272, 1240, 8623, 3394, 186, -1014, 11044, 13427, 15376, -1875, -19, -158, -188, 29, 3853, 1003, 22, 9623, -3023, -222, 10071, 9137, -17153, 5035, -2194, -148, 345, -688, 220, -41, 9557, 11130, 423, 22199, 11658, 13211, 22069, };
const TfArray<1, int> tensor_dimension102 = { 1, { 48 } };
const TfArray<48, float> quant102_scale = { 48, { 0.00024544596089981496, 9.6298725111410022e-05, 0.00030264176893979311, 0.00055257155327126384, 0.00016484143270645291, 8.5008476162329316e-05, 8.33888043416664e-05, 9.4066934252623469e-05, 0.00043944863136857748, 8.4353043348528445e-05, 0.00011630132212303579, 0.00011096099478891119, 4.8966343456413597e-05, 0.00019949743000324816, 0.00012884908937849104, 0.0001031940191751346, 0.00014191753871273249, 0.00012505680206231773, 6.7754335759673268e-05, 0.00012763642007485032, 8.5120933363214135e-05, 0.00021301225933711976, 0.00099097436759620905, 0.00010330573422834277, 0.00048534275265410542, 6.2209037423599511e-05, 0.00011099892435595393, 0.00056544726248830557, 0.00011949426698265597, 0.00021691524307243526, 0.00028774121892638505, 0.00018258090130984783, 0.00012732118193525821, 0.00031829593353904784, 0.00015992771659512073, 0.00011795164755312726, 0.00015063413593452424, 0.00011976058158325031, 0.0001192636918858625, 5.6325661716982722e-05, 0.0006706765852868557, 0.00012516271090134978, 0.00023787407553754747, 6.5896718297153711e-05, 8.9913293777499348e-05, 0.00012180306657683104, 0.00011257024016231298, 5.8860474382527173e-05, } };
const TfArray<48, int> quant102_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant102 = { (TfLiteFloatArray*)&quant102_scale, (TfLiteIntArray*)&quant102_zero, 0 };
const ALIGN(16) int8_t tensor_data103[1*3*3*48] = { 
  /* [0][0][][] */ -49,113,35,36,-77,-78,-19,75,-89,-90,51,13,60,-127,-74,-75,93,-88,-109,-31,71,-56,34,24,113,80,-103,101,-23,26,-55,-69,-68,33,-3,81,105,77,-77,95,70,2,-113,58,-44,-46,-78,-46, 85,71,22,-127,-88,-115,-27,75,34,-127,54,-114,84,-37,-121,90,102,-95,-115,-34,106,-97,-81,98,-121,86,18,-127,-74,43,-82,-93,-87,40,-57,0,127,94,82,77,-80,-15,0,95,-97,-49,-116,-67, -20,-13,-11,88,-37,-21,12,13,48,-54,-21,84,9,-22,-38,-44,24,-10,-16,-8,74,-40,-17,41,11,31,97,26,-71,8,-43,-28,-36,-4,2,-13,43,42,-17,28,13,6,-10,52,-71,-16,-27,-13, 
  /* [0][1][][] */ -76,127,-126,-21,-127,-87,-95,96,127,24,116,18,111,-68,-83,-86,112,-127,-96,-79,86,98,-71,21,-127,113,-127,-72,-27,-86,84,-110,-93,115,-56,127,-18,119,-90,127,17,-54,-127,68,-89,-101,-97,-98, 127,53,-127,119,-107,-127,-127,127,-46,23,127,-122,127,29,-127,127,127,-112,-127,-127,127,127,127,127,119,127,-12,99,-127,-127,127,-127,-127,127,-127,82,-4,127,127,57,-47,-77,-20,127,-127,-127,-127,-127, -24,-23,-27,-98,-46,-30,-26,31,-71,7,1,127,22,24,-44,-69,29,4,-42,-45,85,54,12,51,8,48,100,-18,-95,-75,68,-50,-67,13,-9,-2,-7,27,-19,29,28,-32,0,64,-94,-46,-59,-36, 
  /* [0][2][][] */ -34,46,96,-17,-72,-3,-94,7,-34,67,91,-5,50,-47,-33,-55,42,-52,1,-71,10,-28,36,6,14,27,-45,-11,-1,85,-22,-47,-57,57,5,54,-70,24,-51,53,-86,-92,-64,16,-34,-61,-40,-40, 52,28,96,8,-61,-21,-115,14,11,78,87,-63,46,17,-45,72,29,-35,11,-90,21,-38,-43,45,2,32,-18,7,-83,122,-49,-45,-66,58,-10,56,-114,10,61,2,127,-127,4,51,-48,-70,-66,-44, -9,-5,36,10,-3,3,-64,-1,21,22,1,59,6,21,-1,-51,13,15,-1,-35,10,-20,7,-5,-17,27,32,-4,-48,71,-27,-9,-37,-2,12,18,-43,1,7,11,-39,-49,11,11,-32,-17,-19,-3, 
};
const TfArray<4, int> tensor_dimension103 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant103_scale = { 48, { 0.01043145265430212, 0.0040926956571638584, 0.01286227535456419, 0.023484289646148682, 0.0070057609118521214, 0.0036128601059317589, 0.0035440241917967796, 0.0039978446438908577, 0.018676565960049629, 0.0035850042477250099, 0.0049428059719502926, 0.0047158421948552132, 0.0020810696296393871, 0.008478640578687191, 0.005476086400449276, 0.0043857456184923649, 0.0060314950533211231, 0.0053149140439927578, 0.0028795592952519655, 0.00542454794049263, 0.0036176396533846855, 0.0090530207380652428, 0.042116411030292511, 0.0043904935009777546, 0.020627066493034363, 0.0026438841596245766, 0.0047174543142318726, 0.024031508713960648, 0.0050785061903297901, 0.009218897670507431, 0.012229002080857754, 0.0077596884220838547, 0.0054111499339342117, 0.013527576811611652, 0.0067969281226396561, 0.0050129448063671589, 0.0064019509591162205, 0.005089824553579092, 0.0050687068141996861, 0.00239384057931602, 0.028503753244876862, 0.0053194151259958744, 0.010109648108482361, 0.0028006106149405241, 0.0038213147781789303, 0.0051766303367912769, 0.0047842352651059628, 0.0025015701539814472, } };
const TfArray<48, int> quant103_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant103 = { (TfLiteFloatArray*)&quant103_scale, (TfLiteIntArray*)&quant103_zero, 3 };
const ALIGN(16) int32_t tensor_data104[48] = { 9221, -3111, 24909, -9625, 8851, -2353, 5065, -20816, 22609, -3482, 5887, 69, 14853, -6115, -2227, 7089, 5481, 5636, -2145, 6171, -4695, 21400, 20394, 8173, 21197, 1621, 9817, 11885, -8234, 13097, 25898, 10044, 8783, 13197, -2324, 9930, 5182, 8876, -4178, 7380, 18123, 6079, -1742, -3188, 4697, -13447, 1834, -12202, };
const TfArray<1, int> tensor_dimension104 = { 1, { 48 } };
const TfArray<48, float> quant104_scale = { 48, { 0.00036866450682282448, 0.00025456995354034007, 0.00022283104772213846, 9.6204545116052032e-05, 0.00044981989776715636, 0.0004972777096554637, 0.00036988151259720325, 0.00032649454078637064, 0.00025841066963039339, 0.00050181616097688675, 0.00037389781209640205, 0.0002876690705306828, 0.00092976022278890014, 0.00011980760609731078, 0.0004303035675548017, 0.00029177070246078074, 0.00032173949875868857, 0.00040907869697548449, 0.00041001493809744716, 0.00044742846512235701, 0.00021822526468895376, 0.00024241440405603498, 8.7624088337179273e-05, 0.00027065168251283467, 0.00015753244224470109, 0.00055154389701783657, 0.00032220399589277804, 0.00013383975601755083, 0.00034022179897874594, 0.00011565640306798741, 0.00022477802122011781, 0.00038538288208656013, 0.00044062017695978284, 0.00012142620835220441, 0.00042568994103930891, 0.00038028819835744798, 0.0004381397448014468, 0.00026591730420477688, 0.00025081058265641332, 0.0010618196101859212, 8.2255312008783221e-05, 0.00040169933345168829, 0.00025854629348032176, 0.00036062044091522694, 0.00023742215125821531, 0.00043389809434302151, 0.00043416378321126103, 0.00069744413485750556, } };
const TfArray<48, int> quant104_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant104 = { (TfLiteFloatArray*)&quant104_scale, (TfLiteIntArray*)&quant104_zero, 0 };
const ALIGN(16) int8_t tensor_data105[48*1*1*8] = { 
  /* [0][0][][] */ -43,-22,-47,13,-127,-6,9,31, 
  /* [1][0][][] */ -52,19,26,-74,127,3,-62,28, 
  /* [2][0][][] */ -7,-127,26,-59,-67,9,-33,-42, 
  /* [3][0][][] */ 40,127,-10,119,43,-27,54,-34, 
  /* [4][0][][] */ 5,-3,-36,-127,-5,-118,-9,-15, 
  /* [5][0][][] */ -23,104,-13,-20,10,127,53,-109, 
  /* [6][0][][] */ 27,-8,-12,-91,32,17,-127,74, 
  /* [7][0][][] */ -10,127,36,-26,90,71,118,18, 
  /* [8][0][][] */ -4,-127,16,-48,-72,16,-33,-21, 
  /* [9][0][][] */ -33,80,3,71,15,-95,41,-127, 
  /* [10][0][][] */ 39,-78,15,-95,-1,11,-32,127, 
  /* [11][0][][] */ -127,4,-4,-11,57,-48,-43,3, 
  /* [12][0][][] */ -6,-22,23,-46,-46,12,-10,-127, 
  /* [13][0][][] */ -50,120,111,61,-46,127,29,-16, 
  /* [14][0][][] */ -126,-77,-28,-6,27,14,127,1, 
  /* [15][0][][] */ 127,-24,-44,5,-74,1,13,-15, 
  /* [16][0][][] */ -76,-77,-127,31,-19,-8,-36,30, 
  /* [17][0][][] */ -45,-23,-107,7,-127,5,57,20, 
  /* [18][0][][] */ -6,-62,127,7,41,29,106,-38, 
  /* [19][0][][] */ 54,-77,4,-68,-9,-35,-56,127, 
  /* [20][0][][] */ -77,71,45,-3,116,-17,-127,-15, 
  /* [21][0][][] */ -22,-127,9,8,-61,-71,-37,-46, 
  /* [22][0][][] */ -36,-77,-20,5,-127,15,78,0, 
  /* [23][0][][] */ 127,-37,-21,7,-75,-14,3,-19, 
  /* [24][0][][] */ -18,-127,18,5,-14,27,-78,-34, 
  /* [25][0][][] */ -47,107,-106,-59,5,29,32,-127, 
  /* [26][0][][] */ 68,-34,-49,16,-127,11,31,-8, 
  /* [27][0][][] */ 40,-20,1,-127,18,0,-24,55, 
  /* [28][0][][] */ -105,44,-6,2,127,-28,-69,4, 
  /* [29][0][][] */ 35,-100,-48,83,-70,27,-100,127, 
  /* [30][0][][] */ 18,-127,3,-30,-97,51,-76,-18, 
  /* [31][0][][] */ -30,-61,-127,23,-61,-85,-82,40, 
  /* [32][0][][] */ 34,-33,-78,2,-127,-1,27,13, 
  /* [33][0][][] */ -17,-13,-7,30,-24,-127,-9,-58, 
  /* [34][0][][] */ 36,-3,127,10,20,9,-9,20, 
  /* [35][0][][] */ 37,-127,-9,-67,-89,4,44,108, 
  /* [36][0][][] */ 21,-5,-4,-127,8,1,3,31, 
  /* [37][0][][] */ 9,-127,4,8,-102,23,98,-2, 
  /* [38][0][][] */ -97,30,10,-22,127,-44,-56,1, 
  /* [39][0][][] */ -36,24,-35,3,-127,0,-39,19, 
  /* [40][0][][] */ -22,-56,-6,26,-127,14,70,6, 
  /* [41][0][][] */ 27,-74,-17,-109,-14,73,-36,127, 
  /* [42][0][][] */ 47,-42,62,-14,127,-18,7,-12, 
  /* [43][0][][] */ 127,-22,18,3,126,-30,-55,-22, 
  /* [44][0][][] */ -93,42,41,-22,92,-29,-127,-56, 
  /* [45][0][][] */ -20,-1,-30,96,23,-25,8,127, 
  /* [46][0][][] */ -3,29,-27,37,3,-127,-12,-73, 
  /* [47][0][][] */ 37,127,109,-35,56,90,71,-36, 
};
const TfArray<4, int> tensor_dimension105 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant105_scale = { 48, { 0.0087279202416539192, 0.0060267974622547626, 0.0052753970958292484, 0.0022775873076170683, 0.010649227537214756, 0.011772763915359974, 0.0087567325681447983, 0.0077295703813433647, 0.006117724347859621, 0.011880208738148212, 0.0088518159464001656, 0.006810399703681469, 0.022011538967490196, 0.0028363761957734823, 0.010187190026044846, 0.0069075040519237518, 0.0076169976964592934, 0.0096847033128142357, 0.0097068678587675095, 0.010592611506581306, 0.0051663578487932682, 0.0057390215806663036, 0.002074450021609664, 0.0064075230620801449, 0.0037294900976121426, 0.013057484291493893, 0.0076279947534203529, 0.0031685794238001108, 0.0080545553937554359, 0.0027380988467484713, 0.005321490578353405, 0.0091237183660268784, 0.010431429371237755, 0.0028746956959366798, 0.010077964514493942, 0.009003104642033577, 0.010372706688940525, 0.0062954393215477467, 0.0059377965517342091, 0.025137970224022865, 0.0019473471911624074, 0.0095100011676549911, 0.0061209346167743206, 0.0085374815389513969, 0.0056208330206573009, 0.010272287763655186, 0.010278577916324139, 0.016511589288711548, } };
const TfArray<48, int> quant105_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant105 = { (TfLiteFloatArray*)&quant105_scale, (TfLiteIntArray*)&quant105_zero, 0 };
const ALIGN(16) int32_t tensor_data106[8] = { 5175, -8788, -9630, 4702, 6835, 273, -9871, 10656, };
const TfArray<1, int> tensor_dimension106 = { 1, { 8 } };
const TfArray<8, float> quant106_scale = { 8, { 0.00020169645722489804, 5.7857752835843712e-05, 0.0001093924292945303, 8.2156999269500375e-05, 3.8892565498827025e-05, 0.00010099415521835908, 4.3798172555398196e-05, 6.0948030295548961e-05, } };
const TfArray<8, int> quant106_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant106 = { (TfLiteFloatArray*)&quant106_scale, (TfLiteIntArray*)&quant106_zero, 0 };
const ALIGN(16) int8_t tensor_data107[8*1*1*8] = { 
  /* [0][0][][] */ -61,110,5,-3,7,7,-127,-4, 
  /* [1][0][][] */ 91,-18,23,46,13,127,-2,-14, 
  /* [2][0][][] */ 127,-58,52,18,104,-56,75,3, 
  /* [3][0][][] */ -14,38,1,-22,-1,-83,-50,127, 
  /* [4][0][][] */ -127,-98,-107,-56,-35,49,111,9, 
  /* [5][0][][] */ 57,4,-2,-127,-9,64,-4,-15, 
  /* [6][0][][] */ 102,57,127,71,109,28,-77,2, 
  /* [7][0][][] */ -43,-58,24,-127,35,-125,53,34, 
};
const TfArray<4, int> tensor_dimension107 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant107_scale = { 8, { 0.013249308802187443, 0.0038006382528692484, 0.0071859173476696014, 0.0053968396969139576, 0.0025548273697495461, 0.0066342405043542385, 0.0028770735953003168, 0.0040036365389823914, } };
const TfArray<8, int> quant107_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant107 = { (TfLiteFloatArray*)&quant107_scale, (TfLiteIntArray*)&quant107_zero, 0 };
const ALIGN(16) int32_t tensor_data108[8] = { 2863, 30034, 1731, -11163, 14103, 1966, 23184, 9673, };
const TfArray<1, int> tensor_dimension108 = { 1, { 8 } };
const TfArray<8, float> quant108_scale = { 8, { 0.00022685197473037988, 0.00010937347542494535, 0.00032693365938030183, 0.00019649026216939092, 0.00033320425427518785, 0.00017547143215779215, 0.00014943972928449512, 0.0001840779441408813, } };
const TfArray<8, int> quant108_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant108 = { (TfLiteFloatArray*)&quant108_scale, (TfLiteIntArray*)&quant108_zero, 0 };
const ALIGN(16) int8_t tensor_data109[1*3*3*8] = { 
  /* [0][0][][] */ 1,-17,-4,7,0,-1,0,-5, -13,18,-11,127,4,3,-3,64, 0,-1,-3,5,-1,3,1,1, 
  /* [0][1][][] */ -9,-127,-7,-3,1,1,-127,-1, 127,-1,-127,1,-127,127,-5,-13, -7,4,-3,-1,1,7,0,3, 
  /* [0][2][][] */ 0,7,-8,-4,-1,1,8,2, -8,9,0,5,4,-18,3,-127, -1,-3,-1,-1,-2,1,1,-19, 
};
const TfArray<4, int> tensor_dimension109 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant109_scale = { 8, { 0.0096412086859345436, 0.0046483725309371948, 0.013894679956138134, 0.0083508361130952835, 0.014161180704832077, 0.0074575357139110565, 0.0063511882908642292, 0.0078233126550912857, } };
const TfArray<8, int> quant109_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant109 = { (TfLiteFloatArray*)&quant109_scale, (TfLiteIntArray*)&quant109_zero, 3 };
const ALIGN(16) int32_t tensor_data110[8] = { -805, 37805, 2077, 39074, 37852, -211, 44176, 69891, };
const TfArray<1, int> tensor_dimension110 = { 1, { 8 } };
const TfArray<8, float> quant110_scale = { 8, { 7.2446091508027166e-05, 7.9999037552624941e-05, 7.8677650890313089e-05, 6.0649457736872137e-05, 7.3980612796731293e-05, 7.727403863100335e-05, 4.903347507934086e-05, 3.6187571822665632e-05, } };
const TfArray<8, int> quant110_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant110 = { (TfLiteFloatArray*)&quant110_scale, (TfLiteIntArray*)&quant110_zero, 0 };
const ALIGN(16) int8_t tensor_data111[8*3*3*1] = { 
  /* [0][0][][] */ 97, -118, 10, 
  /* [0][1][][] */ -113, 127, -4, 
  /* [0][2][][] */ 14, -15, 0, 
  /* [1][0][][] */ 20, 27, 54, 
  /* [1][1][][] */ -25, -127, 32, 
  /* [1][2][][] */ 3, 6, 20, 
  /* [2][0][][] */ -127, 102, 18, 
  /* [2][1][][] */ -31, -20, 61, 
  /* [2][2][][] */ -3, -4, 5, 
  /* [3][0][][] */ 54, 51, 9, 
  /* [3][1][][] */ 47, 66, 9, 
  /* [3][2][][] */ -85, -127, -19, 
  /* [4][0][][] */ -38, 60, -18, 
  /* [4][1][][] */ -82, 127, -45, 
  /* [4][2][][] */ -13, 17, -4, 
  /* [5][0][][] */ -77, -66, -4, 
  /* [5][1][][] */ 127, 105, 7, 
  /* [5][2][][] */ -47, -43, -3, 
  /* [6][0][][] */ 57, 119, -71, 
  /* [6][1][][] */ 48, -44, -127, 
  /* [6][2][][] */ 27, 27, -22, 
  /* [7][0][][] */ -45, -127, 36, 
  /* [7][1][][] */ 93, 61, 11, 
  /* [7][2][][] */ 14, -11, 3, 
};
const TfArray<4, int> tensor_dimension111 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant111_scale = { 8, { 0.018473751842975616, 0.020399753004312515, 0.020062800496816635, 0.015465610660612583, 0.018865054473280907, 0.019704878330230713, 0.012503535486757755, 0.0092278299853205681, } };
const TfArray<8, int> quant111_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant111 = { (TfLiteFloatArray*)&quant111_scale, (TfLiteIntArray*)&quant111_zero, 0 };
const TfArray<4, int> tensor_dimension112 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant112_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant112_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant112 = { (TfLiteFloatArray*)&quant112_scale, (TfLiteIntArray*)&quant112_zero, 0 };
const TfArray<4, int> tensor_dimension113 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant113_scale = { 1, { 0.015223167836666107, } };
const TfArray<1, int> quant113_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant113 = { (TfLiteFloatArray*)&quant113_scale, (TfLiteIntArray*)&quant113_zero, 0 };
const TfArray<4, int> tensor_dimension114 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant114_scale = { 1, { 0.027594054117798805, } };
const TfArray<1, int> quant114_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant114 = { (TfLiteFloatArray*)&quant114_scale, (TfLiteIntArray*)&quant114_zero, 0 };
const TfArray<4, int> tensor_dimension115 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant115_scale = { 1, { 0.042239673435688019, } };
const TfArray<1, int> quant115_zero = { 1, { -48 } };
const TfLiteAffineQuantization quant115 = { (TfLiteFloatArray*)&quant115_scale, (TfLiteIntArray*)&quant115_zero, 0 };
const TfArray<4, int> tensor_dimension116 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant116_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant116_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant116 = { (TfLiteFloatArray*)&quant116_scale, (TfLiteIntArray*)&quant116_zero, 0 };
const TfArray<4, int> tensor_dimension117 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant117_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant117_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant117 = { (TfLiteFloatArray*)&quant117_scale, (TfLiteIntArray*)&quant117_zero, 0 };
const TfArray<4, int> tensor_dimension118 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant118_scale = { 1, { 0.021262124180793762, } };
const TfArray<1, int> quant118_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant118 = { (TfLiteFloatArray*)&quant118_scale, (TfLiteIntArray*)&quant118_zero, 0 };
const TfArray<4, int> tensor_dimension119 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant119_scale = { 1, { 0.038369257003068924, } };
const TfArray<1, int> quant119_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant119 = { (TfLiteFloatArray*)&quant119_scale, (TfLiteIntArray*)&quant119_zero, 0 };
const TfArray<4, int> tensor_dimension120 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant120_scale = { 1, { 0.020285209640860558, } };
const TfArray<1, int> quant120_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant120 = { (TfLiteFloatArray*)&quant120_scale, (TfLiteIntArray*)&quant120_zero, 0 };
const TfArray<4, int> tensor_dimension121 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant121_scale = { 1, { 0.019529229030013084, } };
const TfArray<1, int> quant121_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant121 = { (TfLiteFloatArray*)&quant121_scale, (TfLiteIntArray*)&quant121_zero, 0 };
const TfArray<4, int> tensor_dimension122 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant122_scale = { 1, { 0.034656397998332977, } };
const TfArray<1, int> quant122_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant122 = { (TfLiteFloatArray*)&quant122_scale, (TfLiteIntArray*)&quant122_zero, 0 };
const TfArray<4, int> tensor_dimension123 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant123_scale = { 1, { 0.058438610285520554, } };
const TfArray<1, int> quant123_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant123 = { (TfLiteFloatArray*)&quant123_scale, (TfLiteIntArray*)&quant123_zero, 0 };
const TfArray<4, int> tensor_dimension124 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant124_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant124_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant124 = { (TfLiteFloatArray*)&quant124_scale, (TfLiteIntArray*)&quant124_zero, 0 };
const TfArray<4, int> tensor_dimension125 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant125_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant125_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant125 = { (TfLiteFloatArray*)&quant125_scale, (TfLiteIntArray*)&quant125_zero, 0 };
const TfArray<4, int> tensor_dimension126 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant126_scale = { 1, { 0.021052587777376175, } };
const TfArray<1, int> quant126_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant126 = { (TfLiteFloatArray*)&quant126_scale, (TfLiteIntArray*)&quant126_zero, 0 };
const TfArray<4, int> tensor_dimension127 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant127_scale = { 1, { 0.040432199835777283, } };
const TfArray<1, int> quant127_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant127 = { (TfLiteFloatArray*)&quant127_scale, (TfLiteIntArray*)&quant127_zero, 0 };
const TfArray<4, int> tensor_dimension128 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant128_scale = { 1, { 0.01417264062911272, } };
const TfArray<1, int> quant128_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant128 = { (TfLiteFloatArray*)&quant128_scale, (TfLiteIntArray*)&quant128_zero, 0 };
const TfArray<4, int> tensor_dimension129 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant129_scale = { 1, { 0.017286457121372223, } };
const TfArray<1, int> quant129_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant129 = { (TfLiteFloatArray*)&quant129_scale, (TfLiteIntArray*)&quant129_zero, 0 };
const TfArray<4, int> tensor_dimension130 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant130_scale = { 1, { 0.022831013426184654, } };
const TfArray<1, int> quant130_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant130 = { (TfLiteFloatArray*)&quant130_scale, (TfLiteIntArray*)&quant130_zero, 0 };
const TfArray<4, int> tensor_dimension131 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant131_scale = { 1, { 0.049980372190475464, } };
const TfArray<1, int> quant131_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant131 = { (TfLiteFloatArray*)&quant131_scale, (TfLiteIntArray*)&quant131_zero, 0 };
const TfArray<4, int> tensor_dimension132 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant132_scale = { 1, { 0.016100248321890831, } };
const TfArray<1, int> quant132_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant132 = { (TfLiteFloatArray*)&quant132_scale, (TfLiteIntArray*)&quant132_zero, 0 };
const TfArray<4, int> tensor_dimension133 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant133_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant133_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant133 = { (TfLiteFloatArray*)&quant133_scale, (TfLiteIntArray*)&quant133_zero, 0 };
const TfArray<4, int> tensor_dimension134 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant134_scale = { 1, { 0.046651218086481094, } };
const TfArray<1, int> quant134_zero = { 1, { 35 } };
const TfLiteAffineQuantization quant134 = { (TfLiteFloatArray*)&quant134_scale, (TfLiteIntArray*)&quant134_zero, 0 };
const TfArray<4, int> tensor_dimension135 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant135_scale = { 1, { 0.061415884643793106, } };
const TfArray<1, int> quant135_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant135 = { (TfLiteFloatArray*)&quant135_scale, (TfLiteIntArray*)&quant135_zero, 0 };
const TfArray<4, int> tensor_dimension136 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant136_scale = { 1, { 0.016412463039159775, } };
const TfArray<1, int> quant136_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant136 = { (TfLiteFloatArray*)&quant136_scale, (TfLiteIntArray*)&quant136_zero, 0 };
const TfArray<4, int> tensor_dimension137 = { 4, { 1,7,7,48 } };
const TfArray<1, float> quant137_scale = { 1, { 0.016412463039159775, } };
const TfArray<1, int> quant137_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant137 = { (TfLiteFloatArray*)&quant137_scale, (TfLiteIntArray*)&quant137_zero, 0 };
const TfArray<4, int> tensor_dimension138 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant138_scale = { 1, { 0.019939003512263298, } };
const TfArray<1, int> quant138_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant138 = { (TfLiteFloatArray*)&quant138_scale, (TfLiteIntArray*)&quant138_zero, 0 };
const TfArray<4, int> tensor_dimension139 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant139_scale = { 1, { 0.043485403060913086, } };
const TfArray<1, int> quant139_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant139 = { (TfLiteFloatArray*)&quant139_scale, (TfLiteIntArray*)&quant139_zero, 0 };
const TfArray<4, int> tensor_dimension140 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant140_scale = { 1, { 0.012627352029085159, } };
const TfArray<1, int> quant140_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant140 = { (TfLiteFloatArray*)&quant140_scale, (TfLiteIntArray*)&quant140_zero, 0 };
const TfArray<4, int> tensor_dimension141 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant141_scale = { 1, { 0.020362498238682747, } };
const TfArray<1, int> quant141_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant141 = { (TfLiteFloatArray*)&quant141_scale, (TfLiteIntArray*)&quant141_zero, 0 };
const TfArray<4, int> tensor_dimension142 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant142_scale = { 1, { 0.020215496420860291, } };
const TfArray<1, int> quant142_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant142 = { (TfLiteFloatArray*)&quant142_scale, (TfLiteIntArray*)&quant142_zero, 0 };
const TfArray<4, int> tensor_dimension143 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant143_scale = { 1, { 0.046021461486816406, } };
const TfArray<1, int> quant143_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant143 = { (TfLiteFloatArray*)&quant143_scale, (TfLiteIntArray*)&quant143_zero, 0 };
const TfArray<4, int> tensor_dimension144 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant144_scale = { 1, { 0.014738450758159161, } };
const TfArray<1, int> quant144_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant144 = { (TfLiteFloatArray*)&quant144_scale, (TfLiteIntArray*)&quant144_zero, 0 };
const TfArray<4, int> tensor_dimension145 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant145_scale = { 1, { 0.015686387196183205, } };
const TfArray<1, int> quant145_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant145 = { (TfLiteFloatArray*)&quant145_scale, (TfLiteIntArray*)&quant145_zero, 0 };
const TfArray<4, int> tensor_dimension146 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant146_scale = { 1, { 0.018736595287919044, } };
const TfArray<1, int> quant146_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant146 = { (TfLiteFloatArray*)&quant146_scale, (TfLiteIntArray*)&quant146_zero, 0 };
const TfArray<4, int> tensor_dimension147 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant147_scale = { 1, { 0.055908504873514175, } };
const TfArray<1, int> quant147_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant147 = { (TfLiteFloatArray*)&quant147_scale, (TfLiteIntArray*)&quant147_zero, 0 };
const TfArray<4, int> tensor_dimension148 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant148_scale = { 1, { 0.014361890032887459, } };
const TfArray<1, int> quant148_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant148 = { (TfLiteFloatArray*)&quant148_scale, (TfLiteIntArray*)&quant148_zero, 0 };
const TfArray<4, int> tensor_dimension149 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant149_scale = { 1, { 0.017545063048601151, } };
const TfArray<1, int> quant149_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant149 = { (TfLiteFloatArray*)&quant149_scale, (TfLiteIntArray*)&quant149_zero, 0 };
const TfArray<4, int> tensor_dimension150 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant150_scale = { 1, { 0.017892077565193176, } };
const TfArray<1, int> quant150_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant150 = { (TfLiteFloatArray*)&quant150_scale, (TfLiteIntArray*)&quant150_zero, 0 };
const TfArray<4, int> tensor_dimension151 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant151_scale = { 1, { 0.05583297461271286, } };
const TfArray<1, int> quant151_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant151 = { (TfLiteFloatArray*)&quant151_scale, (TfLiteIntArray*)&quant151_zero, 0 };
const TfArray<4, int> tensor_dimension152 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant152_scale = { 1, { 0.013517940416932106, } };
const TfArray<1, int> quant152_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant152 = { (TfLiteFloatArray*)&quant152_scale, (TfLiteIntArray*)&quant152_zero, 0 };
const TfArray<4, int> tensor_dimension153 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant153_scale = { 1, { 0.01971949078142643, } };
const TfArray<1, int> quant153_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant153 = { (TfLiteFloatArray*)&quant153_scale, (TfLiteIntArray*)&quant153_zero, 0 };
const TfArray<4, int> tensor_dimension154 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant154_scale = { 1, { 0.034305714070796967, } };
const TfArray<1, int> quant154_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant154 = { (TfLiteFloatArray*)&quant154_scale, (TfLiteIntArray*)&quant154_zero, 0 };
const TfArray<4, int> tensor_dimension155 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant155_scale = { 1, { 0.066459916532039642, } };
const TfArray<1, int> quant155_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant155 = { (TfLiteFloatArray*)&quant155_scale, (TfLiteIntArray*)&quant155_zero, 0 };
const TfArray<4, int> tensor_dimension156 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant156_scale = { 1, { 0.017763076350092888, } };
const TfArray<1, int> quant156_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant156 = { (TfLiteFloatArray*)&quant156_scale, (TfLiteIntArray*)&quant156_zero, 0 };
const TfArray<4, int> tensor_dimension157 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant157_scale = { 1, { 0.015399754047393799, } };
const TfArray<1, int> quant157_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant157 = { (TfLiteFloatArray*)&quant157_scale, (TfLiteIntArray*)&quant157_zero, 0 };
const TfArray<4, int> tensor_dimension158 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant158_scale = { 1, { 0.02318359911441803, } };
const TfArray<1, int> quant158_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant158 = { (TfLiteFloatArray*)&quant158_scale, (TfLiteIntArray*)&quant158_zero, 0 };
const TfArray<4, int> tensor_dimension159 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant159_scale = { 1, { 0.077421367168426514, } };
const TfArray<1, int> quant159_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant159 = { (TfLiteFloatArray*)&quant159_scale, (TfLiteIntArray*)&quant159_zero, 0 };
const TfArray<4, int> tensor_dimension160 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant160_scale = { 1, { 0.016070833429694176, } };
const TfArray<1, int> quant160_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant160 = { (TfLiteFloatArray*)&quant160_scale, (TfLiteIntArray*)&quant160_zero, 0 };
const TfArray<4, int> tensor_dimension161 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant161_scale = { 1, { 0.017349177971482277, } };
const TfArray<1, int> quant161_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant161 = { (TfLiteFloatArray*)&quant161_scale, (TfLiteIntArray*)&quant161_zero, 0 };
const TfArray<4, int> tensor_dimension162 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant162_scale = { 1, { 0.035075753927230835, } };
const TfArray<1, int> quant162_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant162 = { (TfLiteFloatArray*)&quant162_scale, (TfLiteIntArray*)&quant162_zero, 0 };
const TfArray<4, int> tensor_dimension163 = { 4, { 1,3,3,8 } };
const TfArray<1, float> quant163_scale = { 1, { 0.080793119966983795, } };
const TfArray<1, int> quant163_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant163 = { (TfLiteFloatArray*)&quant163_scale, (TfLiteIntArray*)&quant163_zero, 0 };
const TfArray<4, int> tensor_dimension164 = { 4, { 1,3,3,48 } };
const TfArray<1, float> quant164_scale = { 1, { 0.020649844780564308, } };
const TfArray<1, int> quant164_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant164 = { (TfLiteFloatArray*)&quant164_scale, (TfLiteIntArray*)&quant164_zero, 0 };
const TfArray<4, int> tensor_dimension165 = { 4, { 1,5,5,48 } };
const TfArray<1, float> quant165_scale = { 1, { 0.020649844780564308, } };
const TfArray<1, int> quant165_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant165 = { (TfLiteFloatArray*)&quant165_scale, (TfLiteIntArray*)&quant165_zero, 0 };
const TfArray<4, int> tensor_dimension166 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant166_scale = { 1, { 0.018637597560882568, } };
const TfArray<1, int> quant166_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant166 = { (TfLiteFloatArray*)&quant166_scale, (TfLiteIntArray*)&quant166_zero, 0 };
const TfArray<4, int> tensor_dimension167 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant167_scale = { 1, { 0.031078457832336426, } };
const TfArray<1, int> quant167_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant167 = { (TfLiteFloatArray*)&quant167_scale, (TfLiteIntArray*)&quant167_zero, 0 };
const TfArray<4, int> tensor_dimension168 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant168_scale = { 1, { 0.011015493422746658, } };
const TfArray<1, int> quant168_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant168 = { (TfLiteFloatArray*)&quant168_scale, (TfLiteIntArray*)&quant168_zero, 0 };
const TfArray<4, int> tensor_dimension169 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant169_scale = { 1, { 0.012130521237850189, } };
const TfArray<1, int> quant169_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant169 = { (TfLiteFloatArray*)&quant169_scale, (TfLiteIntArray*)&quant169_zero, 0 };
const TfArray<4, int> tensor_dimension170 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant170_scale = { 1, { 0.018702223896980286, } };
const TfArray<1, int> quant170_zero = { 1, { 30 } };
const TfLiteAffineQuantization quant170 = { (TfLiteFloatArray*)&quant170_scale, (TfLiteIntArray*)&quant170_zero, 0 };
const TfArray<4, int> tensor_dimension171 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant171_scale = { 1, { 0.033083047717809677, } };
const TfArray<1, int> quant171_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant171 = { (TfLiteFloatArray*)&quant171_scale, (TfLiteIntArray*)&quant171_zero, 0 };
const TfArray<4, int> tensor_dimension172 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant172_scale = { 1, { 0.01125631108880043, } };
const TfArray<1, int> quant172_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant172 = { (TfLiteFloatArray*)&quant172_scale, (TfLiteIntArray*)&quant172_zero, 0 };
const TfArray<4, int> tensor_dimension173 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant173_scale = { 1, { 0.011032708920538425, } };
const TfArray<1, int> quant173_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant173 = { (TfLiteFloatArray*)&quant173_scale, (TfLiteIntArray*)&quant173_zero, 0 };
const TfArray<4, int> tensor_dimension174 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant174_scale = { 1, { 0.0086629847064614296, } };
const TfArray<1, int> quant174_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant174 = { (TfLiteFloatArray*)&quant174_scale, (TfLiteIntArray*)&quant174_zero, 0 };
const TfArray<4, int> tensor_dimension175 = { 4, { 1,2,2,8 } };
const TfArray<1, float> quant175_scale = { 1, { 0.034263927489519119, } };
const TfArray<1, int> quant175_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant175 = { (TfLiteFloatArray*)&quant175_scale, (TfLiteIntArray*)&quant175_zero, 0 };
const TfArray<4, int> tensor_dimension176 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant176_scale = { 1, { 0.011739283800125122, } };
const TfArray<1, int> quant176_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant176 = { (TfLiteFloatArray*)&quant176_scale, (TfLiteIntArray*)&quant176_zero, 0 };
const TfArray<4, int> tensor_dimension177 = { 4, { 1,2,2,48 } };
const TfArray<1, float> quant177_scale = { 1, { 0.014674783684313297, } };
const TfArray<1, int> quant177_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant177 = { (TfLiteFloatArray*)&quant177_scale, (TfLiteIntArray*)&quant177_zero, 0 };
const TfArray<4, int> tensor_dimension178 = { 4, { 1,2,2,16 } };
const TfArray<1, float> quant178_scale = { 1, { 0.035944387316703796, } };
const TfArray<1, int> quant178_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant178 = { (TfLiteFloatArray*)&quant178_scale, (TfLiteIntArray*)&quant178_zero, 0 };
const TfArray<4, int> tensor_dimension179 = { 4, { 1,2,2,1280 } };
const TfArray<1, float> quant179_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant179_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant179 = { (TfLiteFloatArray*)&quant179_scale, (TfLiteIntArray*)&quant179_zero, 0 };
const TfArray<2, int> tensor_dimension180 = { 2, { 4,8 } };
const TfArray<1, float> quant180_scale = { 1, { 0.025879364460706711, } };
const TfArray<1, int> quant180_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant180 = { (TfLiteFloatArray*)&quant180_scale, (TfLiteIntArray*)&quant180_zero, 0 };
const TfArray<2, int> tensor_dimension181 = { 2, { 1,32 } };
const TfArray<1, float> quant181_scale = { 1, { 0.025879364460706711, } };
const TfArray<1, int> quant181_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant181 = { (TfLiteFloatArray*)&quant181_scale, (TfLiteIntArray*)&quant181_zero, 0 };
const TfArray<2, int> tensor_dimension182 = { 2, { 1,2 } };
const TfArray<1, float> quant182_scale = { 1, { 0.046992186456918716, } };
const TfArray<1, int> quant182_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant182 = { (TfLiteFloatArray*)&quant182_scale, (TfLiteIntArray*)&quant182_zero, 0 };
const TfArray<2, int> tensor_dimension183 = { 2, { 1,2 } };
const TfArray<1, float> quant183_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant183_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant183 = { (TfLiteFloatArray*)&quant183_scale, (TfLiteIntArray*)&quant183_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,111,110 } };
const TfArray<1, int> outputs0 = { 1, { 112 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 112,109,108 } };
const TfArray<1, int> outputs1 = { 1, { 113 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 113,107,106 } };
const TfArray<1, int> outputs2 = { 1, { 114 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 112,114 } };
const TfArray<1, int> outputs3 = { 1, { 115 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 115,105,104 } };
const TfArray<1, int> outputs4 = { 1, { 116 } };
const TfArray<2, int> inputs5 = { 2, { 116,1 } };
const TfArray<1, int> outputs5 = { 1, { 117 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 117,103,102 } };
const TfArray<1, int> outputs6 = { 1, { 118 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 118,101,100 } };
const TfArray<1, int> outputs7 = { 1, { 119 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 119,99,98 } };
const TfArray<1, int> outputs8 = { 1, { 120 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 120,97,96 } };
const TfArray<1, int> outputs9 = { 1, { 121 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 121,95,94 } };
const TfArray<1, int> outputs10 = { 1, { 122 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 119,122 } };
const TfArray<1, int> outputs11 = { 1, { 123 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 123,93,92 } };
const TfArray<1, int> outputs12 = { 1, { 124 } };
const TfArray<2, int> inputs13 = { 2, { 124,1 } };
const TfArray<1, int> outputs13 = { 1, { 125 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 125,91,90 } };
const TfArray<1, int> outputs14 = { 1, { 126 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 126,89,88 } };
const TfArray<1, int> outputs15 = { 1, { 127 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 127,87,86 } };
const TfArray<1, int> outputs16 = { 1, { 128 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 128,85,84 } };
const TfArray<1, int> outputs17 = { 1, { 129 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 129,83,82 } };
const TfArray<1, int> outputs18 = { 1, { 130 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 127,130 } };
const TfArray<1, int> outputs19 = { 1, { 131 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 131,81,80 } };
const TfArray<1, int> outputs20 = { 1, { 132 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 132,79,78 } };
const TfArray<1, int> outputs21 = { 1, { 133 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 133,77,76 } };
const TfArray<1, int> outputs22 = { 1, { 134 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 131,134 } };
const TfArray<1, int> outputs23 = { 1, { 135 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 135,75,74 } };
const TfArray<1, int> outputs24 = { 1, { 136 } };
const TfArray<2, int> inputs25 = { 2, { 136,1 } };
const TfArray<1, int> outputs25 = { 1, { 137 } };
const TfLiteDepthwiseConvParams opdata26 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 137,73,72 } };
const TfArray<1, int> outputs26 = { 1, { 138 } };
const TfLiteConvParams opdata27 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs27 = { 3, { 138,71,70 } };
const TfArray<1, int> outputs27 = { 1, { 139 } };
const TfLiteConvParams opdata28 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs28 = { 3, { 139,69,68 } };
const TfArray<1, int> outputs28 = { 1, { 140 } };
const TfLiteDepthwiseConvParams opdata29 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs29 = { 3, { 140,67,66 } };
const TfArray<1, int> outputs29 = { 1, { 141 } };
const TfLiteConvParams opdata30 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs30 = { 3, { 141,65,64 } };
const TfArray<1, int> outputs30 = { 1, { 142 } };
const TfLiteAddParams opdata31 = { kTfLiteActNone };
const TfArray<2, int> inputs31 = { 2, { 139,142 } };
const TfArray<1, int> outputs31 = { 1, { 143 } };
const TfLiteConvParams opdata32 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs32 = { 3, { 143,63,62 } };
const TfArray<1, int> outputs32 = { 1, { 144 } };
const TfLiteDepthwiseConvParams opdata33 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs33 = { 3, { 144,61,60 } };
const TfArray<1, int> outputs33 = { 1, { 145 } };
const TfLiteConvParams opdata34 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs34 = { 3, { 145,59,58 } };
const TfArray<1, int> outputs34 = { 1, { 146 } };
const TfLiteAddParams opdata35 = { kTfLiteActNone };
const TfArray<2, int> inputs35 = { 2, { 143,146 } };
const TfArray<1, int> outputs35 = { 1, { 147 } };
const TfLiteConvParams opdata36 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs36 = { 3, { 147,57,56 } };
const TfArray<1, int> outputs36 = { 1, { 148 } };
const TfLiteDepthwiseConvParams opdata37 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs37 = { 3, { 148,55,54 } };
const TfArray<1, int> outputs37 = { 1, { 149 } };
const TfLiteConvParams opdata38 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs38 = { 3, { 149,53,52 } };
const TfArray<1, int> outputs38 = { 1, { 150 } };
const TfLiteAddParams opdata39 = { kTfLiteActNone };
const TfArray<2, int> inputs39 = { 2, { 147,150 } };
const TfArray<1, int> outputs39 = { 1, { 151 } };
const TfLiteConvParams opdata40 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs40 = { 3, { 151,51,50 } };
const TfArray<1, int> outputs40 = { 1, { 152 } };
const TfLiteDepthwiseConvParams opdata41 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs41 = { 3, { 152,49,48 } };
const TfArray<1, int> outputs41 = { 1, { 153 } };
const TfLiteConvParams opdata42 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs42 = { 3, { 153,47,46 } };
const TfArray<1, int> outputs42 = { 1, { 154 } };
const TfLiteAddParams opdata43 = { kTfLiteActNone };
const TfArray<2, int> inputs43 = { 2, { 151,154 } };
const TfArray<1, int> outputs43 = { 1, { 155 } };
const TfLiteConvParams opdata44 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs44 = { 3, { 155,45,44 } };
const TfArray<1, int> outputs44 = { 1, { 156 } };
const TfLiteDepthwiseConvParams opdata45 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs45 = { 3, { 156,43,42 } };
const TfArray<1, int> outputs45 = { 1, { 157 } };
const TfLiteConvParams opdata46 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs46 = { 3, { 157,41,40 } };
const TfArray<1, int> outputs46 = { 1, { 158 } };
const TfLiteAddParams opdata47 = { kTfLiteActNone };
const TfArray<2, int> inputs47 = { 2, { 155,158 } };
const TfArray<1, int> outputs47 = { 1, { 159 } };
const TfLiteConvParams opdata48 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs48 = { 3, { 159,39,38 } };
const TfArray<1, int> outputs48 = { 1, { 160 } };
const TfLiteDepthwiseConvParams opdata49 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs49 = { 3, { 160,37,36 } };
const TfArray<1, int> outputs49 = { 1, { 161 } };
const TfLiteConvParams opdata50 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs50 = { 3, { 161,35,34 } };
const TfArray<1, int> outputs50 = { 1, { 162 } };
const TfLiteAddParams opdata51 = { kTfLiteActNone };
const TfArray<2, int> inputs51 = { 2, { 159,162 } };
const TfArray<1, int> outputs51 = { 1, { 163 } };
const TfLiteConvParams opdata52 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs52 = { 3, { 163,33,32 } };
const TfArray<1, int> outputs52 = { 1, { 164 } };
const TfArray<2, int> inputs53 = { 2, { 164,2 } };
const TfArray<1, int> outputs53 = { 1, { 165 } };
const TfLiteDepthwiseConvParams opdata54 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs54 = { 3, { 165,31,30 } };
const TfArray<1, int> outputs54 = { 1, { 166 } };
const TfLiteConvParams opdata55 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs55 = { 3, { 166,29,28 } };
const TfArray<1, int> outputs55 = { 1, { 167 } };
const TfLiteConvParams opdata56 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs56 = { 3, { 167,27,26 } };
const TfArray<1, int> outputs56 = { 1, { 168 } };
const TfLiteDepthwiseConvParams opdata57 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs57 = { 3, { 168,25,24 } };
const TfArray<1, int> outputs57 = { 1, { 169 } };
const TfLiteConvParams opdata58 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs58 = { 3, { 169,23,22 } };
const TfArray<1, int> outputs58 = { 1, { 170 } };
const TfLiteAddParams opdata59 = { kTfLiteActNone };
const TfArray<2, int> inputs59 = { 2, { 167,170 } };
const TfArray<1, int> outputs59 = { 1, { 171 } };
const TfLiteConvParams opdata60 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs60 = { 3, { 171,21,20 } };
const TfArray<1, int> outputs60 = { 1, { 172 } };
const TfLiteDepthwiseConvParams opdata61 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs61 = { 3, { 172,19,18 } };
const TfArray<1, int> outputs61 = { 1, { 173 } };
const TfLiteConvParams opdata62 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs62 = { 3, { 173,17,16 } };
const TfArray<1, int> outputs62 = { 1, { 174 } };
const TfLiteAddParams opdata63 = { kTfLiteActNone };
const TfArray<2, int> inputs63 = { 2, { 171,174 } };
const TfArray<1, int> outputs63 = { 1, { 175 } };
const TfLiteConvParams opdata64 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs64 = { 3, { 175,15,14 } };
const TfArray<1, int> outputs64 = { 1, { 176 } };
const TfLiteDepthwiseConvParams opdata65 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs65 = { 3, { 176,13,12 } };
const TfArray<1, int> outputs65 = { 1, { 177 } };
const TfLiteConvParams opdata66 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs66 = { 3, { 177,11,10 } };
const TfArray<1, int> outputs66 = { 1, { 178 } };
const TfLiteConvParams opdata67 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs67 = { 3, { 178,9,8 } };
const TfArray<1, int> outputs67 = { 1, { 179 } };
const TfLiteFullyConnectedParams opdata68 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs68 = { 3, { 179,7,6 } };
const TfArray<1, int> outputs68 = { 1, { 180 } };
const TfLiteReshapeParams opdata69 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs69 = { 2, { 180,3 } };
const TfArray<1, int> outputs69 = { 1, { 181 } };
const TfLiteFullyConnectedParams opdata70 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs70 = { 3, { 181,5,4 } };
const TfArray<1, int> outputs70 = { 1, { 182 } };
const TfLiteSoftmaxParams opdata71 = { 1 };
const TfArray<1, int> inputs71 = { 1, { 182 } };
const TfArray<1, int> outputs71 = { 1, { 183 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 10240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 20480, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data45, (TfLiteIntArray*)&g0::tensor_dimension45, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data46, (TfLiteIntArray*)&g0::tensor_dimension46, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data47, (TfLiteIntArray*)&g0::tensor_dimension47, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data48, (TfLiteIntArray*)&g0::tensor_dimension48, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data49, (TfLiteIntArray*)&g0::tensor_dimension49, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data50, (TfLiteIntArray*)&g0::tensor_dimension50, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data51, (TfLiteIntArray*)&g0::tensor_dimension51, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data52, (TfLiteIntArray*)&g0::tensor_dimension52, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data53, (TfLiteIntArray*)&g0::tensor_dimension53, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data54, (TfLiteIntArray*)&g0::tensor_dimension54, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data55, (TfLiteIntArray*)&g0::tensor_dimension55, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data56, (TfLiteIntArray*)&g0::tensor_dimension56, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data57, (TfLiteIntArray*)&g0::tensor_dimension57, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data58, (TfLiteIntArray*)&g0::tensor_dimension58, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data59, (TfLiteIntArray*)&g0::tensor_dimension59, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data60, (TfLiteIntArray*)&g0::tensor_dimension60, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data61, (TfLiteIntArray*)&g0::tensor_dimension61, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data62, (TfLiteIntArray*)&g0::tensor_dimension62, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data63, (TfLiteIntArray*)&g0::tensor_dimension63, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data64, (TfLiteIntArray*)&g0::tensor_dimension64, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data65, (TfLiteIntArray*)&g0::tensor_dimension65, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data66, (TfLiteIntArray*)&g0::tensor_dimension66, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data67, (TfLiteIntArray*)&g0::tensor_dimension67, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data68, (TfLiteIntArray*)&g0::tensor_dimension68, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data69, (TfLiteIntArray*)&g0::tensor_dimension69, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data70, (TfLiteIntArray*)&g0::tensor_dimension70, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data71, (TfLiteIntArray*)&g0::tensor_dimension71, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data72, (TfLiteIntArray*)&g0::tensor_dimension72, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant72))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data73, (TfLiteIntArray*)&g0::tensor_dimension73, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant73))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data74, (TfLiteIntArray*)&g0::tensor_dimension74, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant74))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data75, (TfLiteIntArray*)&g0::tensor_dimension75, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant75))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data76, (TfLiteIntArray*)&g0::tensor_dimension76, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant76))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data77, (TfLiteIntArray*)&g0::tensor_dimension77, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant77))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data78, (TfLiteIntArray*)&g0::tensor_dimension78, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant78))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data79, (TfLiteIntArray*)&g0::tensor_dimension79, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant79))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data80, (TfLiteIntArray*)&g0::tensor_dimension80, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant80))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data81, (TfLiteIntArray*)&g0::tensor_dimension81, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant81))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data82, (TfLiteIntArray*)&g0::tensor_dimension82, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant82))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data83, (TfLiteIntArray*)&g0::tensor_dimension83, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant83))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data84, (TfLiteIntArray*)&g0::tensor_dimension84, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant84))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data85, (TfLiteIntArray*)&g0::tensor_dimension85, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant85))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data86, (TfLiteIntArray*)&g0::tensor_dimension86, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant86))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data87, (TfLiteIntArray*)&g0::tensor_dimension87, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant87))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data88, (TfLiteIntArray*)&g0::tensor_dimension88, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant88))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data89, (TfLiteIntArray*)&g0::tensor_dimension89, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant89))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data90, (TfLiteIntArray*)&g0::tensor_dimension90, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant90))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data91, (TfLiteIntArray*)&g0::tensor_dimension91, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant91))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data92, (TfLiteIntArray*)&g0::tensor_dimension92, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant92))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data93, (TfLiteIntArray*)&g0::tensor_dimension93, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant93))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data94, (TfLiteIntArray*)&g0::tensor_dimension94, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant94))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data95, (TfLiteIntArray*)&g0::tensor_dimension95, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant95))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data96, (TfLiteIntArray*)&g0::tensor_dimension96, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant96))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data97, (TfLiteIntArray*)&g0::tensor_dimension97, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant97))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data98, (TfLiteIntArray*)&g0::tensor_dimension98, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant98))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data99, (TfLiteIntArray*)&g0::tensor_dimension99, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant99))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data100, (TfLiteIntArray*)&g0::tensor_dimension100, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant100))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data101, (TfLiteIntArray*)&g0::tensor_dimension101, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant101))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data102, (TfLiteIntArray*)&g0::tensor_dimension102, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant102))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data103, (TfLiteIntArray*)&g0::tensor_dimension103, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant103))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data104, (TfLiteIntArray*)&g0::tensor_dimension104, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant104))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data105, (TfLiteIntArray*)&g0::tensor_dimension105, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant105))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data106, (TfLiteIntArray*)&g0::tensor_dimension106, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant106))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data107, (TfLiteIntArray*)&g0::tensor_dimension107, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant107))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data108, (TfLiteIntArray*)&g0::tensor_dimension108, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant108))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data109, (TfLiteIntArray*)&g0::tensor_dimension109, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant109))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data110, (TfLiteIntArray*)&g0::tensor_dimension110, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant110))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data111, (TfLiteIntArray*)&g0::tensor_dimension111, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant111))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension112, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant112))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension113, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant113))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension114, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant114))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension115, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant115))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension116, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant116))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension117, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant117))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension118, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant118))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension119, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant119))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension120, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant120))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension121, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant121))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension122, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant122))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension123, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant123))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension124, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant124))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension125, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant125))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension126, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant126))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension127, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant127))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension128, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant128))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension129, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant129))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension130, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant130))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4320), (TfLiteIntArray*)&g0::tensor_dimension131, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant131))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension132, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant132))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension133, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant133))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension134, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant134))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension135, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant135))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2352), (TfLiteIntArray*)&g0::tensor_dimension136, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant136))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension137, 2352, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant137))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3216), (TfLiteIntArray*)&g0::tensor_dimension138, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant138))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1808), (TfLiteIntArray*)&g0::tensor_dimension139, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant139))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1296), (TfLiteIntArray*)&g0::tensor_dimension140, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant140))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension141, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant141))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension142, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant142))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension143, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant143))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1296), (TfLiteIntArray*)&g0::tensor_dimension144, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant144))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension145, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant145))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension146, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant146))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1808), (TfLiteIntArray*)&g0::tensor_dimension147, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant147))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1296), (TfLiteIntArray*)&g0::tensor_dimension148, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant148))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension149, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant149))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension150, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant150))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension151, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant151))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1296), (TfLiteIntArray*)&g0::tensor_dimension152, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant152))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension153, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant153))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension154, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant154))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1808), (TfLiteIntArray*)&g0::tensor_dimension155, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant155))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1296), (TfLiteIntArray*)&g0::tensor_dimension156, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant156))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension157, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant157))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension158, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant158))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension159, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant159))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1296), (TfLiteIntArray*)&g0::tensor_dimension160, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant160))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension161, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant161))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80), (TfLiteIntArray*)&g0::tensor_dimension162, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant162))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension163, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant163))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension164, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant164))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension165, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant165))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2064), (TfLiteIntArray*)&g0::tensor_dimension166, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant166))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1280), (TfLiteIntArray*)&g0::tensor_dimension167, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant167))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1056), (TfLiteIntArray*)&g0::tensor_dimension168, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant168))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension169, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant169))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension170, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant170))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1248), (TfLiteIntArray*)&g0::tensor_dimension171, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant171))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1056), (TfLiteIntArray*)&g0::tensor_dimension172, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant172))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension173, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant173))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension174, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant174))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension175, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant175))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1056), (TfLiteIntArray*)&g0::tensor_dimension176, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant176))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 864), (TfLiteIntArray*)&g0::tensor_dimension177, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant177))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5120), (TfLiteIntArray*)&g0::tensor_dimension178, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant178))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension179, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant179))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 5120), (TfLiteIntArray*)&g0::tensor_dimension180, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant180))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension181, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant181))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension182, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant182))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension183, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant183))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[72] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata31)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata35)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs39, (TfLiteIntArray*)&g0::outputs39, (TfLiteIntArray*)&g0::inputs39, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata39)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs40, (TfLiteIntArray*)&g0::outputs40, (TfLiteIntArray*)&g0::inputs40, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata40)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs41, (TfLiteIntArray*)&g0::outputs41, (TfLiteIntArray*)&g0::inputs41, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata41)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs42, (TfLiteIntArray*)&g0::outputs42, (TfLiteIntArray*)&g0::inputs42, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata42)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs43, (TfLiteIntArray*)&g0::outputs43, (TfLiteIntArray*)&g0::inputs43, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata43)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs44, (TfLiteIntArray*)&g0::outputs44, (TfLiteIntArray*)&g0::inputs44, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata44)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs45, (TfLiteIntArray*)&g0::outputs45, (TfLiteIntArray*)&g0::inputs45, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata45)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs46, (TfLiteIntArray*)&g0::outputs46, (TfLiteIntArray*)&g0::inputs46, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata46)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs47, (TfLiteIntArray*)&g0::outputs47, (TfLiteIntArray*)&g0::inputs47, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata47)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs48, (TfLiteIntArray*)&g0::outputs48, (TfLiteIntArray*)&g0::inputs48, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata48)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs49, (TfLiteIntArray*)&g0::outputs49, (TfLiteIntArray*)&g0::inputs49, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata49)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs50, (TfLiteIntArray*)&g0::outputs50, (TfLiteIntArray*)&g0::inputs50, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata50)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs51, (TfLiteIntArray*)&g0::outputs51, (TfLiteIntArray*)&g0::inputs51, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata51)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs52, (TfLiteIntArray*)&g0::outputs52, (TfLiteIntArray*)&g0::inputs52, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata52)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs53, (TfLiteIntArray*)&g0::outputs53, (TfLiteIntArray*)&g0::inputs53, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs54, (TfLiteIntArray*)&g0::outputs54, (TfLiteIntArray*)&g0::inputs54, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata54)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs55, (TfLiteIntArray*)&g0::outputs55, (TfLiteIntArray*)&g0::inputs55, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata55)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs56, (TfLiteIntArray*)&g0::outputs56, (TfLiteIntArray*)&g0::inputs56, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata56)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs57, (TfLiteIntArray*)&g0::outputs57, (TfLiteIntArray*)&g0::inputs57, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata57)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs58, (TfLiteIntArray*)&g0::outputs58, (TfLiteIntArray*)&g0::inputs58, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata58)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs59, (TfLiteIntArray*)&g0::outputs59, (TfLiteIntArray*)&g0::inputs59, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata59)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs60, (TfLiteIntArray*)&g0::outputs60, (TfLiteIntArray*)&g0::inputs60, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata60)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs61, (TfLiteIntArray*)&g0::outputs61, (TfLiteIntArray*)&g0::inputs61, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata61)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs62, (TfLiteIntArray*)&g0::outputs62, (TfLiteIntArray*)&g0::inputs62, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata62)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs63, (TfLiteIntArray*)&g0::outputs63, (TfLiteIntArray*)&g0::inputs63, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata63)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs64, (TfLiteIntArray*)&g0::outputs64, (TfLiteIntArray*)&g0::inputs64, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata64)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs65, (TfLiteIntArray*)&g0::outputs65, (TfLiteIntArray*)&g0::inputs65, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata65)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs66, (TfLiteIntArray*)&g0::outputs66, (TfLiteIntArray*)&g0::inputs66, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata66)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs67, (TfLiteIntArray*)&g0::outputs67, (TfLiteIntArray*)&g0::inputs67, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata67)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs68, (TfLiteIntArray*)&g0::outputs68, (TfLiteIntArray*)&g0::inputs68, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata68)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs69, (TfLiteIntArray*)&g0::outputs69, (TfLiteIntArray*)&g0::inputs69, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata69)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs70, (TfLiteIntArray*)&g0::outputs70, (TfLiteIntArray*)&g0::inputs70, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata70)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs71, (TfLiteIntArray*)&g0::outputs71, (TfLiteIntArray*)&g0::inputs71, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata71)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[72] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs28, (TfLiteIntArray*)&g0::outputs28, (TfLiteIntArray*)&g0::inputs28, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata28)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs29, (TfLiteIntArray*)&g0::outputs29, (TfLiteIntArray*)&g0::inputs29, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata29)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs30, (TfLiteIntArray*)&g0::outputs30, (TfLiteIntArray*)&g0::inputs30, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata30)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs31, (TfLiteIntArray*)&g0::outputs31, (TfLiteIntArray*)&g0::inputs31, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata31)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs32, (TfLiteIntArray*)&g0::outputs32, (TfLiteIntArray*)&g0::inputs32, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata32)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs33, (TfLiteIntArray*)&g0::outputs33, (TfLiteIntArray*)&g0::inputs33, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata33)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs34, (TfLiteIntArray*)&g0::outputs34, (TfLiteIntArray*)&g0::inputs34, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata34)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs35, (TfLiteIntArray*)&g0::outputs35, (TfLiteIntArray*)&g0::inputs35, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata35)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs36, (TfLiteIntArray*)&g0::outputs36, (TfLiteIntArray*)&g0::inputs36, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata36)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs37, (TfLiteIntArray*)&g0::outputs37, (TfLiteIntArray*)&g0::inputs37, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata37)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs38, (TfLiteIntArray*)&g0::outputs38, (TfLiteIntArray*)&g0::inputs38, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata38)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs39, (TfLiteIntArray*)&g0::outputs39, (TfLiteIntArray*)&g0::inputs39, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata39)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs40, (TfLiteIntArray*)&g0::outputs40, (TfLiteIntArray*)&g0::inputs40, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata40)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs41, (TfLiteIntArray*)&g0::outputs41, (TfLiteIntArray*)&g0::inputs41, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata41)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs42, (TfLiteIntArray*)&g0::outputs42, (TfLiteIntArray*)&g0::inputs42, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata42)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs43, (TfLiteIntArray*)&g0::outputs43, (TfLiteIntArray*)&g0::inputs43, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata43)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs44, (TfLiteIntArray*)&g0::outputs44, (TfLiteIntArray*)&g0::inputs44, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata44)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs45, (TfLiteIntArray*)&g0::outputs45, (TfLiteIntArray*)&g0::inputs45, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata45)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs46, (TfLiteIntArray*)&g0::outputs46, (TfLiteIntArray*)&g0::inputs46, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata46)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs47, (TfLiteIntArray*)&g0::outputs47, (TfLiteIntArray*)&g0::inputs47, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata47)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs48, (TfLiteIntArray*)&g0::outputs48, (TfLiteIntArray*)&g0::inputs48, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata48)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs49, (TfLiteIntArray*)&g0::outputs49, (TfLiteIntArray*)&g0::inputs49, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata49)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs50, (TfLiteIntArray*)&g0::outputs50, (TfLiteIntArray*)&g0::inputs50, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata50)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs51, (TfLiteIntArray*)&g0::outputs51, (TfLiteIntArray*)&g0::inputs51, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata51)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs52, (TfLiteIntArray*)&g0::outputs52, (TfLiteIntArray*)&g0::inputs52, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata52)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs53, (TfLiteIntArray*)&g0::outputs53, (TfLiteIntArray*)&g0::inputs53, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs54, (TfLiteIntArray*)&g0::outputs54, (TfLiteIntArray*)&g0::inputs54, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata54)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs55, (TfLiteIntArray*)&g0::outputs55, (TfLiteIntArray*)&g0::inputs55, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata55)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs56, (TfLiteIntArray*)&g0::outputs56, (TfLiteIntArray*)&g0::inputs56, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata56)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs57, (TfLiteIntArray*)&g0::outputs57, (TfLiteIntArray*)&g0::inputs57, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata57)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs58, (TfLiteIntArray*)&g0::outputs58, (TfLiteIntArray*)&g0::inputs58, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata58)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs59, (TfLiteIntArray*)&g0::outputs59, (TfLiteIntArray*)&g0::inputs59, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata59)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs60, (TfLiteIntArray*)&g0::outputs60, (TfLiteIntArray*)&g0::inputs60, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata60)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs61, (TfLiteIntArray*)&g0::outputs61, (TfLiteIntArray*)&g0::inputs61, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata61)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs62, (TfLiteIntArray*)&g0::outputs62, (TfLiteIntArray*)&g0::inputs62, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata62)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs63, (TfLiteIntArray*)&g0::outputs63, (TfLiteIntArray*)&g0::inputs63, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata63)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs64, (TfLiteIntArray*)&g0::outputs64, (TfLiteIntArray*)&g0::inputs64, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata64)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs65, (TfLiteIntArray*)&g0::outputs65, (TfLiteIntArray*)&g0::inputs65, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata65)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs66, (TfLiteIntArray*)&g0::outputs66, (TfLiteIntArray*)&g0::inputs66, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata66)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs67, (TfLiteIntArray*)&g0::outputs67, (TfLiteIntArray*)&g0::inputs67, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata67)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs68, (TfLiteIntArray*)&g0::outputs68, (TfLiteIntArray*)&g0::inputs68, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata68)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs69, (TfLiteIntArray*)&g0::outputs69, (TfLiteIntArray*)&g0::inputs69, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata69)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs70, (TfLiteIntArray*)&g0::outputs70, (TfLiteIntArray*)&g0::inputs70, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata70)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs71, (TfLiteIntArray*)&g0::outputs71, (TfLiteIntArray*)&g0::inputs71, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata71)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_FULLY_CONNECTED, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 184, };
const size_t tflNodes_subgraph_index[] = {0, 72, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  183, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 184;
  for (size_t i = 0; i < 184; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 72; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
